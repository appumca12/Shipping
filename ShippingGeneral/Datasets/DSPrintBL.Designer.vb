'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DSPrintBL"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DSPrintBL
    Inherits Global.System.Data.DataSet
    
    Private tableBL As BLDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BL")) Is Nothing) Then
                MyBase.Tables.Add(New BLDataTable(ds.Tables("BL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BL() As BLDataTable
        Get
            Return Me.tableBL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DSPrintBL = CType(MyBase.Clone,DSPrintBL)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("BL")) Is Nothing) Then
                MyBase.Tables.Add(New BLDataTable(ds.Tables("BL")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBL = CType(MyBase.Tables("BL"),BLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBL) Is Nothing) Then
                Me.tableBL.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DSPrintBL"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DSPrintBL.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBL = New BLDataTable
        MyBase.Tables.Add(Me.tableBL)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DSPrintBL = New DSPrintBL
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub BLRowChangeEventHandler(ByVal sender As Object, ByVal e As BLRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BLDataTable
        Inherits Global.System.Data.TypedTableBase(Of BLRow)
        
        Private columnShipper As Global.System.Data.DataColumn
        
        Private columnCnee As Global.System.Data.DataColumn
        
        Private columnNotify1 As Global.System.Data.DataColumn
        
        Private columnNotify2 As Global.System.Data.DataColumn
        
        Private columnBookingNo As Global.System.Data.DataColumn
        
        Private columnBLNO As Global.System.Data.DataColumn
        
        Private columnAgent As Global.System.Data.DataColumn
        
        Private columnPOL As Global.System.Data.DataColumn
        
        Private columnPOD As Global.System.Data.DataColumn
        
        Private columnPOT As Global.System.Data.DataColumn
        
        Private columnFPOD As Global.System.Data.DataColumn
        
        Private columnVessel As Global.System.Data.DataColumn
        
        Private columnVoyage As Global.System.Data.DataColumn
        
        Private columnMVessel As Global.System.Data.DataColumn
        
        Private columnMVoyage As Global.System.Data.DataColumn
        
        Private columnCntrs As Global.System.Data.DataColumn
        
        Private columnGoods As Global.System.Data.DataColumn
        
        Private columnNET As Global.System.Data.DataColumn
        
        Private columnGW As Global.System.Data.DataColumn
        
        Private columnTW As Global.System.Data.DataColumn
        
        Private columnCBM As Global.System.Data.DataColumn
        
        Private columnTerms As Global.System.Data.DataColumn
        
        Private columnNoOfBls As Global.System.Data.DataColumn
        
        Private columnIssuePlace As Global.System.Data.DataColumn
        
        Private columnIssueDate As Global.System.Data.DataColumn
        
        Private columnPOR As Global.System.Data.DataColumn
        
        Private columnBLType As Global.System.Data.DataColumn
        
        Private columnReference As Global.System.Data.DataColumn
        
        Private columnArrival As Global.System.Data.DataColumn
        
        Private columnTTW As Global.System.Data.DataColumn
        
        Private columnTGW As Global.System.Data.DataColumn
        
        Private columnCluses As Global.System.Data.DataColumn
        
        Private columnPKGS As Global.System.Data.DataColumn
        
        Private columnTNET As Global.System.Data.DataColumn
        
        Private columnPayAT As Global.System.Data.DataColumn
        
        Private columnOnborad_Date As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipperColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipper
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CneeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCnee
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Notify1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotify1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Notify2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotify2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BookingNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBookingNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAgent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property POTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FPODColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFPOD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VesselColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVessel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VoyageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVoyage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVesselColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVessel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVoyageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVoyage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CntrsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCntrs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoodsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoods
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CBMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCBM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TermsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTerms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoOfBlsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoOfBls
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IssuePlaceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssuePlace
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IssueDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIssueDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BLTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ArrivalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnArrival
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TTWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTTW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TGWColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTGW
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClusesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCluses
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PKGSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKGS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TNETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTNET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PayATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Onborad_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOnborad_Date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BLRow
            Get
                Return CType(Me.Rows(index),BLRow)
            End Get
        End Property
        
        Public Event BLRowChanging As BLRowChangeEventHandler
        
        Public Event BLRowChanged As BLRowChangeEventHandler
        
        Public Event BLRowDeleting As BLRowChangeEventHandler
        
        Public Event BLRowDeleted As BLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBLRow(ByVal row As BLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBLRow( _
                    ByVal Shipper As String,  _
                    ByVal Cnee As String,  _
                    ByVal Notify1 As String,  _
                    ByVal Notify2 As String,  _
                    ByVal BookingNo As String,  _
                    ByVal BLNO As String,  _
                    ByVal Agent As String,  _
                    ByVal POL As String,  _
                    ByVal POD As String,  _
                    ByVal POT As String,  _
                    ByVal FPOD As String,  _
                    ByVal Vessel As String,  _
                    ByVal Voyage As String,  _
                    ByVal MVessel As String,  _
                    ByVal MVoyage As String,  _
                    ByVal Cntrs As String,  _
                    ByVal Goods As String,  _
                    ByVal NET As String,  _
                    ByVal GW As String,  _
                    ByVal TW As String,  _
                    ByVal CBM As String,  _
                    ByVal Terms As String,  _
                    ByVal NoOfBls As String,  _
                    ByVal IssuePlace As String,  _
                    ByVal IssueDate As String,  _
                    ByVal POR As String,  _
                    ByVal BLType As String,  _
                    ByVal Reference As String,  _
                    ByVal Arrival As Date,  _
                    ByVal TTW As Double,  _
                    ByVal TGW As String,  _
                    ByVal Cluses As String,  _
                    ByVal PKGS As String,  _
                    ByVal TNET As String,  _
                    ByVal PayAT As String,  _
                    ByVal Onborad_Date As Date) As BLRow
            Dim rowBLRow As BLRow = CType(Me.NewRow,BLRow)
            Dim columnValuesArray() As Object = New Object() {Shipper, Cnee, Notify1, Notify2, BookingNo, BLNO, Agent, POL, POD, POT, FPOD, Vessel, Voyage, MVessel, MVoyage, Cntrs, Goods, NET, GW, TW, CBM, Terms, NoOfBls, IssuePlace, IssueDate, POR, BLType, Reference, Arrival, TTW, TGW, Cluses, PKGS, TNET, PayAT, Onborad_Date}
            rowBLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBLRow)
            Return rowBLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BLDataTable = CType(MyBase.Clone,BLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnShipper = MyBase.Columns("Shipper")
            Me.columnCnee = MyBase.Columns("Cnee")
            Me.columnNotify1 = MyBase.Columns("Notify1")
            Me.columnNotify2 = MyBase.Columns("Notify2")
            Me.columnBookingNo = MyBase.Columns("BookingNo")
            Me.columnBLNO = MyBase.Columns("BLNO")
            Me.columnAgent = MyBase.Columns("Agent")
            Me.columnPOL = MyBase.Columns("POL")
            Me.columnPOD = MyBase.Columns("POD")
            Me.columnPOT = MyBase.Columns("POT")
            Me.columnFPOD = MyBase.Columns("FPOD")
            Me.columnVessel = MyBase.Columns("Vessel")
            Me.columnVoyage = MyBase.Columns("Voyage")
            Me.columnMVessel = MyBase.Columns("MVessel")
            Me.columnMVoyage = MyBase.Columns("MVoyage")
            Me.columnCntrs = MyBase.Columns("Cntrs")
            Me.columnGoods = MyBase.Columns("Goods")
            Me.columnNET = MyBase.Columns("NET")
            Me.columnGW = MyBase.Columns("GW")
            Me.columnTW = MyBase.Columns("TW")
            Me.columnCBM = MyBase.Columns("CBM")
            Me.columnTerms = MyBase.Columns("Terms")
            Me.columnNoOfBls = MyBase.Columns("NoOfBls")
            Me.columnIssuePlace = MyBase.Columns("IssuePlace")
            Me.columnIssueDate = MyBase.Columns("IssueDate")
            Me.columnPOR = MyBase.Columns("POR")
            Me.columnBLType = MyBase.Columns("BLType")
            Me.columnReference = MyBase.Columns("Reference")
            Me.columnArrival = MyBase.Columns("Arrival")
            Me.columnTTW = MyBase.Columns("TTW")
            Me.columnTGW = MyBase.Columns("TGW")
            Me.columnCluses = MyBase.Columns("Cluses")
            Me.columnPKGS = MyBase.Columns("PKGS")
            Me.columnTNET = MyBase.Columns("TNET")
            Me.columnPayAT = MyBase.Columns("PayAT")
            Me.columnOnborad_Date = MyBase.Columns("Onborad Date")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnShipper = New Global.System.Data.DataColumn("Shipper", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipper)
            Me.columnCnee = New Global.System.Data.DataColumn("Cnee", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCnee)
            Me.columnNotify1 = New Global.System.Data.DataColumn("Notify1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotify1)
            Me.columnNotify2 = New Global.System.Data.DataColumn("Notify2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotify2)
            Me.columnBookingNo = New Global.System.Data.DataColumn("BookingNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBookingNo)
            Me.columnBLNO = New Global.System.Data.DataColumn("BLNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLNO)
            Me.columnAgent = New Global.System.Data.DataColumn("Agent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAgent)
            Me.columnPOL = New Global.System.Data.DataColumn("POL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOL)
            Me.columnPOD = New Global.System.Data.DataColumn("POD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOD)
            Me.columnPOT = New Global.System.Data.DataColumn("POT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOT)
            Me.columnFPOD = New Global.System.Data.DataColumn("FPOD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFPOD)
            Me.columnVessel = New Global.System.Data.DataColumn("Vessel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVessel)
            Me.columnVoyage = New Global.System.Data.DataColumn("Voyage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoyage)
            Me.columnMVessel = New Global.System.Data.DataColumn("MVessel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVessel)
            Me.columnMVoyage = New Global.System.Data.DataColumn("MVoyage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVoyage)
            Me.columnCntrs = New Global.System.Data.DataColumn("Cntrs", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCntrs)
            Me.columnGoods = New Global.System.Data.DataColumn("Goods", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoods)
            Me.columnNET = New Global.System.Data.DataColumn("NET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNET)
            Me.columnGW = New Global.System.Data.DataColumn("GW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGW)
            Me.columnTW = New Global.System.Data.DataColumn("TW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTW)
            Me.columnCBM = New Global.System.Data.DataColumn("CBM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCBM)
            Me.columnTerms = New Global.System.Data.DataColumn("Terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTerms)
            Me.columnNoOfBls = New Global.System.Data.DataColumn("NoOfBls", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoOfBls)
            Me.columnIssuePlace = New Global.System.Data.DataColumn("IssuePlace", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssuePlace)
            Me.columnIssueDate = New Global.System.Data.DataColumn("IssueDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIssueDate)
            Me.columnPOR = New Global.System.Data.DataColumn("POR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOR)
            Me.columnBLType = New Global.System.Data.DataColumn("BLType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLType)
            Me.columnReference = New Global.System.Data.DataColumn("Reference", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference)
            Me.columnArrival = New Global.System.Data.DataColumn("Arrival", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrival)
            Me.columnTTW = New Global.System.Data.DataColumn("TTW", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTTW)
            Me.columnTGW = New Global.System.Data.DataColumn("TGW", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTGW)
            Me.columnCluses = New Global.System.Data.DataColumn("Cluses", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCluses)
            Me.columnPKGS = New Global.System.Data.DataColumn("PKGS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKGS)
            Me.columnTNET = New Global.System.Data.DataColumn("TNET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTNET)
            Me.columnPayAT = New Global.System.Data.DataColumn("PayAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayAT)
            Me.columnOnborad_Date = New Global.System.Data.DataColumn("Onborad Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOnborad_Date)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBLRow() As BLRow
            Return CType(Me.NewRow,BLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BLRowChangedEvent) Is Nothing) Then
                RaiseEvent BLRowChanged(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BLRowChangingEvent) Is Nothing) Then
                RaiseEvent BLRowChanging(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BLRowDeletedEvent) Is Nothing) Then
                RaiseEvent BLRowDeleted(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BLRowDeletingEvent) Is Nothing) Then
                RaiseEvent BLRowDeleting(Me, New BLRowChangeEvent(CType(e.Row,BLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBLRow(ByVal row As BLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DSPrintBL = New DSPrintBL
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BLRow
        Inherits Global.System.Data.DataRow
        
        Private tableBL As BLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBL = CType(Me.Table,BLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Shipper() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.ShipperColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Shipper' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.ShipperColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cnee() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.CneeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cnee' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.CneeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notify1() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.Notify1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notify1' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.Notify1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notify2() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.Notify2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Notify2' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.Notify2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BookingNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.BookingNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BookingNo' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.BookingNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.BLNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLNO' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.BLNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Agent() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.AgentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Agent' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.AgentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POL() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.POLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POL' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.POLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POD() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.PODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POD' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.PODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POT() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.POTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POT' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.POTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FPOD() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.FPODColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FPOD' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.FPODColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vessel() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.VesselColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Vessel' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.VesselColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Voyage() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.VoyageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Voyage' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.VoyageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVessel() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.MVesselColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MVessel' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.MVesselColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVoyage() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.MVoyageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MVoyage' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.MVoyageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cntrs() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.CntrsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Cntrs' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.CntrsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Goods() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.GoodsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Goods' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.GoodsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NET() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.NETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NET' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.NETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GW() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.GWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GW' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.GWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TW() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.TWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TW' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.TWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CBM() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.CBMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CBM' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.CBMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Terms() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.TermsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Terms' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.TermsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoOfBls() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.NoOfBlsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NoOfBls' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.NoOfBlsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IssuePlace() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.IssuePlaceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IssuePlace' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.IssuePlaceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IssueDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.IssueDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IssueDate' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.IssueDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POR() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.PORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POR' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.PORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BLType() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.BLTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLType' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.BLTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reference() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.ReferenceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reference' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.ReferenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Arrival() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBL.ArrivalColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Arrival' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.ArrivalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TTW() As Double
            Get
                Try 
                    Return CType(Me(Me.tableBL.TTWColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TTW' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.TTWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TGW() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.TGWColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TGW' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.TGWColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cluses() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.ClusesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Clauses' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.ClusesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PKGS() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.PKGSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PKGS' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.PKGSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TNET() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.TNETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TNET' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.TNETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PayAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableBL.PayATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PayAT' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.PayATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Onborad_Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBL.Onborad_DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Onborad Date' in table 'BL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBL.Onborad_DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipperNull() As Boolean
            Return Me.IsNull(Me.tableBL.ShipperColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipperNull()
            Me(Me.tableBL.ShipperColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCneeNull() As Boolean
            Return Me.IsNull(Me.tableBL.CneeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCneeNull()
            Me(Me.tableBL.CneeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotify1Null() As Boolean
            Return Me.IsNull(Me.tableBL.Notify1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotify1Null()
            Me(Me.tableBL.Notify1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotify2Null() As Boolean
            Return Me.IsNull(Me.tableBL.Notify2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotify2Null()
            Me(Me.tableBL.Notify2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBookingNoNull() As Boolean
            Return Me.IsNull(Me.tableBL.BookingNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBookingNoNull()
            Me(Me.tableBL.BookingNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLNONull() As Boolean
            Return Me.IsNull(Me.tableBL.BLNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLNONull()
            Me(Me.tableBL.BLNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgentNull() As Boolean
            Return Me.IsNull(Me.tableBL.AgentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgentNull()
            Me(Me.tableBL.AgentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOLNull() As Boolean
            Return Me.IsNull(Me.tableBL.POLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOLNull()
            Me(Me.tableBL.POLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPODNull() As Boolean
            Return Me.IsNull(Me.tableBL.PODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPODNull()
            Me(Me.tableBL.PODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOTNull() As Boolean
            Return Me.IsNull(Me.tableBL.POTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOTNull()
            Me(Me.tableBL.POTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFPODNull() As Boolean
            Return Me.IsNull(Me.tableBL.FPODColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFPODNull()
            Me(Me.tableBL.FPODColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVesselNull() As Boolean
            Return Me.IsNull(Me.tableBL.VesselColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVesselNull()
            Me(Me.tableBL.VesselColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVoyageNull() As Boolean
            Return Me.IsNull(Me.tableBL.VoyageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVoyageNull()
            Me(Me.tableBL.VoyageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVesselNull() As Boolean
            Return Me.IsNull(Me.tableBL.MVesselColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVesselNull()
            Me(Me.tableBL.MVesselColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMVoyageNull() As Boolean
            Return Me.IsNull(Me.tableBL.MVoyageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMVoyageNull()
            Me(Me.tableBL.MVoyageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCntrsNull() As Boolean
            Return Me.IsNull(Me.tableBL.CntrsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCntrsNull()
            Me(Me.tableBL.CntrsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoodsNull() As Boolean
            Return Me.IsNull(Me.tableBL.GoodsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoodsNull()
            Me(Me.tableBL.GoodsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNETNull() As Boolean
            Return Me.IsNull(Me.tableBL.NETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNETNull()
            Me(Me.tableBL.NETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGWNull() As Boolean
            Return Me.IsNull(Me.tableBL.GWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGWNull()
            Me(Me.tableBL.GWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTWNull() As Boolean
            Return Me.IsNull(Me.tableBL.TWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTWNull()
            Me(Me.tableBL.TWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCBMNull() As Boolean
            Return Me.IsNull(Me.tableBL.CBMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCBMNull()
            Me(Me.tableBL.CBMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTermsNull() As Boolean
            Return Me.IsNull(Me.tableBL.TermsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTermsNull()
            Me(Me.tableBL.TermsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoOfBlsNull() As Boolean
            Return Me.IsNull(Me.tableBL.NoOfBlsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoOfBlsNull()
            Me(Me.tableBL.NoOfBlsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIssuePlaceNull() As Boolean
            Return Me.IsNull(Me.tableBL.IssuePlaceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIssuePlaceNull()
            Me(Me.tableBL.IssuePlaceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIssueDateNull() As Boolean
            Return Me.IsNull(Me.tableBL.IssueDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIssueDateNull()
            Me(Me.tableBL.IssueDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPORNull() As Boolean
            Return Me.IsNull(Me.tableBL.PORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPORNull()
            Me(Me.tableBL.PORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBLTypeNull() As Boolean
            Return Me.IsNull(Me.tableBL.BLTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBLTypeNull()
            Me(Me.tableBL.BLTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenceNull() As Boolean
            Return Me.IsNull(Me.tableBL.ReferenceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenceNull()
            Me(Me.tableBL.ReferenceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrivalNull() As Boolean
            Return Me.IsNull(Me.tableBL.ArrivalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrivalNull()
            Me(Me.tableBL.ArrivalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTTWNull() As Boolean
            Return Me.IsNull(Me.tableBL.TTWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTTWNull()
            Me(Me.tableBL.TTWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTGWNull() As Boolean
            Return Me.IsNull(Me.tableBL.TGWColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTGWNull()
            Me(Me.tableBL.TGWColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClusesNull() As Boolean
            Return Me.IsNull(Me.tableBL.ClusesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClusesNull()
            Me(Me.tableBL.ClusesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPKGSNull() As Boolean
            Return Me.IsNull(Me.tableBL.PKGSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPKGSNull()
            Me(Me.tableBL.PKGSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTNETNull() As Boolean
            Return Me.IsNull(Me.tableBL.TNETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTNETNull()
            Me(Me.tableBL.TNETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPayATNull() As Boolean
            Return Me.IsNull(Me.tableBL.PayATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPayATNull()
            Me(Me.tableBL.PayATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOnborad_DateNull() As Boolean
            Return Me.IsNull(Me.tableBL.Onborad_DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOnborad_DateNull()
            Me(Me.tableBL.Onborad_DateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
