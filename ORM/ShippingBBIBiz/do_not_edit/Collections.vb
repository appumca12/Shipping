Imports System.Collections
Imports System.Reflection
Imports System.Data.SqlTypes
Imports System.Globalization
Imports System.ComponentModel
Imports OrmLib

Namespace ShippingBiz

	

		<OrmLib.TypedCollectionAttribute(GetType(sysdiagrams))>public MustInherit class sysdiagramsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(sysdiagrams))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As sysdiagrams
            Get
                return CType(Me.List(index),sysdiagrams)
            End Get
            Set(ByVal Value As sysdiagrams)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As sysdiagramsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As sysdiagramsCollection
            Dim retCollection = New sysdiagramsCollection()
            Dim _sysdiagrams As sysdiagrams

            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams(propertyName), searchValue) Then
                    retCollection.Add(_sysdiagrams)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As sysdiagramsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As sysdiagramsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As sysdiagrams
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As sysdiagrams
            Dim _sysdiagrams As sysdiagrams

            For Each _sysdiagrams In Me.List
                if  Match(comparer,_sysdiagrams(propertyName) , searchValue) then Return _sysdiagrams
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newsysdiagrams As sysdiagrams) As System.Int32
            Return Me.List.Add(newsysdiagrams)
        End Function
			
		

        Public Function FindByname(ByVal searchValue As System.String) As sysdiagrams
            Return FindByname(searchValue, CompareType.Exact)
        End Function


        Public Function FindByname(ByVal searchValue As System.String, ByVal comparer As CompareType) As sysdiagrams
            Dim _sysdiagrams As sysdiagrams
            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.name, searchValue) Then Return _sysdiagrams
            Next

            Return Nothing
        End Function

        Public Function FindByprincipal_id(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As sysdiagrams
            Return FindByprincipal_id(searchValue, CompareType.Exact)
        End Function


        Public Function FindByprincipal_id(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As sysdiagrams
            Dim _sysdiagrams As sysdiagrams
            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.principal_id, searchValue) Then Return _sysdiagrams
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt32 
        Public Function FindByprincipal_id(ByVal searchValue As String) As sysdiagrams
            Return FindByprincipal_id(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByprincipal_id(ByVal searchValue As String, ByVal comparer As CompareType) As sysdiagrams
            Return FindByprincipal_id(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBydiagram_id(ByVal searchValue As System.Int32) As sysdiagrams
            Return FindBydiagram_id(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydiagram_id(ByVal searchValue As System.Int32, ByVal comparer As CompareType) As sysdiagrams
            Dim _sysdiagrams As sysdiagrams
            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.diagram_id, searchValue) Then Return _sysdiagrams
            Next

            Return Nothing
        End Function

		' System.Int32 
        Public Function FindBydiagram_id(ByVal searchValue As String) As sysdiagrams
            Return FindBydiagram_id(System.Int32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBydiagram_id(ByVal searchValue As String, ByVal comparer As CompareType) As sysdiagrams
            Return FindBydiagram_id(System.Int32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByversion(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As sysdiagrams
            Return FindByversion(searchValue, CompareType.Exact)
        End Function


        Public Function FindByversion(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As sysdiagrams
            Dim _sysdiagrams As sysdiagrams
            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.version, searchValue) Then Return _sysdiagrams
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt32 
        Public Function FindByversion(ByVal searchValue As String) As sysdiagrams
            Return FindByversion(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByversion(ByVal searchValue As String, ByVal comparer As CompareType) As sysdiagrams
            Return FindByversion(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBydefinition(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As sysdiagrams
            Return FindBydefinition(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydefinition(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As sysdiagrams
            Dim _sysdiagrams As sysdiagrams
            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.definition, searchValue) Then Return _sysdiagrams
            Next

            Return Nothing
        End Function

        Public Function FilterByname(ByVal searchValue As System.String) As sysdiagramsCollection
            Return FilterByname(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByname(ByVal searchValue As System.String, ByVal comparer As CompareType) As sysdiagramsCollection
            Dim retCollection = New sysdiagramsCollection()
            Dim _sysdiagrams As sysdiagrams

            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.name, searchValue) Then
                    retCollection.Add(_sysdiagrams)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByprincipal_id(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As sysdiagramsCollection
            Return FilterByprincipal_id(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByprincipal_id(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As sysdiagramsCollection
            Dim retCollection = New sysdiagramsCollection()
            Dim _sysdiagrams As sysdiagrams

            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.principal_id, searchValue) Then
                    retCollection.Add(_sysdiagrams)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt32
        Public Function FilterByprincipal_id(ByVal searchValue As String) As sysdiagramsCollection
            Return FilterByprincipal_id(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByprincipal_id(ByVal searchValue As String, ByVal comparer As CompareType) As sysdiagramsCollection
            Return FilterByprincipal_id(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function

        Public Function FilterBydiagram_id(ByVal searchValue As System.Int32) As sysdiagramsCollection
            Return FilterBydiagram_id(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydiagram_id(ByVal searchValue As System.Int32, ByVal comparer As CompareType) As sysdiagramsCollection
            Dim retCollection = New sysdiagramsCollection()
            Dim _sysdiagrams As sysdiagrams

            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.diagram_id, searchValue) Then
                    retCollection.Add(_sysdiagrams)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Int32
        Public Function FilterBydiagram_id(ByVal searchValue As String) As sysdiagramsCollection
            Return FilterBydiagram_id(System.Int32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBydiagram_id(ByVal searchValue As String, ByVal comparer As CompareType) As sysdiagramsCollection
            Return FilterBydiagram_id(System.Int32.Parse(searchValue), comparer)
        End Function

        Public Function FilterByversion(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As sysdiagramsCollection
            Return FilterByversion(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByversion(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As sysdiagramsCollection
            Dim retCollection = New sysdiagramsCollection()
            Dim _sysdiagrams As sysdiagrams

            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.version, searchValue) Then
                    retCollection.Add(_sysdiagrams)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt32
        Public Function FilterByversion(ByVal searchValue As String) As sysdiagramsCollection
            Return FilterByversion(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByversion(ByVal searchValue As String, ByVal comparer As CompareType) As sysdiagramsCollection
            Return FilterByversion(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function

        Public Function FilterBydefinition(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As sysdiagramsCollection
            Return FilterBydefinition(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydefinition(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As sysdiagramsCollection
            Dim retCollection = New sysdiagramsCollection()
            Dim _sysdiagrams As sysdiagrams

            For Each _sysdiagrams In Me.List
                If Match(comparer, _sysdiagrams.definition, searchValue) Then
                    retCollection.Add(_sysdiagrams)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByname(ByVal sortDirection As SortDirection) As sysdiagramsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("name"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByprincipal_id(ByVal sortDirection As SortDirection) As sysdiagramsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("principal_id"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydiagram_id(ByVal sortDirection As SortDirection) As sysdiagramsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("diagram_id"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByversion(ByVal sortDirection As SortDirection) As sysdiagramsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("version"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydefinition(ByVal sortDirection As SortDirection) As sysdiagramsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("definition"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AccessLevel))>public MustInherit class TB_AccessLevelCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AccessLevel))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AccessLevel
            Get
                return CType(Me.List(index),TB_AccessLevel)
            End Get
            Set(ByVal Value As TB_AccessLevel)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AccessLevelCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AccessLevelCollection
            Dim retCollection = New TB_AccessLevelCollection()
            Dim _TB_AccessLevel As TB_AccessLevel

            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel(propertyName), searchValue) Then
                    retCollection.Add(_TB_AccessLevel)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AccessLevelCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AccessLevelCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AccessLevel
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AccessLevel
            Dim _TB_AccessLevel As TB_AccessLevel

            For Each _TB_AccessLevel In Me.List
                if  Match(comparer,_TB_AccessLevel(propertyName) , searchValue) then Return _TB_AccessLevel
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AccessLevel As TB_AccessLevel) As System.Int32
            Return Me.List.Add(newTB_AccessLevel)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AccessLevel
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AccessLevel
            Dim _TB_AccessLevel As TB_AccessLevel
            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.ID, searchValue) Then Return _TB_AccessLevel
            Next

            Return Nothing
        End Function

        Public Function FindByUserID(ByVal searchValue As System.Guid) As TB_AccessLevel
            Return FindByUserID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUserID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AccessLevel
            Dim _TB_AccessLevel As TB_AccessLevel
            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.UserID, searchValue) Then Return _TB_AccessLevel
            Next

            Return Nothing
        End Function

        Public Function FindByMenuItemID(ByVal searchValue As System.Guid) As TB_AccessLevel
            Return FindByMenuItemID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMenuItemID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AccessLevel
            Dim _TB_AccessLevel As TB_AccessLevel
            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.MenuItemID, searchValue) Then Return _TB_AccessLevel
            Next

            Return Nothing
        End Function

        Public Function FindByAccessble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AccessLevel
            Return FindByAccessble(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAccessble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AccessLevel
            Dim _TB_AccessLevel As TB_AccessLevel
            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.Accessble, searchValue) Then Return _TB_AccessLevel
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByAccessble(ByVal searchValue As String) As TB_AccessLevel
            Return FindByAccessble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAccessble(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AccessLevel
            Return FindByAccessble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AccessLevelCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AccessLevelCollection
            Dim retCollection = New TB_AccessLevelCollection()
            Dim _TB_AccessLevel As TB_AccessLevel

            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.ID, searchValue) Then
                    retCollection.Add(_TB_AccessLevel)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUserID(ByVal searchValue As System.Guid) As TB_AccessLevelCollection
            Return FilterByUserID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUserID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AccessLevelCollection
            Dim retCollection = New TB_AccessLevelCollection()
            Dim _TB_AccessLevel As TB_AccessLevel

            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.UserID, searchValue) Then
                    retCollection.Add(_TB_AccessLevel)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMenuItemID(ByVal searchValue As System.Guid) As TB_AccessLevelCollection
            Return FilterByMenuItemID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMenuItemID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AccessLevelCollection
            Dim retCollection = New TB_AccessLevelCollection()
            Dim _TB_AccessLevel As TB_AccessLevel

            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.MenuItemID, searchValue) Then
                    retCollection.Add(_TB_AccessLevel)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAccessble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AccessLevelCollection
            Return FilterByAccessble(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAccessble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AccessLevelCollection
            Dim retCollection = New TB_AccessLevelCollection()
            Dim _TB_AccessLevel As TB_AccessLevel

            For Each _TB_AccessLevel In Me.List
                If Match(comparer, _TB_AccessLevel.Accessble, searchValue) Then
                    retCollection.Add(_TB_AccessLevel)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByAccessble(ByVal searchValue As String) As TB_AccessLevelCollection
            Return FilterByAccessble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAccessble(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AccessLevelCollection
            Return FilterByAccessble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AccessLevelCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUserID(ByVal sortDirection As SortDirection) As TB_AccessLevelCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UserID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMenuItemID(ByVal sortDirection As SortDirection) As TB_AccessLevelCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MenuItemID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAccessble(ByVal sortDirection As SortDirection) As TB_AccessLevelCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Accessble"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Account))>public MustInherit class TB_AccountCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Account))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Account
            Get
                return CType(Me.List(index),TB_Account)
            End Get
            Set(ByVal Value As TB_Account)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AccountCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account(propertyName), searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AccountCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Account
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                if  Match(comparer,_TB_Account(propertyName) , searchValue) then Return _TB_Account
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Account As TB_Account) As System.Int32
            Return Me.List.Add(newTB_Account)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Account
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.ID, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_Account
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Line, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByChargeCode(ByVal searchValue As System.String) As TB_Account
            Return FindByChargeCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargeCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.ChargeCode, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByLevel1(ByVal searchValue As System.String) As TB_Account
            Return FindByLevel1(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLevel1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level1, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByLevel2(ByVal searchValue As System.String) As TB_Account
            Return FindByLevel2(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLevel2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level2, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByLevel3(ByVal searchValue As System.String) As TB_Account
            Return FindByLevel3(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLevel3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level3, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_Account
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Description, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByPort(ByVal searchValue As System.String) As TB_Account
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Port, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FindByLevel4(ByVal searchValue As System.String) As TB_Account
            Return FindByLevel4(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLevel4(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Account
            Dim _TB_Account As TB_Account
            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level4, searchValue) Then Return _TB_Account
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AccountCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.ID, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Line, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargeCode(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByChargeCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargeCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.ChargeCode, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLevel1(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByLevel1(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLevel1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level1, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLevel2(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByLevel2(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLevel2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level2, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLevel3(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByLevel3(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLevel3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level3, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Description, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Port, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLevel4(ByVal searchValue As System.String) As TB_AccountCollection
            Return FilterByLevel4(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLevel4(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AccountCollection
            Dim retCollection = New TB_AccountCollection()
            Dim _TB_Account As TB_Account

            For Each _TB_Account In Me.List
                If Match(comparer, _TB_Account.Level4, searchValue) Then
                    retCollection.Add(_TB_Account)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargeCode(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargeCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLevel1(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Level1"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLevel2(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Level2"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLevel3(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Level3"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLevel4(ByVal sortDirection As SortDirection) As TB_AccountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Level4"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Agents))>public MustInherit class TB_AgentsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Agents))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Agents
            Get
                return CType(Me.List(index),TB_Agents)
            End Get
            Set(ByVal Value As TB_Agents)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AgentsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents(propertyName), searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AgentsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Agents
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                if  Match(comparer,_TB_Agents(propertyName) , searchValue) then Return _TB_Agents
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Agents As TB_Agents) As System.Int32
            Return Me.List.Add(newTB_Agents)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Agents
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.ID, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_Agents
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Line, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByPort(ByVal searchValue As System.String) As TB_Agents
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Port, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByAgentName(ByVal searchValue As System.String) As TB_Agents
            Return FindByAgentName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAgentName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.AgentName, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByAddress(ByVal searchValue As System.String) As TB_Agents
            Return FindByAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Address, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByTel(ByVal searchValue As System.String) As TB_Agents
            Return FindByTel(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Tel, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByFax(ByVal searchValue As System.String) As TB_Agents
            Return FindByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Fax, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByCode(ByVal searchValue As System.String) As TB_Agents
            Return FindByCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Code, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FindByDetentionClause(ByVal searchValue As System.String) As TB_Agents
            Return FindByDetentionClause(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetentionClause(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Agents
            Dim _TB_Agents As TB_Agents
            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.DetentionClause, searchValue) Then Return _TB_Agents
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AgentsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.ID, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Line, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Port, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAgentName(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByAgentName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAgentName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.AgentName, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAddress(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Address, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTel(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByTel(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Tel, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFax(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Fax, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCode(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.Code, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDetentionClause(ByVal searchValue As System.String) As TB_AgentsCollection
            Return FilterByDetentionClause(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetentionClause(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AgentsCollection
            Dim retCollection = New TB_AgentsCollection()
            Dim _TB_Agents As TB_Agents

            For Each _TB_Agents In Me.List
                If Match(comparer, _TB_Agents.DetentionClause, searchValue) Then
                    retCollection.Add(_TB_Agents)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAgentName(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("AgentName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAddress(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Address"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTel(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Tel"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFax(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Fax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCode(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Code"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetentionClause(ByVal sortDirection As SortDirection) As TB_AgentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DetentionClause"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTAdditionalDocs))>public MustInherit class TB_AUTAdditionalDocsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTAdditionalDocs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTAdditionalDocs
            Get
                return CType(Me.List(index),TB_AUTAdditionalDocs)
            End Get
            Set(ByVal Value As TB_AUTAdditionalDocs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTAdditionalDocsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTAdditionalDocsCollection
            Dim retCollection = New TB_AUTAdditionalDocsCollection()
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs

            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTAdditionalDocs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTAdditionalDocsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTAdditionalDocsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTAdditionalDocs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTAdditionalDocs
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs

            For Each _TB_AUTAdditionalDocs In Me.List
                if  Match(comparer,_TB_AUTAdditionalDocs(propertyName) , searchValue) then Return _TB_AUTAdditionalDocs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTAdditionalDocs As TB_AUTAdditionalDocs) As System.Int32
            Return Me.List.Add(newTB_AUTAdditionalDocs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTAdditionalDocs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTAdditionalDocs
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs
            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.ID, searchValue) Then Return _TB_AUTAdditionalDocs
            Next

            Return Nothing
        End Function

        Public Function FindByJobCode(ByVal searchValue As System.String) As TB_AUTAdditionalDocs
            Return FindByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTAdditionalDocs
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs
            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.JobCode, searchValue) Then Return _TB_AUTAdditionalDocs
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_AUTAdditionalDocs
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_AUTAdditionalDocs
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs
            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.Seq, searchValue) Then Return _TB_AUTAdditionalDocs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlByte 
        Public Function FindBySeq(ByVal searchValue As String) As TB_AUTAdditionalDocs
            Return FindBySeq(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTAdditionalDocs
            Return FindBySeq(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByHtmlContent(ByVal searchValue As System.String) As TB_AUTAdditionalDocs
            Return FindByHtmlContent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByHtmlContent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTAdditionalDocs
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs
            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.HtmlContent, searchValue) Then Return _TB_AUTAdditionalDocs
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTAdditionalDocsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTAdditionalDocsCollection
            Dim retCollection = New TB_AUTAdditionalDocsCollection()
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs

            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.ID, searchValue) Then
                    retCollection.Add(_TB_AUTAdditionalDocs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobCode(ByVal searchValue As System.String) As TB_AUTAdditionalDocsCollection
            Return FilterByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTAdditionalDocsCollection
            Dim retCollection = New TB_AUTAdditionalDocsCollection()
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs

            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.JobCode, searchValue) Then
                    retCollection.Add(_TB_AUTAdditionalDocs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_AUTAdditionalDocsCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_AUTAdditionalDocsCollection
            Dim retCollection = New TB_AUTAdditionalDocsCollection()
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs

            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.Seq, searchValue) Then
                    retCollection.Add(_TB_AUTAdditionalDocs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlByte
        Public Function FilterBySeq(ByVal searchValue As String) As TB_AUTAdditionalDocsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTAdditionalDocsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function

        Public Function FilterByHtmlContent(ByVal searchValue As System.String) As TB_AUTAdditionalDocsCollection
            Return FilterByHtmlContent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByHtmlContent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTAdditionalDocsCollection
            Dim retCollection = New TB_AUTAdditionalDocsCollection()
            Dim _TB_AUTAdditionalDocs As TB_AUTAdditionalDocs

            For Each _TB_AUTAdditionalDocs In Me.List
                If Match(comparer, _TB_AUTAdditionalDocs.HtmlContent, searchValue) Then
                    retCollection.Add(_TB_AUTAdditionalDocs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTAdditionalDocsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobCode(ByVal sortDirection As SortDirection) As TB_AUTAdditionalDocsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_AUTAdditionalDocsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByHtmlContent(ByVal sortDirection As SortDirection) As TB_AUTAdditionalDocsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("HtmlContent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTDummy))>public MustInherit class TB_AUTDummyCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTDummy))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTDummy
            Get
                return CType(Me.List(index),TB_AUTDummy)
            End Get
            Set(ByVal Value As TB_AUTDummy)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTDummyCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTDummyCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTDummy
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                if  Match(comparer,_TB_AUTDummy(propertyName) , searchValue) then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTDummy As TB_AUTDummy) As System.Int32
            Return Me.List.Add(newTB_AUTDummy)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTDummy
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.ID, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByJobCode(ByVal searchValue As System.String) As TB_AUTDummy
            Return FindByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.JobCode, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByRequestBy(ByVal searchValue As System.String) As TB_AUTDummy
            Return FindByRequestBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRequestBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.RequestBy, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_AUTDummy
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Remarks, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByResult(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_AUTDummy
            Return FindByResult(searchValue, CompareType.Exact)
        End Function


        Public Function FindByResult(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Result, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt32 
        Public Function FindByResult(ByVal searchValue As String) As TB_AUTDummy
            Return FindByResult(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByResult(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTDummy
            Return FindByResult(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByErrMsg(ByVal searchValue As System.String) As TB_AUTDummy
            Return FindByErrMsg(searchValue, CompareType.Exact)
        End Function


        Public Function FindByErrMsg(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.ErrMsg, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByVoyageID(ByVal searchValue As System.Guid) As TB_AUTDummy
            Return FindByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.VoyageID, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByPort(ByVal searchValue As System.String) As TB_AUTDummy
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Port, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByPriority(ByVal searchValue As System.String) As TB_AUTDummy
            Return FindByPriority(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPriority(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Priority, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByIsResend(ByVal searchValue As System.String) As TB_AUTDummy
            Return FindByIsResend(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsResend(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.IsResend, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FindByDateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTDummy
            Return FindByDateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.DateTime, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByDateTime(ByVal searchValue As String) As TB_AUTDummy
            Return FindByDateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTDummy
            Return FindByDateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLogID(ByVal searchValue As System.Guid) As TB_AUTDummy
            Return FindByLogID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLogID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummy
            Dim _TB_AUTDummy As TB_AUTDummy
            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.LogID, searchValue) Then Return _TB_AUTDummy
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTDummyCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.ID, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobCode(ByVal searchValue As System.String) As TB_AUTDummyCollection
            Return FilterByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.JobCode, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRequestBy(ByVal searchValue As System.String) As TB_AUTDummyCollection
            Return FilterByRequestBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRequestBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.RequestBy, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_AUTDummyCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Remarks, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByResult(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_AUTDummyCollection
            Return FilterByResult(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByResult(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Result, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt32
        Public Function FilterByResult(ByVal searchValue As String) As TB_AUTDummyCollection
            Return FilterByResult(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByResult(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Return FilterByResult(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function

        Public Function FilterByErrMsg(ByVal searchValue As System.String) As TB_AUTDummyCollection
            Return FilterByErrMsg(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByErrMsg(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.ErrMsg, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVoyageID(ByVal searchValue As System.Guid) As TB_AUTDummyCollection
            Return FilterByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.VoyageID, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_AUTDummyCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Port, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPriority(ByVal searchValue As System.String) As TB_AUTDummyCollection
            Return FilterByPriority(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPriority(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.Priority, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsResend(ByVal searchValue As System.String) As TB_AUTDummyCollection
            Return FilterByIsResend(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsResend(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.IsResend, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTDummyCollection
            Return FilterByDateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.DateTime, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByDateTime(ByVal searchValue As String) As TB_AUTDummyCollection
            Return FilterByDateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Return FilterByDateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLogID(ByVal searchValue As System.Guid) As TB_AUTDummyCollection
            Return FilterByLogID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLogID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummyCollection
            Dim retCollection = New TB_AUTDummyCollection()
            Dim _TB_AUTDummy As TB_AUTDummy

            For Each _TB_AUTDummy In Me.List
                If Match(comparer, _TB_AUTDummy.LogID, searchValue) Then
                    retCollection.Add(_TB_AUTDummy)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobCode(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRequestBy(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RequestBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByResult(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Result"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByErrMsg(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ErrMsg"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVoyageID(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPriority(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Priority"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsResend(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsResend"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDateTime(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DateTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLogID(ByVal sortDirection As SortDirection) As TB_AUTDummyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LogID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTDummyLog))>public MustInherit class TB_AUTDummyLogCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTDummyLog))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTDummyLog
            Get
                return CType(Me.List(index),TB_AUTDummyLog)
            End Get
            Set(ByVal Value As TB_AUTDummyLog)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTDummyLogCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTDummyLogCollection
            Dim retCollection = New TB_AUTDummyLogCollection()
            Dim _TB_AUTDummyLog As TB_AUTDummyLog

            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTDummyLog)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTDummyLogCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTDummyLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTDummyLog
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTDummyLog
            Dim _TB_AUTDummyLog As TB_AUTDummyLog

            For Each _TB_AUTDummyLog In Me.List
                if  Match(comparer,_TB_AUTDummyLog(propertyName) , searchValue) then Return _TB_AUTDummyLog
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTDummyLog As TB_AUTDummyLog) As System.Int32
            Return Me.List.Add(newTB_AUTDummyLog)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTDummyLog
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummyLog
            Dim _TB_AUTDummyLog As TB_AUTDummyLog
            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.ID, searchValue) Then Return _TB_AUTDummyLog
            Next

            Return Nothing
        End Function

        Public Function FindByBlNo(ByVal searchValue As System.String) As TB_AUTDummyLog
            Return FindByBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyLog
            Dim _TB_AUTDummyLog As TB_AUTDummyLog
            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.BlNo, searchValue) Then Return _TB_AUTDummyLog
            Next

            Return Nothing
        End Function

        Public Function FindByJobCode(ByVal searchValue As System.String) As TB_AUTDummyLog
            Return FindByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyLog
            Dim _TB_AUTDummyLog As TB_AUTDummyLog
            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.JobCode, searchValue) Then Return _TB_AUTDummyLog
            Next

            Return Nothing
        End Function

        Public Function FindByPropertyError(ByVal searchValue As System.String) As TB_AUTDummyLog
            Return FindByPropertyError(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPropertyError(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyLog
            Dim _TB_AUTDummyLog As TB_AUTDummyLog
            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.PropertyError, searchValue) Then Return _TB_AUTDummyLog
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTDummyLogCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTDummyLogCollection
            Dim retCollection = New TB_AUTDummyLogCollection()
            Dim _TB_AUTDummyLog As TB_AUTDummyLog

            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.ID, searchValue) Then
                    retCollection.Add(_TB_AUTDummyLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBlNo(ByVal searchValue As System.String) As TB_AUTDummyLogCollection
            Return FilterByBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyLogCollection
            Dim retCollection = New TB_AUTDummyLogCollection()
            Dim _TB_AUTDummyLog As TB_AUTDummyLog

            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.BlNo, searchValue) Then
                    retCollection.Add(_TB_AUTDummyLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobCode(ByVal searchValue As System.String) As TB_AUTDummyLogCollection
            Return FilterByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyLogCollection
            Dim retCollection = New TB_AUTDummyLogCollection()
            Dim _TB_AUTDummyLog As TB_AUTDummyLog

            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.JobCode, searchValue) Then
                    retCollection.Add(_TB_AUTDummyLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPropertyError(ByVal searchValue As System.String) As TB_AUTDummyLogCollection
            Return FilterByPropertyError(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPropertyError(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTDummyLogCollection
            Dim retCollection = New TB_AUTDummyLogCollection()
            Dim _TB_AUTDummyLog As TB_AUTDummyLog

            For Each _TB_AUTDummyLog In Me.List
                If Match(comparer, _TB_AUTDummyLog.PropertyError, searchValue) Then
                    retCollection.Add(_TB_AUTDummyLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTDummyLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBlNo(ByVal sortDirection As SortDirection) As TB_AUTDummyLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BlNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobCode(ByVal sortDirection As SortDirection) As TB_AUTDummyLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPropertyError(ByVal sortDirection As SortDirection) As TB_AUTDummyLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PropertyError"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTJobLogs))>public MustInherit class TB_AUTJobLogsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTJobLogs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTJobLogs
            Get
                return CType(Me.List(index),TB_AUTJobLogs)
            End Get
            Set(ByVal Value As TB_AUTJobLogs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTJobLogsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTJobLogsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTJobLogs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                if  Match(comparer,_TB_AUTJobLogs(propertyName) , searchValue) then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTJobLogs As TB_AUTJobLogs) As System.Int32
            Return Me.List.Add(newTB_AUTJobLogs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTJobLogs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.ID, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByJobCode(ByVal searchValue As System.String) As TB_AUTJobLogs
            Return FindByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.JobCode, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByRequestBy(ByVal searchValue As System.String) As TB_AUTJobLogs
            Return FindByRequestBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRequestBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.RequestBy, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByCreateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogs
            Return FindByCreateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCreateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CreateTime, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByCreateTime(ByVal searchValue As String) As TB_AUTJobLogs
            Return FindByCreateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCreateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Return FindByCreateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFinishedTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogs
            Return FindByFinishedTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFinishedTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.FinishedTime, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByFinishedTime(ByVal searchValue As String) As TB_AUTJobLogs
            Return FindByFinishedTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFinishedTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Return FindByFinishedTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCancelJob(ByVal searchValue As System.String) As TB_AUTJobLogs
            Return FindByCancelJob(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCancelJob(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CancelJob, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_AUTJobLogs
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.Remarks, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByPort(ByVal searchValue As System.String) As TB_AUTJobLogs
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.Port, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByVoyageID(ByVal searchValue As System.Guid) As TB_AUTJobLogs
            Return FindByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.VoyageID, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByPriority(ByVal searchValue As System.String) As TB_AUTJobLogs
            Return FindByPriority(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPriority(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.Priority, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByCancelBy(ByVal searchValue As System.String) As TB_AUTJobLogs
            Return FindByCancelBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCancelBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CancelBy, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

        Public Function FindByCancelTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogs
            Return FindByCancelTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCancelTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogs
            Dim _TB_AUTJobLogs As TB_AUTJobLogs
            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CancelTime, searchValue) Then Return _TB_AUTJobLogs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByCancelTime(ByVal searchValue As String) As TB_AUTJobLogs
            Return FindByCancelTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCancelTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogs
            Return FindByCancelTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTJobLogsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.ID, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobCode(ByVal searchValue As System.String) As TB_AUTJobLogsCollection
            Return FilterByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.JobCode, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRequestBy(ByVal searchValue As System.String) As TB_AUTJobLogsCollection
            Return FilterByRequestBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRequestBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.RequestBy, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCreateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogsCollection
            Return FilterByCreateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCreateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CreateTime, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByCreateTime(ByVal searchValue As String) As TB_AUTJobLogsCollection
            Return FilterByCreateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCreateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Return FilterByCreateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFinishedTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogsCollection
            Return FilterByFinishedTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFinishedTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.FinishedTime, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByFinishedTime(ByVal searchValue As String) As TB_AUTJobLogsCollection
            Return FilterByFinishedTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFinishedTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Return FilterByFinishedTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCancelJob(ByVal searchValue As System.String) As TB_AUTJobLogsCollection
            Return FilterByCancelJob(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCancelJob(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CancelJob, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_AUTJobLogsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.Remarks, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_AUTJobLogsCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.Port, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVoyageID(ByVal searchValue As System.Guid) As TB_AUTJobLogsCollection
            Return FilterByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.VoyageID, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPriority(ByVal searchValue As System.String) As TB_AUTJobLogsCollection
            Return FilterByPriority(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPriority(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.Priority, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCancelBy(ByVal searchValue As System.String) As TB_AUTJobLogsCollection
            Return FilterByCancelBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCancelBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CancelBy, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCancelTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogsCollection
            Return FilterByCancelTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCancelTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Dim retCollection = New TB_AUTJobLogsCollection()
            Dim _TB_AUTJobLogs As TB_AUTJobLogs

            For Each _TB_AUTJobLogs In Me.List
                If Match(comparer, _TB_AUTJobLogs.CancelTime, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByCancelTime(ByVal searchValue As String) As TB_AUTJobLogsCollection
            Return FilterByCancelTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCancelTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogsCollection
            Return FilterByCancelTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobCode(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRequestBy(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RequestBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCreateTime(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CreateTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFinishedTime(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FinishedTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCancelJob(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CancelJob"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVoyageID(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPriority(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Priority"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCancelBy(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CancelBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCancelTime(ByVal sortDirection As SortDirection) As TB_AUTJobLogsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CancelTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTJobLogsDetail))>public MustInherit class TB_AUTJobLogsDetailCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTJobLogsDetail))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTJobLogsDetail
            Get
                return CType(Me.List(index),TB_AUTJobLogsDetail)
            End Get
            Set(ByVal Value As TB_AUTJobLogsDetail)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTJobLogsDetailCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTJobLogsDetailCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTJobLogsDetail
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                if  Match(comparer,_TB_AUTJobLogsDetail(propertyName) , searchValue) then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTJobLogsDetail As TB_AUTJobLogsDetail) As System.Int32
            Return Me.List.Add(newTB_AUTJobLogsDetail)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTJobLogsDetail
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.ID, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByJobID(ByVal searchValue As System.Guid) As TB_AUTJobLogsDetail
            Return FindByJobID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.JobID, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentID(ByVal searchValue As System.Guid) As TB_AUTJobLogsDetail
            Return FindByDocumentID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.DocumentID, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByDocument(ByVal searchValue As System.String) As TB_AUTJobLogsDetail
            Return FindByDocument(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocument(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.Document, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentStatus(ByVal searchValue As System.String) As TB_AUTJobLogsDetail
            Return FindByDocumentStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.DocumentStatus, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogsDetail
            Return FindByGenerateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.GenerateTime, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByGenerateTime(ByVal searchValue As String) As TB_AUTJobLogsDetail
            Return FindByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGenerateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Return FindByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogsDetail
            Return FindBySentTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.SentTime, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindBySentTime(ByVal searchValue As String) As TB_AUTJobLogsDetail
            Return FindBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySentTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Return FindBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByResult(ByVal searchValue As System.String) As TB_AUTJobLogsDetail
            Return FindByResult(searchValue, CompareType.Exact)
        End Function


        Public Function FindByResult(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.Result, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

        Public Function FindBysKey(ByVal searchValue As System.String) As TB_AUTJobLogsDetail
            Return FindBysKey(searchValue, CompareType.Exact)
        End Function


        Public Function FindBysKey(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetail
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail
            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.sKey, searchValue) Then Return _TB_AUTJobLogsDetail
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTJobLogsDetailCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.ID, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobID(ByVal searchValue As System.Guid) As TB_AUTJobLogsDetailCollection
            Return FilterByJobID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.JobID, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentID(ByVal searchValue As System.Guid) As TB_AUTJobLogsDetailCollection
            Return FilterByDocumentID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.DocumentID, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocument(ByVal searchValue As System.String) As TB_AUTJobLogsDetailCollection
            Return FilterByDocument(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocument(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.Document, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentStatus(ByVal searchValue As System.String) As TB_AUTJobLogsDetailCollection
            Return FilterByDocumentStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.DocumentStatus, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogsDetailCollection
            Return FilterByGenerateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.GenerateTime, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByGenerateTime(ByVal searchValue As String) As TB_AUTJobLogsDetailCollection
            Return FilterByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGenerateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Return FilterByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTJobLogsDetailCollection
            Return FilterBySentTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.SentTime, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterBySentTime(ByVal searchValue As String) As TB_AUTJobLogsDetailCollection
            Return FilterBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySentTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Return FilterBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByResult(ByVal searchValue As System.String) As TB_AUTJobLogsDetailCollection
            Return FilterByResult(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByResult(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.Result, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBysKey(ByVal searchValue As System.String) As TB_AUTJobLogsDetailCollection
            Return FilterBysKey(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBysKey(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobLogsDetailCollection
            Dim retCollection = New TB_AUTJobLogsDetailCollection()
            Dim _TB_AUTJobLogsDetail As TB_AUTJobLogsDetail

            For Each _TB_AUTJobLogsDetail In Me.List
                If Match(comparer, _TB_AUTJobLogsDetail.sKey, searchValue) Then
                    retCollection.Add(_TB_AUTJobLogsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobID(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentID(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocument(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Document"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentStatus(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGenerateTime(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GenerateTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySentTime(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SentTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByResult(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Result"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBysKey(ByVal sortDirection As SortDirection) As TB_AUTJobLogsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("sKey"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTJobs))>public MustInherit class TB_AUTJobsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTJobs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTJobs
            Get
                return CType(Me.List(index),TB_AUTJobs)
            End Get
            Set(ByVal Value As TB_AUTJobs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTJobsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTJobsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTJobs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                if  Match(comparer,_TB_AUTJobs(propertyName) , searchValue) then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTJobs As TB_AUTJobs) As System.Int32
            Return Me.List.Add(newTB_AUTJobs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTJobs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs
            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.ID, searchValue) Then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function

        Public Function FindByJobCode(ByVal searchValue As System.String) As TB_AUTJobs
            Return FindByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs
            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.JobCode, searchValue) Then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function

        Public Function FindByJobName(ByVal searchValue As System.String) As TB_AUTJobs
            Return FindByJobName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs
            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.JobName, searchValue) Then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function

        Public Function FindByRecipiantAsTo(ByVal searchValue As System.String) As TB_AUTJobs
            Return FindByRecipiantAsTo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRecipiantAsTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs
            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.RecipiantAsTo, searchValue) Then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function

        Public Function FindByRecipiantAsCC(ByVal searchValue As System.String) As TB_AUTJobs
            Return FindByRecipiantAsCC(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRecipiantAsCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs
            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.RecipiantAsCC, searchValue) Then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function

        Public Function FindByHTMLContent(ByVal searchValue As System.String) As TB_AUTJobs
            Return FindByHTMLContent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByHTMLContent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs
            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.HTMLContent, searchValue) Then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function

        Public Function FindByPIC(ByVal searchValue As System.String) As TB_AUTJobs
            Return FindByPIC(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPIC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobs
            Dim _TB_AUTJobs As TB_AUTJobs
            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.PIC, searchValue) Then Return _TB_AUTJobs
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTJobsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.ID, searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobCode(ByVal searchValue As System.String) As TB_AUTJobsCollection
            Return FilterByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.JobCode, searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobName(ByVal searchValue As System.String) As TB_AUTJobsCollection
            Return FilterByJobName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.JobName, searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRecipiantAsTo(ByVal searchValue As System.String) As TB_AUTJobsCollection
            Return FilterByRecipiantAsTo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRecipiantAsTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.RecipiantAsTo, searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRecipiantAsCC(ByVal searchValue As System.String) As TB_AUTJobsCollection
            Return FilterByRecipiantAsCC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRecipiantAsCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.RecipiantAsCC, searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByHTMLContent(ByVal searchValue As System.String) As TB_AUTJobsCollection
            Return FilterByHTMLContent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByHTMLContent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.HTMLContent, searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPIC(ByVal searchValue As System.String) As TB_AUTJobsCollection
            Return FilterByPIC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPIC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTJobsCollection
            Dim retCollection = New TB_AUTJobsCollection()
            Dim _TB_AUTJobs As TB_AUTJobs

            For Each _TB_AUTJobs In Me.List
                If Match(comparer, _TB_AUTJobs.PIC, searchValue) Then
                    retCollection.Add(_TB_AUTJobs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobCode(ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobName(ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRecipiantAsTo(ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RecipiantAsTo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRecipiantAsCC(ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RecipiantAsCC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByHTMLContent(ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("HTMLContent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPIC(ByVal sortDirection As SortDirection) As TB_AUTJobsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PIC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_autoLog))>public MustInherit class TB_autoLogCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_autoLog))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_autoLog
            Get
                return CType(Me.List(index),TB_autoLog)
            End Get
            Set(ByVal Value As TB_autoLog)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_autoLogCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog(propertyName), searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_autoLogCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_autoLog
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                if  Match(comparer,_TB_autoLog(propertyName) , searchValue) then Return _TB_autoLog
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_autoLog As TB_autoLog) As System.Int32
            Return Me.List.Add(newTB_autoLog)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_autoLog
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.ID, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_autoLog
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.BLID, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindByFaxNo(ByVal searchValue As System.String) As TB_autoLog
            Return FindByFaxNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFaxNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.FaxNo, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentType(ByVal searchValue As System.String) As TB_autoLog
            Return FindByDocumentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.DocumentType, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentStatus(ByVal searchValue As System.String) As TB_autoLog
            Return FindByDocumentStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.DocumentStatus, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindBySubject(ByVal searchValue As System.String) As TB_autoLog
            Return FindBySubject(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySubject(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.Subject, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_autoLog
            Return FindByGenerateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.GenerateTime, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByGenerateTime(ByVal searchValue As String) As TB_autoLog
            Return FindByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGenerateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_autoLog
            Return FindByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_autoLog
            Return FindBySentTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.SentTime, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindBySentTime(ByVal searchValue As String) As TB_autoLog
            Return FindBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySentTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_autoLog
            Return FindBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFaxLog(ByVal searchValue As System.String) As TB_autoLog
            Return FindByFaxLog(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFaxLog(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.FaxLog, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindByIsReportedGenerate(ByVal searchValue As System.String) As TB_autoLog
            Return FindByIsReportedGenerate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsReportedGenerate(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.IsReportedGenerate, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FindByIsreportedFailed(ByVal searchValue As System.String) As TB_autoLog
            Return FindByIsreportedFailed(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsreportedFailed(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLog
            Dim _TB_autoLog As TB_autoLog
            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.IsreportedFailed, searchValue) Then Return _TB_autoLog
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_autoLogCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.ID, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_autoLogCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.BLID, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFaxNo(ByVal searchValue As System.String) As TB_autoLogCollection
            Return FilterByFaxNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFaxNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.FaxNo, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentType(ByVal searchValue As System.String) As TB_autoLogCollection
            Return FilterByDocumentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.DocumentType, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentStatus(ByVal searchValue As System.String) As TB_autoLogCollection
            Return FilterByDocumentStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.DocumentStatus, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySubject(ByVal searchValue As System.String) As TB_autoLogCollection
            Return FilterBySubject(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySubject(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.Subject, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_autoLogCollection
            Return FilterByGenerateTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGenerateTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.GenerateTime, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByGenerateTime(ByVal searchValue As String) As TB_autoLogCollection
            Return FilterByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGenerateTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_autoLogCollection
            Return FilterByGenerateTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_autoLogCollection
            Return FilterBySentTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySentTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.SentTime, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterBySentTime(ByVal searchValue As String) As TB_autoLogCollection
            Return FilterBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySentTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_autoLogCollection
            Return FilterBySentTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFaxLog(ByVal searchValue As System.String) As TB_autoLogCollection
            Return FilterByFaxLog(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFaxLog(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.FaxLog, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsReportedGenerate(ByVal searchValue As System.String) As TB_autoLogCollection
            Return FilterByIsReportedGenerate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsReportedGenerate(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.IsReportedGenerate, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsreportedFailed(ByVal searchValue As System.String) As TB_autoLogCollection
            Return FilterByIsreportedFailed(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsreportedFailed(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_autoLogCollection
            Dim retCollection = New TB_autoLogCollection()
            Dim _TB_autoLog As TB_autoLog

            For Each _TB_autoLog In Me.List
                If Match(comparer, _TB_autoLog.IsreportedFailed, searchValue) Then
                    retCollection.Add(_TB_autoLog)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFaxNo(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FaxNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentType(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentStatus(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySubject(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Subject"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGenerateTime(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GenerateTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySentTime(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SentTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFaxLog(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FaxLog"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsReportedGenerate(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsReportedGenerate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsreportedFailed(ByVal sortDirection As SortDirection) As TB_autoLogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsreportedFailed"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTSchedule))>public MustInherit class TB_AUTScheduleCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTSchedule))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTSchedule
            Get
                return CType(Me.List(index),TB_AUTSchedule)
            End Get
            Set(ByVal Value As TB_AUTSchedule)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTScheduleCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTScheduleCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTSchedule
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                if  Match(comparer,_TB_AUTSchedule(propertyName) , searchValue) then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTSchedule As TB_AUTSchedule) As System.Int32
            Return Me.List.Add(newTB_AUTSchedule)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTSchedule
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.ID, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

        Public Function FindByJobCode(ByVal searchValue As System.String) As TB_AUTSchedule
            Return FindByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.JobCode, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

        Public Function FindBySaturday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTSchedule
            Return FindBySaturday(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySaturday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Saturday, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindBySaturday(ByVal searchValue As String) As TB_AUTSchedule
            Return FindBySaturday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySaturday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindBySaturday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySunday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTSchedule
            Return FindBySunday(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySunday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Sunday, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindBySunday(ByVal searchValue As String) As TB_AUTSchedule
            Return FindBySunday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySunday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindBySunday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMonday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTSchedule
            Return FindByMonday(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMonday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Monday, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByMonday(ByVal searchValue As String) As TB_AUTSchedule
            Return FindByMonday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMonday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindByMonday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTuesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTSchedule
            Return FindByTuesday(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTuesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Tuesday, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByTuesday(ByVal searchValue As String) As TB_AUTSchedule
            Return FindByTuesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTuesday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindByTuesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByWednesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTSchedule
            Return FindByWednesday(searchValue, CompareType.Exact)
        End Function


        Public Function FindByWednesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Wednesday, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByWednesday(ByVal searchValue As String) As TB_AUTSchedule
            Return FindByWednesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByWednesday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindByWednesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByThursday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTSchedule
            Return FindByThursday(searchValue, CompareType.Exact)
        End Function


        Public Function FindByThursday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Thursday, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByThursday(ByVal searchValue As String) As TB_AUTSchedule
            Return FindByThursday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByThursday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindByThursday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFriday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTSchedule
            Return FindByFriday(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFriday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Friday, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByFriday(ByVal searchValue As String) As TB_AUTSchedule
            Return FindByFriday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFriday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindByFriday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTSchedule
            Return FindByTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTSchedule
            Dim _TB_AUTSchedule As TB_AUTSchedule
            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Time, searchValue) Then Return _TB_AUTSchedule
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByTime(ByVal searchValue As String) As TB_AUTSchedule
            Return FindByTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTSchedule
            Return FindByTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTScheduleCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.ID, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobCode(ByVal searchValue As System.String) As TB_AUTScheduleCollection
            Return FilterByJobCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.JobCode, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySaturday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTScheduleCollection
            Return FilterBySaturday(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySaturday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Saturday, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterBySaturday(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterBySaturday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySaturday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterBySaturday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySunday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTScheduleCollection
            Return FilterBySunday(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySunday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Sunday, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterBySunday(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterBySunday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySunday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterBySunday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMonday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTScheduleCollection
            Return FilterByMonday(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMonday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Monday, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByMonday(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterByMonday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMonday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterByMonday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTuesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTScheduleCollection
            Return FilterByTuesday(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTuesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Tuesday, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByTuesday(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterByTuesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTuesday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterByTuesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByWednesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTScheduleCollection
            Return FilterByWednesday(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByWednesday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Wednesday, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByWednesday(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterByWednesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByWednesday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterByWednesday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByThursday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTScheduleCollection
            Return FilterByThursday(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByThursday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Thursday, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByThursday(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterByThursday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByThursday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterByThursday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFriday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_AUTScheduleCollection
            Return FilterByFriday(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFriday(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Friday, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByFriday(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterByFriday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFriday(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterByFriday(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_AUTScheduleCollection
            Return FilterByTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Dim retCollection = New TB_AUTScheduleCollection()
            Dim _TB_AUTSchedule As TB_AUTSchedule

            For Each _TB_AUTSchedule In Me.List
                If Match(comparer, _TB_AUTSchedule.Time, searchValue) Then
                    retCollection.Add(_TB_AUTSchedule)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByTime(ByVal searchValue As String) As TB_AUTScheduleCollection
            Return FilterByTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_AUTScheduleCollection
            Return FilterByTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobCode(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySaturday(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Saturday"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySunday(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Sunday"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMonday(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Monday"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTuesday(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Tuesday"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByWednesday(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Wednesday"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByThursday(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Thursday"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFriday(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Friday"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTime(ByVal sortDirection As SortDirection) As TB_AUTScheduleCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Time"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_AUTSettings))>public MustInherit class TB_AUTSettingsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_AUTSettings))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_AUTSettings
            Get
                return CType(Me.List(index),TB_AUTSettings)
            End Get
            Set(ByVal Value As TB_AUTSettings)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTSettingsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings(propertyName), searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_AUTSettingsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_AUTSettings
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                if  Match(comparer,_TB_AUTSettings(propertyName) , searchValue) then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_AUTSettings As TB_AUTSettings) As System.Int32
            Return Me.List.Add(newTB_AUTSettings)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_AUTSettings
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.ID, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByMailServer(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByMailServer(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailServer(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.MailServer, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByMailUserName(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByMailUserName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailUserName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.MailUserName, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByMailPassword(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByMailPassword(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailPassword(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.MailPassword, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByFAXServer(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByFAXServer(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFAXServer(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FAXServer, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByFaxUserName(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByFaxUserName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFaxUserName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FaxUserName, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByFaxPassword(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByFaxPassword(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFaxPassword(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FaxPassword, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByFaxServerMailBox(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByFaxServerMailBox(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFaxServerMailBox(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FaxServerMailBox, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindByAutomationProfile(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindByAutomationProfile(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAutomationProfile(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.AutomationProfile, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FindBySentDocFolder(ByVal searchValue As System.String) As TB_AUTSettings
            Return FindBySentDocFolder(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySentDocFolder(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettings
            Dim _TB_AUTSettings As TB_AUTSettings
            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.SentDocFolder, searchValue) Then Return _TB_AUTSettings
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_AUTSettingsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.ID, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMailServer(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByMailServer(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailServer(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.MailServer, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMailUserName(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByMailUserName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailUserName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.MailUserName, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMailPassword(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByMailPassword(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailPassword(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.MailPassword, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFAXServer(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByFAXServer(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFAXServer(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FAXServer, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFaxUserName(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByFaxUserName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFaxUserName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FaxUserName, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFaxPassword(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByFaxPassword(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFaxPassword(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FaxPassword, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFaxServerMailBox(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByFaxServerMailBox(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFaxServerMailBox(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.FaxServerMailBox, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAutomationProfile(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterByAutomationProfile(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAutomationProfile(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.AutomationProfile, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySentDocFolder(ByVal searchValue As System.String) As TB_AUTSettingsCollection
            Return FilterBySentDocFolder(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySentDocFolder(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_AUTSettingsCollection
            Dim retCollection = New TB_AUTSettingsCollection()
            Dim _TB_AUTSettings As TB_AUTSettings

            For Each _TB_AUTSettings In Me.List
                If Match(comparer, _TB_AUTSettings.SentDocFolder, searchValue) Then
                    retCollection.Add(_TB_AUTSettings)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailServer(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailServer"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailUserName(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailUserName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailPassword(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailPassword"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFAXServer(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FAXServer"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFaxUserName(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FaxUserName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFaxPassword(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FaxPassword"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFaxServerMailBox(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FaxServerMailBox"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAutomationProfile(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("AutomationProfile"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySentDocFolder(ByVal sortDirection As SortDirection) As TB_AUTSettingsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SentDocFolder"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Booking))>public MustInherit class TB_BookingCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Booking))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Booking
            Get
                return CType(Me.List(index),TB_Booking)
            End Get
            Set(ByVal Value As TB_Booking)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking(propertyName), searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_BookingCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Booking
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                if  Match(comparer,_TB_Booking(propertyName) , searchValue) then Return _TB_Booking
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Booking As TB_Booking) As System.Int32
            Return Me.List.Add(newTB_Booking)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Booking
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ID, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByBookingNo(ByVal searchValue As System.String) As TB_Booking
            Return FindByBookingNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.BookingNo, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByBookingDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Booking
            Return FindByBookingDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.BookingDate, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByBookingDate(ByVal searchValue As String) As TB_Booking
            Return FindByBookingDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByBookingDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByBookingDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLine(ByVal searchValue As System.String) As TB_Booking
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Line, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByClientID(ByVal searchValue As System.Guid) As TB_Booking
            Return FindByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ClientID, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByClientRepID(ByVal searchValue As System.Guid) As TB_Booking
            Return FindByClientRepID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClientRepID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ClientRepID, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Booking
            Return FindByValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FindByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Validity, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByValidity(ByVal searchValue As String) As TB_Booking
            Return FindByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPOL(ByVal searchValue As System.String) As TB_Booking
            Return FindByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POL, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPOLFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_Booking
            Return FindByPOLFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOLFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POLFreeDays, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByPOLFreeDays(ByVal searchValue As String) As TB_Booking
            Return FindByPOLFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPOLFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByPOLFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPOD(ByVal searchValue As System.String) As TB_Booking
            Return FindByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POD, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPODFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_Booking
            Return FindByPODFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPODFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PODFreeDays, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByPODFreeDays(ByVal searchValue As String) As TB_Booking
            Return FindByPODFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPODFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByPODFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPOT(ByVal searchValue As System.String) As TB_Booking
            Return FindByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POT, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByFPOD(ByVal searchValue As System.String) As TB_Booking
            Return FindByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.FPOD, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByGoods(ByVal searchValue As System.String) As TB_Booking
            Return FindByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Goods, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByDepot(ByVal searchValue As System.String) As TB_Booking
            Return FindByDepot(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDepot(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Depot, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPrincipalReference(ByVal searchValue As System.String) As TB_Booking
            Return FindByPrincipalReference(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPrincipalReference(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PrincipalReference, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPrincipalConfirm(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Booking
            Return FindByPrincipalConfirm(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPrincipalConfirm(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PrincipalConfirm, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByPrincipalConfirm(ByVal searchValue As String) As TB_Booking
            Return FindByPrincipalConfirm(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPrincipalConfirm(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByPrincipalConfirm(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySalesMan(ByVal searchValue As System.Guid) As TB_Booking
            Return FindBySalesMan(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySalesMan(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.SalesMan, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByStatus(ByVal searchValue As System.String) As TB_Booking
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Status, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByTerms(ByVal searchValue As System.String) As TB_Booking
            Return FindByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Terms, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_Booking
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Remarks, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_Booking
            Return FindByExchangeFrt(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ExchangeFrt, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByExchangeFrt(ByVal searchValue As String) As TB_Booking
            Return FindByExchangeFrt(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByExchangeFrt(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByExchangeFrt(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByExchangeTHC(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_Booking
            Return FindByExchangeTHC(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExchangeTHC(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ExchangeTHC, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByExchangeTHC(ByVal searchValue As String) As TB_Booking
            Return FindByExchangeTHC(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByExchangeTHC(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByExchangeTHC(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByInvoiceInIrr(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Booking
            Return FindByInvoiceInIrr(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceInIrr(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.InvoiceInIrr, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByInvoiceInIrr(ByVal searchValue As String) As TB_Booking
            Return FindByInvoiceInIrr(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByInvoiceInIrr(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByInvoiceInIrr(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPackage(ByVal searchValue As System.String) As TB_Booking
            Return FindByPackage(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackage(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Package, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByExceptedMtyPickup(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Booking
            Return FindByExceptedMtyPickup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExceptedMtyPickup(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ExceptedMtyPickup, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByExceptedMtyPickup(ByVal searchValue As String) As TB_Booking
            Return FindByExceptedMtyPickup(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByExceptedMtyPickup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByExceptedMtyPickup(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByBLToBeUsed(ByVal searchValue As System.String) As TB_Booking
            Return FindByBLToBeUsed(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLToBeUsed(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.BLToBeUsed, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindBySOC(ByVal searchValue As System.String) As TB_Booking
            Return FindBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.SOC, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByUNNO(ByVal searchValue As System.String) As TB_Booking
            Return FindByUNNO(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUNNO(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.UNNO, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByIMDGCode(ByVal searchValue As System.String) As TB_Booking
            Return FindByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.IMDGCode, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPakingGroup(ByVal searchValue As System.String) As TB_Booking
            Return FindByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPakingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PakingGroup, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_Booking
            Return FindByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PageNumber, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByPageNumber(ByVal searchValue As String) As TB_Booking
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Booking
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySwitchBLIn(ByVal searchValue As System.String) As TB_Booking
            Return FindBySwitchBLIn(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySwitchBLIn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.SwitchBLIn, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPackageType(ByVal searchValue As System.String) As TB_Booking
            Return FindByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PackageType, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FindByPayer(ByVal searchValue As System.String) As TB_Booking
            Return FindByPayer(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayer(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Booking
            Dim _TB_Booking As TB_Booking
            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Payer, searchValue) Then Return _TB_Booking
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_BookingCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ID, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingNo(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByBookingNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.BookingNo, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingCollection
            Return FilterByBookingDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.BookingDate, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByBookingDate(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByBookingDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByBookingDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByBookingDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Line, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByClientID(ByVal searchValue As System.Guid) As TB_BookingCollection
            Return FilterByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ClientID, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByClientRepID(ByVal searchValue As System.Guid) As TB_BookingCollection
            Return FilterByClientRepID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClientRepID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ClientRepID, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingCollection
            Return FilterByValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Validity, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByValidity(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPOL(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POL, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOLFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_BookingCollection
            Return FilterByPOLFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOLFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POLFreeDays, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByPOLFreeDays(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByPOLFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPOLFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByPOLFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPOD(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POD, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPODFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_BookingCollection
            Return FilterByPODFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPODFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PODFreeDays, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByPODFreeDays(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByPODFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPODFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByPODFreeDays(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPOT(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.POT, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFPOD(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.FPOD, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGoods(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Goods, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDepot(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByDepot(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDepot(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Depot, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPrincipalReference(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPrincipalReference(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPrincipalReference(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PrincipalReference, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPrincipalConfirm(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingCollection
            Return FilterByPrincipalConfirm(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPrincipalConfirm(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PrincipalConfirm, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByPrincipalConfirm(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByPrincipalConfirm(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPrincipalConfirm(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByPrincipalConfirm(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySalesMan(ByVal searchValue As System.Guid) As TB_BookingCollection
            Return FilterBySalesMan(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySalesMan(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.SalesMan, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Status, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTerms(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Terms, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Remarks, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_BookingCollection
            Return FilterByExchangeFrt(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ExchangeFrt, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByExchangeFrt(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByExchangeFrt(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByExchangeFrt(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByExchangeFrt(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByExchangeTHC(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_BookingCollection
            Return FilterByExchangeTHC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExchangeTHC(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ExchangeTHC, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByExchangeTHC(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByExchangeTHC(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByExchangeTHC(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByExchangeTHC(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByInvoiceInIrr(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_BookingCollection
            Return FilterByInvoiceInIrr(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceInIrr(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.InvoiceInIrr, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByInvoiceInIrr(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByInvoiceInIrr(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByInvoiceInIrr(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByInvoiceInIrr(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPackage(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPackage(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackage(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Package, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByExceptedMtyPickup(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingCollection
            Return FilterByExceptedMtyPickup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExceptedMtyPickup(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.ExceptedMtyPickup, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByExceptedMtyPickup(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByExceptedMtyPickup(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByExceptedMtyPickup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByExceptedMtyPickup(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByBLToBeUsed(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByBLToBeUsed(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLToBeUsed(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.BLToBeUsed, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySOC(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.SOC, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUNNO(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByUNNO(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUNNO(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.UNNO, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIMDGCode(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.IMDGCode, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPakingGroup(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPakingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PakingGroup, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_BookingCollection
            Return FilterByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PageNumber, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByPageNumber(ByVal searchValue As String) As TB_BookingCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySwitchBLIn(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterBySwitchBLIn(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySwitchBLIn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.SwitchBLIn, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPackageType(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.PackageType, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPayer(ByVal searchValue As System.String) As TB_BookingCollection
            Return FilterByPayer(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayer(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCollection
            Dim retCollection = New TB_BookingCollection()
            Dim _TB_Booking As TB_Booking

            For Each _TB_Booking In Me.List
                If Match(comparer, _TB_Booking.Payer, searchValue) Then
                    retCollection.Add(_TB_Booking)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingNo(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingDate(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClientID(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ClientID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClientRepID(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ClientRepID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByValidity(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Validity"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOL(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOLFreeDays(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POLFreeDays"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOD(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPODFreeDays(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PODFreeDays"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOT(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POT"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFPOD(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FPOD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGoods(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Goods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDepot(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Depot"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPrincipalReference(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PrincipalReference"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPrincipalConfirm(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PrincipalConfirm"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySalesMan(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SalesMan"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTerms(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Terms"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExchangeFrt(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExchangeFrt"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExchangeTHC(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExchangeTHC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceInIrr(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceInIrr"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackage(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Package"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExceptedMtyPickup(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExceptedMtyPickup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLToBeUsed(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLToBeUsed"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySOC(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SOC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUNNO(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UNNO"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIMDGCode(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IMDGCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPakingGroup(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PakingGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPageNumber(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PageNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySwitchBLIn(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SwitchBLIn"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackageType(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PackageType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayer(ByVal sortDirection As SortDirection) As TB_BookingCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Payer"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_BookingCns))>public MustInherit class TB_BookingCnsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_BookingCns))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_BookingCns
            Get
                return CType(Me.List(index),TB_BookingCns)
            End Get
            Set(ByVal Value As TB_BookingCns)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingCnsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingCnsCollection
            Dim retCollection = New TB_BookingCnsCollection()
            Dim _TB_BookingCns As TB_BookingCns

            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns(propertyName), searchValue) Then
                    retCollection.Add(_TB_BookingCns)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_BookingCnsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_BookingCnsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingCns
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingCns
            Dim _TB_BookingCns As TB_BookingCns

            For Each _TB_BookingCns In Me.List
                if  Match(comparer,_TB_BookingCns(propertyName) , searchValue) then Return _TB_BookingCns
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_BookingCns As TB_BookingCns) As System.Int32
            Return Me.List.Add(newTB_BookingCns)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_BookingCns
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCns
            Dim _TB_BookingCns As TB_BookingCns
            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.ID, searchValue) Then Return _TB_BookingCns
            Next

            Return Nothing
        End Function

        Public Function FindByPID(ByVal searchValue As System.Guid) As TB_BookingCns
            Return FindByPID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCns
            Dim _TB_BookingCns As TB_BookingCns
            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.PID, searchValue) Then Return _TB_BookingCns
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_BookingCns
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCns
            Dim _TB_BookingCns As TB_BookingCns
            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.CnType, searchValue) Then Return _TB_BookingCns
            Next

            Return Nothing
        End Function

        Public Function FindByCnSize(ByVal searchValue As System.String) As TB_BookingCns
            Return FindByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCns
            Dim _TB_BookingCns As TB_BookingCns
            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.CnSize, searchValue) Then Return _TB_BookingCns
            Next

            Return Nothing
        End Function

        Public Function FindByNoOfCns(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_BookingCns
            Return FindByNoOfCns(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOfCns(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_BookingCns
            Dim _TB_BookingCns As TB_BookingCns
            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.NoOfCns, searchValue) Then Return _TB_BookingCns
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByNoOfCns(ByVal searchValue As String) As TB_BookingCns
            Return FindByNoOfCns(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOfCns(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCns
            Return FindByNoOfCns(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_BookingCnsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCnsCollection
            Dim retCollection = New TB_BookingCnsCollection()
            Dim _TB_BookingCns As TB_BookingCns

            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.ID, searchValue) Then
                    retCollection.Add(_TB_BookingCns)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPID(ByVal searchValue As System.Guid) As TB_BookingCnsCollection
            Return FilterByPID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingCnsCollection
            Dim retCollection = New TB_BookingCnsCollection()
            Dim _TB_BookingCns As TB_BookingCns

            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.PID, searchValue) Then
                    retCollection.Add(_TB_BookingCns)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_BookingCnsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCnsCollection
            Dim retCollection = New TB_BookingCnsCollection()
            Dim _TB_BookingCns As TB_BookingCns

            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.CnType, searchValue) Then
                    retCollection.Add(_TB_BookingCns)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnSize(ByVal searchValue As System.String) As TB_BookingCnsCollection
            Return FilterByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingCnsCollection
            Dim retCollection = New TB_BookingCnsCollection()
            Dim _TB_BookingCns As TB_BookingCns

            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.CnSize, searchValue) Then
                    retCollection.Add(_TB_BookingCns)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOfCns(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_BookingCnsCollection
            Return FilterByNoOfCns(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOfCns(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_BookingCnsCollection
            Dim retCollection = New TB_BookingCnsCollection()
            Dim _TB_BookingCns As TB_BookingCns

            For Each _TB_BookingCns In Me.List
                If Match(comparer, _TB_BookingCns.NoOfCns, searchValue) Then
                    retCollection.Add(_TB_BookingCns)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByNoOfCns(ByVal searchValue As String) As TB_BookingCnsCollection
            Return FilterByNoOfCns(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOfCns(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingCnsCollection
            Return FilterByNoOfCns(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_BookingCnsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPID(ByVal sortDirection As SortDirection) As TB_BookingCnsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_BookingCnsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnSize(ByVal sortDirection As SortDirection) As TB_BookingCnsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOfCns(ByVal sortDirection As SortDirection) As TB_BookingCnsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOfCns"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_BookingDeposits))>public MustInherit class TB_BookingDepositsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_BookingDeposits))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_BookingDeposits
            Get
                return CType(Me.List(index),TB_BookingDeposits)
            End Get
            Set(ByVal Value As TB_BookingDeposits)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingDepositsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits(propertyName), searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_BookingDepositsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingDeposits
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                if  Match(comparer,_TB_BookingDeposits(propertyName) , searchValue) then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_BookingDeposits As TB_BookingDeposits) As System.Int32
            Return Me.List.Add(newTB_BookingDeposits)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_BookingDeposits
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ID, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

        Public Function FindByBookingID(ByVal searchValue As System.Guid) As TB_BookingDeposits
            Return FindByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.BookingID, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

        Public Function FindByChargesCodes(ByVal searchValue As System.String) As TB_BookingDeposits
            Return FindByChargesCodes(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCodes(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ChargesCodes, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_BookingDeposits
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.Remarks, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDeposits
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.Amount, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_BookingDeposits
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDeposits
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingDeposits
            Return FindByReturnBackDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ReturnBackDate, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByReturnBackDate(ByVal searchValue As String) As TB_BookingDeposits
            Return FindByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReturnBackDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDeposits
            Return FindByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_BookingDeposits
            Return FindByReturnBackAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ReturnBackAmount, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByReturnBackAmount(ByVal searchValue As String) As TB_BookingDeposits
            Return FindByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReturnBackAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDeposits
            Return FindByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReturnBackRef(ByVal searchValue As System.String) As TB_BookingDeposits
            Return FindByReturnBackRef(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReturnBackRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ReturnBackRef, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

        Public Function FindByPaidRef(ByVal searchValue As System.String) As TB_BookingDeposits
            Return FindByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDeposits
            Dim _TB_BookingDeposits As TB_BookingDeposits
            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.PaidRef, searchValue) Then Return _TB_BookingDeposits
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_BookingDepositsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ID, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingID(ByVal searchValue As System.Guid) As TB_BookingDepositsCollection
            Return FilterByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.BookingID, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesCodes(ByVal searchValue As System.String) As TB_BookingDepositsCollection
            Return FilterByChargesCodes(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCodes(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ChargesCodes, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_BookingDepositsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.Remarks, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDepositsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.Amount, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_BookingDepositsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingDepositsCollection
            Return FilterByReturnBackDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ReturnBackDate, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByReturnBackDate(ByVal searchValue As String) As TB_BookingDepositsCollection
            Return FilterByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReturnBackDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Return FilterByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_BookingDepositsCollection
            Return FilterByReturnBackAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ReturnBackAmount, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByReturnBackAmount(ByVal searchValue As String) As TB_BookingDepositsCollection
            Return FilterByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReturnBackAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Return FilterByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReturnBackRef(ByVal searchValue As System.String) As TB_BookingDepositsCollection
            Return FilterByReturnBackRef(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReturnBackRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.ReturnBackRef, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaidRef(ByVal searchValue As System.String) As TB_BookingDepositsCollection
            Return FilterByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDepositsCollection
            Dim retCollection = New TB_BookingDepositsCollection()
            Dim _TB_BookingDeposits As TB_BookingDeposits

            For Each _TB_BookingDeposits In Me.List
                If Match(comparer, _TB_BookingDeposits.PaidRef, searchValue) Then
                    retCollection.Add(_TB_BookingDeposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingID(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCodes(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCodes"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReturnBackDate(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReturnBackDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReturnBackAmount(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReturnBackAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReturnBackRef(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReturnBackRef"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaidRef(ByVal sortDirection As SortDirection) As TB_BookingDepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaidRef"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_BookingDetails))>public MustInherit class TB_BookingDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_BookingDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_BookingDetails
            Get
                return CType(Me.List(index),TB_BookingDetails)
            End Get
            Set(ByVal Value As TB_BookingDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_BookingDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                if  Match(comparer,_TB_BookingDetails(propertyName) , searchValue) then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_BookingDetails As TB_BookingDetails) As System.Int32
            Return Me.List.Add(newTB_BookingDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_BookingDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.ID, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindByBookingID(ByVal searchValue As System.Guid) As TB_BookingDetails
            Return FindByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.BookingID, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindByChargeItem(ByVal searchValue As System.String) As TB_BookingDetails
            Return FindByChargeItem(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargeItem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.ChargeItem, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCnSize(ByVal searchValue As System.String) As TB_BookingDetails
            Return FindByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.CnSize, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_BookingDetails
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.CnType, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindByQTShipper(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDetails
            Return FindByQTShipper(searchValue, CompareType.Exact)
        End Function


        Public Function FindByQTShipper(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.QTShipper, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByQTShipper(ByVal searchValue As String) As TB_BookingDetails
            Return FindByQTShipper(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByQTShipper(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetails
            Return FindByQTShipper(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByQTCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDetails
            Return FindByQTCarrier(searchValue, CompareType.Exact)
        End Function


        Public Function FindByQTCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.QTCarrier, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByQTCarrier(ByVal searchValue As String) As TB_BookingDetails
            Return FindByQTCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByQTCarrier(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetails
            Return FindByQTCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTotalCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_BookingDetails
            Return FindByTotalCntrs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTotalCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.TotalCntrs, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByTotalCntrs(ByVal searchValue As String) As TB_BookingDetails
            Return FindByTotalCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTotalCntrs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetails
            Return FindByTotalCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPayebleat(ByVal searchValue As System.String) As TB_BookingDetails
            Return FindByPayebleat(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayebleat(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.Payebleat, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindByBaseOn(ByVal searchValue As System.String) As TB_BookingDetails
            Return FindByBaseOn(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBaseOn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.BaseOn, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCurCode(ByVal searchValue As System.String) As TB_BookingDetails
            Return FindByCurCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.CurCode, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

        Public Function FindBySlotRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDetails
            Return FindBySlotRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySlotRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDetails
            Dim _TB_BookingDetails As TB_BookingDetails
            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.SlotRate, searchValue) Then Return _TB_BookingDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindBySlotRate(ByVal searchValue As String) As TB_BookingDetails
            Return FindBySlotRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySlotRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetails
            Return FindBySlotRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_BookingDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.ID, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingID(ByVal searchValue As System.Guid) As TB_BookingDetailsCollection
            Return FilterByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.BookingID, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargeItem(ByVal searchValue As System.String) As TB_BookingDetailsCollection
            Return FilterByChargeItem(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargeItem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.ChargeItem, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnSize(ByVal searchValue As System.String) As TB_BookingDetailsCollection
            Return FilterByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.CnSize, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_BookingDetailsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.CnType, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByQTShipper(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDetailsCollection
            Return FilterByQTShipper(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByQTShipper(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.QTShipper, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByQTShipper(ByVal searchValue As String) As TB_BookingDetailsCollection
            Return FilterByQTShipper(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByQTShipper(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Return FilterByQTShipper(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByQTCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDetailsCollection
            Return FilterByQTCarrier(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByQTCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.QTCarrier, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByQTCarrier(ByVal searchValue As String) As TB_BookingDetailsCollection
            Return FilterByQTCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByQTCarrier(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Return FilterByQTCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTotalCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_BookingDetailsCollection
            Return FilterByTotalCntrs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTotalCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.TotalCntrs, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByTotalCntrs(ByVal searchValue As String) As TB_BookingDetailsCollection
            Return FilterByTotalCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTotalCntrs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Return FilterByTotalCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPayebleat(ByVal searchValue As System.String) As TB_BookingDetailsCollection
            Return FilterByPayebleat(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayebleat(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.Payebleat, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBaseOn(ByVal searchValue As System.String) As TB_BookingDetailsCollection
            Return FilterByBaseOn(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBaseOn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.BaseOn, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurCode(ByVal searchValue As System.String) As TB_BookingDetailsCollection
            Return FilterByCurCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.CurCode, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySlotRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_BookingDetailsCollection
            Return FilterBySlotRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySlotRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Dim retCollection = New TB_BookingDetailsCollection()
            Dim _TB_BookingDetails As TB_BookingDetails

            For Each _TB_BookingDetails In Me.List
                If Match(comparer, _TB_BookingDetails.SlotRate, searchValue) Then
                    retCollection.Add(_TB_BookingDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterBySlotRate(ByVal searchValue As String) As TB_BookingDetailsCollection
            Return FilterBySlotRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySlotRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingDetailsCollection
            Return FilterBySlotRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingID(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargeItem(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargeItem"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnSize(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByQTShipper(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("QTShipper"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByQTCarrier(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("QTCarrier"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTotalCntrs(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TotalCntrs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayebleat(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Payebleat"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBaseOn(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BaseOn"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurCode(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CurCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySlotRate(ByVal sortDirection As SortDirection) As TB_BookingDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SlotRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_BookingReleasCntrs))>public MustInherit class TB_BookingReleasCntrsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_BookingReleasCntrs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_BookingReleasCntrs
            Get
                return CType(Me.List(index),TB_BookingReleasCntrs)
            End Get
            Set(ByVal Value As TB_BookingReleasCntrs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingReleasCntrsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingReleasCntrsCollection
            Dim retCollection = New TB_BookingReleasCntrsCollection()
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs

            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs(propertyName), searchValue) Then
                    retCollection.Add(_TB_BookingReleasCntrs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_BookingReleasCntrsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_BookingReleasCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingReleasCntrs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingReleasCntrs
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs

            For Each _TB_BookingReleasCntrs In Me.List
                if  Match(comparer,_TB_BookingReleasCntrs(propertyName) , searchValue) then Return _TB_BookingReleasCntrs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_BookingReleasCntrs As TB_BookingReleasCntrs) As System.Int32
            Return Me.List.Add(newTB_BookingReleasCntrs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_BookingReleasCntrs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingReleasCntrs
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs
            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.ID, searchValue) Then Return _TB_BookingReleasCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByReleaseID(ByVal searchValue As System.Guid) As TB_BookingReleasCntrs
            Return FindByReleaseID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReleaseID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingReleasCntrs
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs
            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.ReleaseID, searchValue) Then Return _TB_BookingReleasCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_BookingReleasCntrs
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingReleasCntrs
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs
            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.CnType, searchValue) Then Return _TB_BookingReleasCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCnSize(ByVal searchValue As System.String) As TB_BookingReleasCntrs
            Return FindByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingReleasCntrs
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs
            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.CnSize, searchValue) Then Return _TB_BookingReleasCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByNoOfCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_BookingReleasCntrs
            Return FindByNoOfCntrs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOfCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_BookingReleasCntrs
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs
            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.NoOfCntrs, searchValue) Then Return _TB_BookingReleasCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByNoOfCntrs(ByVal searchValue As String) As TB_BookingReleasCntrs
            Return FindByNoOfCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOfCntrs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingReleasCntrs
            Return FindByNoOfCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_BookingReleasCntrsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingReleasCntrsCollection
            Dim retCollection = New TB_BookingReleasCntrsCollection()
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs

            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.ID, searchValue) Then
                    retCollection.Add(_TB_BookingReleasCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReleaseID(ByVal searchValue As System.Guid) As TB_BookingReleasCntrsCollection
            Return FilterByReleaseID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReleaseID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingReleasCntrsCollection
            Dim retCollection = New TB_BookingReleasCntrsCollection()
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs

            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.ReleaseID, searchValue) Then
                    retCollection.Add(_TB_BookingReleasCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_BookingReleasCntrsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingReleasCntrsCollection
            Dim retCollection = New TB_BookingReleasCntrsCollection()
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs

            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.CnType, searchValue) Then
                    retCollection.Add(_TB_BookingReleasCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnSize(ByVal searchValue As System.String) As TB_BookingReleasCntrsCollection
            Return FilterByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingReleasCntrsCollection
            Dim retCollection = New TB_BookingReleasCntrsCollection()
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs

            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.CnSize, searchValue) Then
                    retCollection.Add(_TB_BookingReleasCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOfCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_BookingReleasCntrsCollection
            Return FilterByNoOfCntrs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOfCntrs(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_BookingReleasCntrsCollection
            Dim retCollection = New TB_BookingReleasCntrsCollection()
            Dim _TB_BookingReleasCntrs As TB_BookingReleasCntrs

            For Each _TB_BookingReleasCntrs In Me.List
                If Match(comparer, _TB_BookingReleasCntrs.NoOfCntrs, searchValue) Then
                    retCollection.Add(_TB_BookingReleasCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByNoOfCntrs(ByVal searchValue As String) As TB_BookingReleasCntrsCollection
            Return FilterByNoOfCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOfCntrs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingReleasCntrsCollection
            Return FilterByNoOfCntrs(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_BookingReleasCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReleaseID(ByVal sortDirection As SortDirection) As TB_BookingReleasCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReleaseID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_BookingReleasCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnSize(ByVal sortDirection As SortDirection) As TB_BookingReleasCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOfCntrs(ByVal sortDirection As SortDirection) As TB_BookingReleasCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOfCntrs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_BookingRelease))>public MustInherit class TB_BookingReleaseCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_BookingRelease))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_BookingRelease
            Get
                return CType(Me.List(index),TB_BookingRelease)
            End Get
            Set(ByVal Value As TB_BookingRelease)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingReleaseCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Dim retCollection = New TB_BookingReleaseCollection()
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease(propertyName), searchValue) Then
                    retCollection.Add(_TB_BookingRelease)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_BookingReleaseCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_BookingReleaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_BookingRelease
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_BookingRelease
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                if  Match(comparer,_TB_BookingRelease(propertyName) , searchValue) then Return _TB_BookingRelease
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_BookingRelease As TB_BookingRelease) As System.Int32
            Return Me.List.Add(newTB_BookingRelease)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_BookingRelease
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingRelease
            Dim _TB_BookingRelease As TB_BookingRelease
            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.ID, searchValue) Then Return _TB_BookingRelease
            Next

            Return Nothing
        End Function

        Public Function FindByBookingID(ByVal searchValue As System.Guid) As TB_BookingRelease
            Return FindByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingRelease
            Dim _TB_BookingRelease As TB_BookingRelease
            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.BookingID, searchValue) Then Return _TB_BookingRelease
            Next

            Return Nothing
        End Function

        Public Function FindByReference(ByVal searchValue As System.String) As TB_BookingRelease
            Return FindByReference(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReference(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingRelease
            Dim _TB_BookingRelease As TB_BookingRelease
            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.Reference, searchValue) Then Return _TB_BookingRelease
            Next

            Return Nothing
        End Function

        Public Function FindByRequestTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingRelease
            Return FindByRequestTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRequestTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingRelease
            Dim _TB_BookingRelease As TB_BookingRelease
            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.RequestTime, searchValue) Then Return _TB_BookingRelease
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByRequestTime(ByVal searchValue As String) As TB_BookingRelease
            Return FindByRequestTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRequestTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingRelease
            Return FindByRequestTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingRelease
            Return FindByIssueDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingRelease
            Dim _TB_BookingRelease As TB_BookingRelease
            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.IssueDate, searchValue) Then Return _TB_BookingRelease
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByIssueDate(ByVal searchValue As String) As TB_BookingRelease
            Return FindByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIssueDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingRelease
            Return FindByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIssueOffice(ByVal searchValue As System.String) As TB_BookingRelease
            Return FindByIssueOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingRelease
            Dim _TB_BookingRelease As TB_BookingRelease
            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.IssueOffice, searchValue) Then Return _TB_BookingRelease
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_BookingReleaseCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Dim retCollection = New TB_BookingReleaseCollection()
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.ID, searchValue) Then
                    retCollection.Add(_TB_BookingRelease)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingID(ByVal searchValue As System.Guid) As TB_BookingReleaseCollection
            Return FilterByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Dim retCollection = New TB_BookingReleaseCollection()
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.BookingID, searchValue) Then
                    retCollection.Add(_TB_BookingRelease)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReference(ByVal searchValue As System.String) As TB_BookingReleaseCollection
            Return FilterByReference(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReference(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Dim retCollection = New TB_BookingReleaseCollection()
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.Reference, searchValue) Then
                    retCollection.Add(_TB_BookingRelease)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRequestTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingReleaseCollection
            Return FilterByRequestTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRequestTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Dim retCollection = New TB_BookingReleaseCollection()
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.RequestTime, searchValue) Then
                    retCollection.Add(_TB_BookingRelease)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByRequestTime(ByVal searchValue As String) As TB_BookingReleaseCollection
            Return FilterByRequestTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRequestTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Return FilterByRequestTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_BookingReleaseCollection
            Return FilterByIssueDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Dim retCollection = New TB_BookingReleaseCollection()
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.IssueDate, searchValue) Then
                    retCollection.Add(_TB_BookingRelease)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByIssueDate(ByVal searchValue As String) As TB_BookingReleaseCollection
            Return FilterByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIssueDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Return FilterByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIssueOffice(ByVal searchValue As System.String) As TB_BookingReleaseCollection
            Return FilterByIssueOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_BookingReleaseCollection
            Dim retCollection = New TB_BookingReleaseCollection()
            Dim _TB_BookingRelease As TB_BookingRelease

            For Each _TB_BookingRelease In Me.List
                If Match(comparer, _TB_BookingRelease.IssueOffice, searchValue) Then
                    retCollection.Add(_TB_BookingRelease)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_BookingReleaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingID(ByVal sortDirection As SortDirection) As TB_BookingReleaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReference(ByVal sortDirection As SortDirection) As TB_BookingReleaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Reference"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRequestTime(ByVal sortDirection As SortDirection) As TB_BookingReleaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RequestTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueDate(ByVal sortDirection As SortDirection) As TB_BookingReleaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueOffice(ByVal sortDirection As SortDirection) As TB_BookingReleaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueOffice"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_CalculationBase))>public MustInherit class TB_CalculationBaseCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_CalculationBase))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_CalculationBase
            Get
                return CType(Me.List(index),TB_CalculationBase)
            End Get
            Set(ByVal Value As TB_CalculationBase)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CalculationBaseCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase(propertyName), searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_CalculationBaseCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CalculationBase
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                if  Match(comparer,_TB_CalculationBase(propertyName) , searchValue) then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_CalculationBase As TB_CalculationBase) As System.Int32
            Return Me.List.Add(newTB_CalculationBase)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_CalculationBase
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ID, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByExchangeRateInward(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByExchangeRateInward(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExchangeRateInward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ExchangeRateInward, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByExchangeRateOutward(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByExchangeRateOutward(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExchangeRateOutward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ExchangeRateOutward, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByDetentionInwardStartTime(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByDetentionInwardStartTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetentionInwardStartTime(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.DetentionInwardStartTime, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByDetentionOutwardStartTime(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByDetentionOutwardStartTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetentionOutwardStartTime(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.DetentionOutwardStartTime, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByTaxDutyInward(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByTaxDutyInward(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTaxDutyInward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.TaxDutyInward, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByTaxDutyOutward(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByTaxDutyOutward(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTaxDutyOutward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.TaxDutyOutward, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByIsTaxDutyJoin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_CalculationBase
            Return FindByIsTaxDutyJoin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsTaxDutyJoin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.IsTaxDutyJoin, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsTaxDutyJoin(ByVal searchValue As String) As TB_CalculationBase
            Return FindByIsTaxDutyJoin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsTaxDutyJoin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_CalculationBase
            Return FindByIsTaxDutyJoin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReferenceFormula(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByReferenceFormula(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReferenceFormula(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ReferenceFormula, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceFormula(ByVal searchValue As System.String) As TB_CalculationBase
            Return FindByInvoiceFormula(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceFormula(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBase
            Dim _TB_CalculationBase As TB_CalculationBase
            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.InvoiceFormula, searchValue) Then Return _TB_CalculationBase
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_CalculationBaseCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ID, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByExchangeRateInward(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByExchangeRateInward(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExchangeRateInward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ExchangeRateInward, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByExchangeRateOutward(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByExchangeRateOutward(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExchangeRateOutward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ExchangeRateOutward, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDetentionInwardStartTime(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByDetentionInwardStartTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetentionInwardStartTime(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.DetentionInwardStartTime, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDetentionOutwardStartTime(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByDetentionOutwardStartTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetentionOutwardStartTime(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.DetentionOutwardStartTime, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTaxDutyInward(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByTaxDutyInward(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTaxDutyInward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.TaxDutyInward, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTaxDutyOutward(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByTaxDutyOutward(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTaxDutyOutward(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.TaxDutyOutward, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsTaxDutyJoin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_CalculationBaseCollection
            Return FilterByIsTaxDutyJoin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsTaxDutyJoin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.IsTaxDutyJoin, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsTaxDutyJoin(ByVal searchValue As String) As TB_CalculationBaseCollection
            Return FilterByIsTaxDutyJoin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsTaxDutyJoin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Return FilterByIsTaxDutyJoin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReferenceFormula(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByReferenceFormula(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReferenceFormula(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.ReferenceFormula, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceFormula(ByVal searchValue As System.String) As TB_CalculationBaseCollection
            Return FilterByInvoiceFormula(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceFormula(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CalculationBaseCollection
            Dim retCollection = New TB_CalculationBaseCollection()
            Dim _TB_CalculationBase As TB_CalculationBase

            For Each _TB_CalculationBase In Me.List
                If Match(comparer, _TB_CalculationBase.InvoiceFormula, searchValue) Then
                    retCollection.Add(_TB_CalculationBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExchangeRateInward(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExchangeRateInward"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExchangeRateOutward(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExchangeRateOutward"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetentionInwardStartTime(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DetentionInwardStartTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetentionOutwardStartTime(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DetentionOutwardStartTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTaxDutyInward(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TaxDutyInward"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTaxDutyOutward(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TaxDutyOutward"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsTaxDutyJoin(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsTaxDutyJoin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReferenceFormula(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReferenceFormula"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceFormula(ByVal sortDirection As SortDirection) As TB_CalculationBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceFormula"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ChgLevelDetails))>public MustInherit class TB_ChgLevelDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ChgLevelDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ChgLevelDetails
            Get
                return CType(Me.List(index),TB_ChgLevelDetails)
            End Get
            Set(ByVal Value As TB_ChgLevelDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ChgLevelDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ChgLevelDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ChgLevelDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                if  Match(comparer,_TB_ChgLevelDetails(propertyName) , searchValue) then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ChgLevelDetails As TB_ChgLevelDetails) As System.Int32
            Return Me.List.Add(newTB_ChgLevelDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ChgLevelDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.ID, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

        Public Function FindByMasterID(ByVal searchValue As System.Guid) As TB_ChgLevelDetails
            Return FindByMasterID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMasterID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.MasterID, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_ChgLevelDetails
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.CnType, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

        Public Function FindBySOC(ByVal searchValue As System.String) As TB_ChgLevelDetails
            Return FindBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.SOC, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

        Public Function FindByShipmentType(ByVal searchValue As System.String) As TB_ChgLevelDetails
            Return FindByShipmentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByShipmentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.ShipmentType, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

        Public Function FindByImco(ByVal searchValue As System.String) As TB_ChgLevelDetails
            Return FindByImco(searchValue, CompareType.Exact)
        End Function


        Public Function FindByImco(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Imco, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

        Public Function FindByIsFull(ByVal searchValue As System.String) As TB_ChgLevelDetails
            Return FindByIsFull(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsFull(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.IsFull, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

        Public Function FindByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelDetails
            Return FindByAmount20(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Amount20, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount20(ByVal searchValue As String) As TB_ChgLevelDetails
            Return FindByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Return FindByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelDetails
            Return FindByAmount40(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Amount40, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount40(ByVal searchValue As String) As TB_ChgLevelDetails
            Return FindByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Return FindByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelDetails
            Return FindByAmount45(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails
            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Amount45, searchValue) Then Return _TB_ChgLevelDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount45(ByVal searchValue As String) As TB_ChgLevelDetails
            Return FindByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelDetails
            Return FindByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ChgLevelDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.ID, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMasterID(ByVal searchValue As System.Guid) As TB_ChgLevelDetailsCollection
            Return FilterByMasterID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMasterID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.MasterID, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_ChgLevelDetailsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.CnType, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySOC(ByVal searchValue As System.String) As TB_ChgLevelDetailsCollection
            Return FilterBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.SOC, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByShipmentType(ByVal searchValue As System.String) As TB_ChgLevelDetailsCollection
            Return FilterByShipmentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByShipmentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.ShipmentType, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByImco(ByVal searchValue As System.String) As TB_ChgLevelDetailsCollection
            Return FilterByImco(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByImco(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Imco, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsFull(ByVal searchValue As System.String) As TB_ChgLevelDetailsCollection
            Return FilterByIsFull(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsFull(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.IsFull, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelDetailsCollection
            Return FilterByAmount20(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Amount20, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount20(ByVal searchValue As String) As TB_ChgLevelDetailsCollection
            Return FilterByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Return FilterByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelDetailsCollection
            Return FilterByAmount40(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Amount40, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount40(ByVal searchValue As String) As TB_ChgLevelDetailsCollection
            Return FilterByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Return FilterByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelDetailsCollection
            Return FilterByAmount45(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Dim retCollection = New TB_ChgLevelDetailsCollection()
            Dim _TB_ChgLevelDetails As TB_ChgLevelDetails

            For Each _TB_ChgLevelDetails In Me.List
                If Match(comparer, _TB_ChgLevelDetails.Amount45, searchValue) Then
                    retCollection.Add(_TB_ChgLevelDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount45(ByVal searchValue As String) As TB_ChgLevelDetailsCollection
            Return FilterByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelDetailsCollection
            Return FilterByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMasterID(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MasterID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySOC(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SOC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByShipmentType(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ShipmentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByImco(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Imco"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsFull(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsFull"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount20(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount20"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount40(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount40"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount45(ByVal sortDirection As SortDirection) As TB_ChgLevelDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount45"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ChgLevelMaster))>public MustInherit class TB_ChgLevelMasterCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ChgLevelMaster))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ChgLevelMaster
            Get
                return CType(Me.List(index),TB_ChgLevelMaster)
            End Get
            Set(ByVal Value As TB_ChgLevelMaster)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ChgLevelMasterCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster(propertyName), searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ChgLevelMasterCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ChgLevelMaster
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                if  Match(comparer,_TB_ChgLevelMaster(propertyName) , searchValue) then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ChgLevelMaster As TB_ChgLevelMaster) As System.Int32
            Return Me.List.Add(newTB_ChgLevelMaster)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ChgLevelMaster
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ID, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByImportExport(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByImportExport(searchValue, CompareType.Exact)
        End Function


        Public Function FindByImportExport(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ImportExport, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ChgLevelMaster
            Return FindByApplyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ApplyDate, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByApplyDate(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByApplyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ChgLevelMaster
            Return FindByValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FindByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Validity, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByValidity(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_ChgLevelMaster
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Seq, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByChargeItem(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByChargeItem(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargeItem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ChargeItem, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByIsDeposit(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_ChgLevelMaster
            Return FindByIsDeposit(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsDeposit(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.IsDeposit, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsDeposit(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindByIsDeposit(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsDeposit(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindByIsDeposit(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByBaseOn(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByBaseOn(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBaseOn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.BaseOn, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByCurCode(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByCurCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.CurCode, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByDefaultAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelMaster
            Return FindByDefaultAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDefaultAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.DefaultAmount, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByDefaultAmount(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindByDefaultAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDefaultAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindByDefaultAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDividInLCL(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_ChgLevelMaster
            Return FindByDividInLCL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDividInLCL(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.DividInLCL, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByDividInLCL(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindByDividInLCL(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDividInLCL(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindByDividInLCL(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCondition(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByCondition(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCondition(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Condition, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Description, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ChgLevelMaster
            Return FindByTax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Tax, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTax(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ChgLevelMaster
            Return FindByToll(searchValue, CompareType.Exact)
        End Function


        Public Function FindByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Toll, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByToll(ByVal searchValue As String) As TB_ChgLevelMaster
            Return FindByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByToll(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Return FindByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPort(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Port, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_ChgLevelMaster
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Line, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FindByClientID(ByVal searchValue As System.Guid) As TB_ChgLevelMaster
            Return FindByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelMaster
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster
            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ClientID, searchValue) Then Return _TB_ChgLevelMaster
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ChgLevelMasterCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ID, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByImportExport(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByImportExport(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByImportExport(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ImportExport, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ChgLevelMasterCollection
            Return FilterByApplyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ApplyDate, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByApplyDate(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByApplyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ChgLevelMasterCollection
            Return FilterByValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Validity, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByValidity(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_ChgLevelMasterCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Seq, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByChargeItem(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByChargeItem(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargeItem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ChargeItem, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsDeposit(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_ChgLevelMasterCollection
            Return FilterByIsDeposit(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsDeposit(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.IsDeposit, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsDeposit(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterByIsDeposit(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsDeposit(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterByIsDeposit(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByBaseOn(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByBaseOn(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBaseOn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.BaseOn, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurCode(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByCurCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.CurCode, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDefaultAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ChgLevelMasterCollection
            Return FilterByDefaultAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDefaultAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.DefaultAmount, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByDefaultAmount(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterByDefaultAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDefaultAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterByDefaultAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDividInLCL(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_ChgLevelMasterCollection
            Return FilterByDividInLCL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDividInLCL(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.DividInLCL, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByDividInLCL(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterByDividInLCL(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDividInLCL(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterByDividInLCL(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCondition(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByCondition(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCondition(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Condition, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Description, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ChgLevelMasterCollection
            Return FilterByTax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Tax, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTax(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ChgLevelMasterCollection
            Return FilterByToll(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Toll, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByToll(ByVal searchValue As String) As TB_ChgLevelMasterCollection
            Return FilterByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByToll(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Return FilterByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Port, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_ChgLevelMasterCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.Line, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByClientID(ByVal searchValue As System.Guid) As TB_ChgLevelMasterCollection
            Return FilterByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ChgLevelMasterCollection
            Dim retCollection = New TB_ChgLevelMasterCollection()
            Dim _TB_ChgLevelMaster As TB_ChgLevelMaster

            For Each _TB_ChgLevelMaster In Me.List
                If Match(comparer, _TB_ChgLevelMaster.ClientID, searchValue) Then
                    retCollection.Add(_TB_ChgLevelMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByImportExport(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ImportExport"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByApplyDate(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ApplyDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByValidity(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Validity"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargeItem(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargeItem"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsDeposit(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsDeposit"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBaseOn(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BaseOn"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurCode(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CurCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDefaultAmount(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DefaultAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDividInLCL(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DividInLCL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCondition(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Condition"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTax(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Tax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByToll(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Toll"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClientID(ByVal sortDirection As SortDirection) As TB_ChgLevelMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ClientID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Clients))>public MustInherit class TB_ClientsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Clients))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Clients
            Get
                return CType(Me.List(index),TB_Clients)
            End Get
            Set(ByVal Value As TB_Clients)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ClientsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients(propertyName), searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ClientsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Clients
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                if  Match(comparer,_TB_Clients(propertyName) , searchValue) then Return _TB_Clients
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Clients As TB_Clients) As System.Int32
            Return Me.List.Add(newTB_Clients)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Clients
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.ID, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindBylName(ByVal searchValue As System.String) As TB_Clients
            Return FindBylName(searchValue, CompareType.Exact)
        End Function


        Public Function FindBylName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.lName, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindBylAddress(ByVal searchValue As System.String) As TB_Clients
            Return FindBylAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FindBylAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.lAddress, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByfName(ByVal searchValue As System.String) As TB_Clients
            Return FindByfName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByfName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.fName, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByfAddress(ByVal searchValue As System.String) As TB_Clients
            Return FindByfAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FindByfAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.fAddress, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByEmail(ByVal searchValue As System.String) As TB_Clients
            Return FindByEmail(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEmail(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Email, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByFax(ByVal searchValue As System.String) As TB_Clients
            Return FindByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Fax, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByTEL(ByVal searchValue As System.String) As TB_Clients
            Return FindByTEL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTEL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.TEL, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByCountry(ByVal searchValue As System.String) As TB_Clients
            Return FindByCountry(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCountry(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Country, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_Clients
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Remarks, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByAccountA(ByVal searchValue As System.String) As TB_Clients
            Return FindByAccountA(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAccountA(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountA, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByAccountB(ByVal searchValue As System.String) As TB_Clients
            Return FindByAccountB(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAccountB(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountB, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByAccountC(ByVal searchValue As System.String) As TB_Clients
            Return FindByAccountC(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAccountC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountC, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByPOBOX(ByVal searchValue As System.String) As TB_Clients
            Return FindByPOBOX(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOBOX(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.POBOX, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByRegestrationNo(ByVal searchValue As System.String) As TB_Clients
            Return FindByRegestrationNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRegestrationNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.RegestrationNo, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByEconomicNo(ByVal searchValue As System.String) As TB_Clients
            Return FindByEconomicNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEconomicNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.EconomicNo, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByIsReal(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Clients
            Return FindByIsReal(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsReal(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.IsReal, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsReal(ByVal searchValue As String) As TB_Clients
            Return FindByIsReal(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsReal(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Clients
            Return FindByIsReal(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByClientCode(ByVal searchValue As System.String) As TB_Clients
            Return FindByClientCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClientCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.ClientCode, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByMobile(ByVal searchValue As System.String) As TB_Clients
            Return FindByMobile(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMobile(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Mobile, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindBySendDocsByFax(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Clients
            Return FindBySendDocsByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySendDocsByFax(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.SendDocsByFax, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindBySendDocsByFax(ByVal searchValue As String) As TB_Clients
            Return FindBySendDocsByFax(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySendDocsByFax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Clients
            Return FindBySendDocsByFax(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySendDocsByEmail(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Clients
            Return FindBySendDocsByEmail(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySendDocsByEmail(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.SendDocsByEmail, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindBySendDocsByEmail(ByVal searchValue As String) As TB_Clients
            Return FindBySendDocsByEmail(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySendDocsByEmail(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Clients
            Return FindBySendDocsByEmail(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNationalCode(ByVal searchValue As System.String) As TB_Clients
            Return FindByNationalCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNationalCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.NationalCode, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByNationalID(ByVal searchValue As System.String) As TB_Clients
            Return FindByNationalID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNationalID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.NationalID, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByCity(ByVal searchValue As System.String) As TB_Clients
            Return FindByCity(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCity(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.City, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByState(ByVal searchValue As System.String) As TB_Clients
            Return FindByState(searchValue, CompareType.Exact)
        End Function


        Public Function FindByState(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.State, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByAccountStatus(ByVal searchValue As System.String) As TB_Clients
            Return FindByAccountStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAccountStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountStatus, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

        Public Function FindByDeposit(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_Clients
            Return FindByDeposit(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDeposit(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_Clients
            Dim _TB_Clients As TB_Clients
            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Deposit, searchValue) Then Return _TB_Clients
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByDeposit(ByVal searchValue As String) As TB_Clients
            Return FindByDeposit(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDeposit(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Clients
            Return FindByDeposit(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ClientsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.ID, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBylName(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterBylName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBylName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.lName, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBylAddress(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterBylAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBylAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.lAddress, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByfName(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByfName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByfName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.fName, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByfAddress(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByfAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByfAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.fAddress, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEmail(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByEmail(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEmail(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Email, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFax(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Fax, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTEL(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByTEL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTEL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.TEL, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCountry(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByCountry(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCountry(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Country, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Remarks, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAccountA(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByAccountA(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAccountA(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountA, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAccountB(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByAccountB(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAccountB(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountB, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAccountC(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByAccountC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAccountC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountC, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOBOX(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByPOBOX(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOBOX(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.POBOX, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRegestrationNo(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByRegestrationNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRegestrationNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.RegestrationNo, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEconomicNo(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByEconomicNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEconomicNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.EconomicNo, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsReal(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_ClientsCollection
            Return FilterByIsReal(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsReal(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.IsReal, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsReal(ByVal searchValue As String) As TB_ClientsCollection
            Return FilterByIsReal(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsReal(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ClientsCollection
            Return FilterByIsReal(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByClientCode(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByClientCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClientCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.ClientCode, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMobile(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByMobile(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMobile(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Mobile, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySendDocsByFax(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_ClientsCollection
            Return FilterBySendDocsByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySendDocsByFax(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.SendDocsByFax, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterBySendDocsByFax(ByVal searchValue As String) As TB_ClientsCollection
            Return FilterBySendDocsByFax(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySendDocsByFax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ClientsCollection
            Return FilterBySendDocsByFax(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySendDocsByEmail(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_ClientsCollection
            Return FilterBySendDocsByEmail(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySendDocsByEmail(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.SendDocsByEmail, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterBySendDocsByEmail(ByVal searchValue As String) As TB_ClientsCollection
            Return FilterBySendDocsByEmail(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySendDocsByEmail(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ClientsCollection
            Return FilterBySendDocsByEmail(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNationalCode(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByNationalCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNationalCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.NationalCode, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNationalID(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByNationalID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNationalID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.NationalID, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCity(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByCity(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCity(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.City, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByState(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByState(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByState(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.State, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAccountStatus(ByVal searchValue As System.String) As TB_ClientsCollection
            Return FilterByAccountStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAccountStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.AccountStatus, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDeposit(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_ClientsCollection
            Return FilterByDeposit(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDeposit(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_ClientsCollection
            Dim retCollection = New TB_ClientsCollection()
            Dim _TB_Clients As TB_Clients

            For Each _TB_Clients In Me.List
                If Match(comparer, _TB_Clients.Deposit, searchValue) Then
                    retCollection.Add(_TB_Clients)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByDeposit(ByVal searchValue As String) As TB_ClientsCollection
            Return FilterByDeposit(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDeposit(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ClientsCollection
            Return FilterByDeposit(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBylName(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("lName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBylAddress(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("lAddress"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByfName(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("fName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByfAddress(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("fAddress"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEmail(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Email"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFax(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Fax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTEL(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TEL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCountry(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Country"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAccountA(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("AccountA"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAccountB(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("AccountB"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAccountC(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("AccountC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOBOX(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POBOX"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRegestrationNo(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RegestrationNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEconomicNo(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EconomicNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsReal(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsReal"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClientCode(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ClientCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMobile(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Mobile"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySendDocsByFax(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SendDocsByFax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySendDocsByEmail(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SendDocsByEmail"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNationalCode(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NationalCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNationalID(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NationalID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCity(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("City"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByState(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("State"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAccountStatus(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("AccountStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDeposit(ByVal sortDirection As SortDirection) As TB_ClientsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Deposit"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Cluses))>public MustInherit class TB_ClusesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Cluses))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Cluses
            Get
                return CType(Me.List(index),TB_Cluses)
            End Get
            Set(ByVal Value As TB_Cluses)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ClusesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ClusesCollection
            Dim retCollection = New TB_ClusesCollection()
            Dim _TB_Cluses As TB_Cluses

            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses(propertyName), searchValue) Then
                    retCollection.Add(_TB_Cluses)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ClusesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ClusesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Cluses
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Cluses
            Dim _TB_Cluses As TB_Cluses

            For Each _TB_Cluses In Me.List
                if  Match(comparer,_TB_Cluses(propertyName) , searchValue) then Return _TB_Cluses
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Cluses As TB_Cluses) As System.Int32
            Return Me.List.Add(newTB_Cluses)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Cluses
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Cluses
            Dim _TB_Cluses As TB_Cluses
            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.ID, searchValue) Then Return _TB_Cluses
            Next

            Return Nothing
        End Function

        Public Function FindByCluseGroup(ByVal searchValue As System.String) As TB_Cluses
            Return FindByCluseGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCluseGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Cluses
            Dim _TB_Cluses As TB_Cluses
            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.CluseGroup, searchValue) Then Return _TB_Cluses
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_Cluses
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Cluses
            Dim _TB_Cluses As TB_Cluses
            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.Description, searchValue) Then Return _TB_Cluses
            Next

            Return Nothing
        End Function

        Public Function FindByDetail(ByVal searchValue As System.String) As TB_Cluses
            Return FindByDetail(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetail(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Cluses
            Dim _TB_Cluses As TB_Cluses
            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.Detail, searchValue) Then Return _TB_Cluses
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ClusesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ClusesCollection
            Dim retCollection = New TB_ClusesCollection()
            Dim _TB_Cluses As TB_Cluses

            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.ID, searchValue) Then
                    retCollection.Add(_TB_Cluses)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCluseGroup(ByVal searchValue As System.String) As TB_ClusesCollection
            Return FilterByCluseGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCluseGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClusesCollection
            Dim retCollection = New TB_ClusesCollection()
            Dim _TB_Cluses As TB_Cluses

            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.CluseGroup, searchValue) Then
                    retCollection.Add(_TB_Cluses)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_ClusesCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClusesCollection
            Dim retCollection = New TB_ClusesCollection()
            Dim _TB_Cluses As TB_Cluses

            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.Description, searchValue) Then
                    retCollection.Add(_TB_Cluses)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDetail(ByVal searchValue As System.String) As TB_ClusesCollection
            Return FilterByDetail(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetail(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ClusesCollection
            Dim retCollection = New TB_ClusesCollection()
            Dim _TB_Cluses As TB_Cluses

            For Each _TB_Cluses In Me.List
                If Match(comparer, _TB_Cluses.Detail, searchValue) Then
                    retCollection.Add(_TB_Cluses)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ClusesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCluseGroup(ByVal sortDirection As SortDirection) As TB_ClusesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CluseGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_ClusesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetail(ByVal sortDirection As SortDirection) As TB_ClusesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Detail"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_CODE))>public MustInherit class TB_CODECollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_CODE))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_CODE
            Get
                return CType(Me.List(index),TB_CODE)
            End Get
            Set(ByVal Value As TB_CODE)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CODECollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE(propertyName), searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_CODECollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CODE
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                if  Match(comparer,_TB_CODE(propertyName) , searchValue) then Return _TB_CODE
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_CODE As TB_CODE) As System.Int32
            Return Me.List.Add(newTB_CODE)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_CODE
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE
            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.ID, searchValue) Then Return _TB_CODE
            Next

            Return Nothing
        End Function

        Public Function FindByGroupCode(ByVal searchValue As System.String) As TB_CODE
            Return FindByGroupCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGroupCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE
            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.GroupCode, searchValue) Then Return _TB_CODE
            Next

            Return Nothing
        End Function

        Public Function FindBySTDCode(ByVal searchValue As System.String) As TB_CODE
            Return FindBySTDCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySTDCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE
            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.STDCode, searchValue) Then Return _TB_CODE
            Next

            Return Nothing
        End Function

        Public Function FindByNextCode(ByVal searchValue As System.String) As TB_CODE
            Return FindByNextCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNextCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE
            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.NextCode, searchValue) Then Return _TB_CODE
            Next

            Return Nothing
        End Function

        Public Function FindByMEANING(ByVal searchValue As System.String) As TB_CODE
            Return FindByMEANING(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMEANING(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE
            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.MEANING, searchValue) Then Return _TB_CODE
            Next

            Return Nothing
        End Function

        Public Function FindByMEANINGF(ByVal searchValue As System.String) As TB_CODE
            Return FindByMEANINGF(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMEANINGF(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE
            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.MEANINGF, searchValue) Then Return _TB_CODE
            Next

            Return Nothing
        End Function

        Public Function FindByIsEditeble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_CODE
            Return FindByIsEditeble(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsEditeble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_CODE
            Dim _TB_CODE As TB_CODE
            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.IsEditeble, searchValue) Then Return _TB_CODE
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsEditeble(ByVal searchValue As String) As TB_CODE
            Return FindByIsEditeble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsEditeble(ByVal searchValue As String, ByVal comparer As CompareType) As TB_CODE
            Return FindByIsEditeble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_CODECollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.ID, searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGroupCode(ByVal searchValue As System.String) As TB_CODECollection
            Return FilterByGroupCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGroupCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.GroupCode, searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySTDCode(ByVal searchValue As System.String) As TB_CODECollection
            Return FilterBySTDCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySTDCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.STDCode, searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNextCode(ByVal searchValue As System.String) As TB_CODECollection
            Return FilterByNextCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNextCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.NextCode, searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMEANING(ByVal searchValue As System.String) As TB_CODECollection
            Return FilterByMEANING(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMEANING(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.MEANING, searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMEANINGF(ByVal searchValue As System.String) As TB_CODECollection
            Return FilterByMEANINGF(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMEANINGF(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.MEANINGF, searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsEditeble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_CODECollection
            Return FilterByIsEditeble(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsEditeble(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_CODECollection
            Dim retCollection = New TB_CODECollection()
            Dim _TB_CODE As TB_CODE

            For Each _TB_CODE In Me.List
                If Match(comparer, _TB_CODE.IsEditeble, searchValue) Then
                    retCollection.Add(_TB_CODE)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsEditeble(ByVal searchValue As String) As TB_CODECollection
            Return FilterByIsEditeble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsEditeble(ByVal searchValue As String, ByVal comparer As CompareType) As TB_CODECollection
            Return FilterByIsEditeble(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGroupCode(ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GroupCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySTDCode(ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("STDCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNextCode(ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NextCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMEANING(ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MEANING"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMEANINGF(ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MEANINGF"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsEditeble(ByVal sortDirection As SortDirection) As TB_CODECollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsEditeble"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_CodeMaster))>public MustInherit class TB_CodeMasterCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_CodeMaster))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_CodeMaster
            Get
                return CType(Me.List(index),TB_CodeMaster)
            End Get
            Set(ByVal Value As TB_CodeMaster)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CodeMasterCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CodeMasterCollection
            Dim retCollection = New TB_CodeMasterCollection()
            Dim _TB_CodeMaster As TB_CodeMaster

            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster(propertyName), searchValue) Then
                    retCollection.Add(_TB_CodeMaster)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_CodeMasterCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_CodeMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CodeMaster
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CodeMaster
            Dim _TB_CodeMaster As TB_CodeMaster

            For Each _TB_CodeMaster In Me.List
                if  Match(comparer,_TB_CodeMaster(propertyName) , searchValue) then Return _TB_CodeMaster
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_CodeMaster As TB_CodeMaster) As System.Int32
            Return Me.List.Add(newTB_CodeMaster)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_CodeMaster
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CodeMaster
            Dim _TB_CodeMaster As TB_CodeMaster
            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.ID, searchValue) Then Return _TB_CodeMaster
            Next

            Return Nothing
        End Function

        Public Function FindByGroupCode(ByVal searchValue As System.String) As TB_CodeMaster
            Return FindByGroupCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGroupCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CodeMaster
            Dim _TB_CodeMaster As TB_CodeMaster
            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.GroupCode, searchValue) Then Return _TB_CodeMaster
            Next

            Return Nothing
        End Function

        Public Function FindByGroupName(ByVal searchValue As System.String) As TB_CodeMaster
            Return FindByGroupName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGroupName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CodeMaster
            Dim _TB_CodeMaster As TB_CodeMaster
            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.GroupName, searchValue) Then Return _TB_CodeMaster
            Next

            Return Nothing
        End Function

        Public Function FindByIsSystemCode(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_CodeMaster
            Return FindByIsSystemCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsSystemCode(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_CodeMaster
            Dim _TB_CodeMaster As TB_CodeMaster
            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.IsSystemCode, searchValue) Then Return _TB_CodeMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsSystemCode(ByVal searchValue As String) As TB_CodeMaster
            Return FindByIsSystemCode(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsSystemCode(ByVal searchValue As String, ByVal comparer As CompareType) As TB_CodeMaster
            Return FindByIsSystemCode(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_CodeMasterCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CodeMasterCollection
            Dim retCollection = New TB_CodeMasterCollection()
            Dim _TB_CodeMaster As TB_CodeMaster

            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.ID, searchValue) Then
                    retCollection.Add(_TB_CodeMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGroupCode(ByVal searchValue As System.String) As TB_CodeMasterCollection
            Return FilterByGroupCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGroupCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CodeMasterCollection
            Dim retCollection = New TB_CodeMasterCollection()
            Dim _TB_CodeMaster As TB_CodeMaster

            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.GroupCode, searchValue) Then
                    retCollection.Add(_TB_CodeMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGroupName(ByVal searchValue As System.String) As TB_CodeMasterCollection
            Return FilterByGroupName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGroupName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CodeMasterCollection
            Dim retCollection = New TB_CodeMasterCollection()
            Dim _TB_CodeMaster As TB_CodeMaster

            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.GroupName, searchValue) Then
                    retCollection.Add(_TB_CodeMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsSystemCode(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_CodeMasterCollection
            Return FilterByIsSystemCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsSystemCode(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_CodeMasterCollection
            Dim retCollection = New TB_CodeMasterCollection()
            Dim _TB_CodeMaster As TB_CodeMaster

            For Each _TB_CodeMaster In Me.List
                If Match(comparer, _TB_CodeMaster.IsSystemCode, searchValue) Then
                    retCollection.Add(_TB_CodeMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsSystemCode(ByVal searchValue As String) As TB_CodeMasterCollection
            Return FilterByIsSystemCode(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsSystemCode(ByVal searchValue As String, ByVal comparer As CompareType) As TB_CodeMasterCollection
            Return FilterByIsSystemCode(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_CodeMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGroupCode(ByVal sortDirection As SortDirection) As TB_CodeMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GroupCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGroupName(ByVal sortDirection As SortDirection) As TB_CodeMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GroupName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsSystemCode(ByVal sortDirection As SortDirection) As TB_CodeMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsSystemCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Company))>public MustInherit class TB_CompanyCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Company))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Company
            Get
                return CType(Me.List(index),TB_Company)
            End Get
            Set(ByVal Value As TB_Company)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CompanyCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company(propertyName), searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_CompanyCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Company
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                if  Match(comparer,_TB_Company(propertyName) , searchValue) then Return _TB_Company
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Company As TB_Company) As System.Int32
            Return Me.List.Add(newTB_Company)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Company
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.ID, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyName(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyName, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyAddress(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyAddress, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByTel(ByVal searchValue As System.String) As TB_Company
            Return FindByTel(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.Tel, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByFax(ByVal searchValue As System.String) As TB_Company
            Return FindByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.Fax, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByEDICODE(ByVal searchValue As System.String) As TB_Company
            Return FindByEDICODE(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEDICODE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.EDICODE, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByDomainName(ByVal searchValue As System.String) As TB_Company
            Return FindByDomainName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDomainName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.DomainName, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByPOP3(ByVal searchValue As System.String) As TB_Company
            Return FindByPOP3(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOP3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.POP3, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindBySMTP(ByVal searchValue As System.String) As TB_Company
            Return FindBySMTP(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySMTP(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.SMTP, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyFName(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyFName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyFName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyFName, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompantFAddress(ByVal searchValue As System.String) As TB_Company
            Return FindByCompantFAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompantFAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompantFAddress, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyFTel(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyFTel(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyFTel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyFTel, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyFFax(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyFFax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyFFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyFFax, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyAccount(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyAccount, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByDetentionBySlab(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Company
            Return FindByDetentionBySlab(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetentionBySlab(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.DetentionBySlab, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByDetentionBySlab(ByVal searchValue As String) As TB_Company
            Return FindByDetentionBySlab(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDetentionBySlab(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Company
            Return FindByDetentionBySlab(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPOBOX(ByVal searchValue As System.String) As TB_Company
            Return FindByPOBOX(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOBOX(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.POBOX, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByRegestrationNo(ByVal searchValue As System.String) As TB_Company
            Return FindByRegestrationNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRegestrationNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.RegestrationNo, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByEconomicNo(ByVal searchValue As System.String) As TB_Company
            Return FindByEconomicNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEconomicNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.EconomicNo, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindBySOCEDICode(ByVal searchValue As System.String) As TB_Company
            Return FindBySOCEDICode(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySOCEDICode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.SOCEDICode, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyBranchAdrs(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyBranchAdrs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyBranchAdrs(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyBranchAdrs, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FindByCompanyLBranchAdrs(ByVal searchValue As System.String) As TB_Company
            Return FindByCompanyLBranchAdrs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCompanyLBranchAdrs(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Company
            Dim _TB_Company As TB_Company
            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyLBranchAdrs, searchValue) Then Return _TB_Company
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_CompanyCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.ID, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyName(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyName, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyAddress(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyAddress, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTel(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByTel(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.Tel, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFax(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByFax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.Fax, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEDICODE(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByEDICODE(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEDICODE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.EDICODE, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDomainName(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByDomainName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDomainName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.DomainName, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOP3(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByPOP3(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOP3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.POP3, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySMTP(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterBySMTP(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySMTP(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.SMTP, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyFName(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyFName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyFName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyFName, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompantFAddress(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompantFAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompantFAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompantFAddress, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyFTel(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyFTel(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyFTel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyFTel, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyFFax(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyFFax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyFFax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyFFax, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyAccount(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyAccount, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDetentionBySlab(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_CompanyCollection
            Return FilterByDetentionBySlab(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetentionBySlab(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.DetentionBySlab, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByDetentionBySlab(ByVal searchValue As String) As TB_CompanyCollection
            Return FilterByDetentionBySlab(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDetentionBySlab(ByVal searchValue As String, ByVal comparer As CompareType) As TB_CompanyCollection
            Return FilterByDetentionBySlab(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPOBOX(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByPOBOX(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOBOX(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.POBOX, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRegestrationNo(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByRegestrationNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRegestrationNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.RegestrationNo, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEconomicNo(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByEconomicNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEconomicNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.EconomicNo, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySOCEDICode(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterBySOCEDICode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySOCEDICode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.SOCEDICode, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyBranchAdrs(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyBranchAdrs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyBranchAdrs(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyBranchAdrs, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCompanyLBranchAdrs(ByVal searchValue As System.String) As TB_CompanyCollection
            Return FilterByCompanyLBranchAdrs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCompanyLBranchAdrs(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CompanyCollection
            Dim retCollection = New TB_CompanyCollection()
            Dim _TB_Company As TB_Company

            For Each _TB_Company In Me.List
                If Match(comparer, _TB_Company.CompanyLBranchAdrs, searchValue) Then
                    retCollection.Add(_TB_Company)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyName(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyAddress(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyAddress"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTel(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Tel"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFax(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Fax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEDICODE(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EDICODE"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDomainName(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DomainName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOP3(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POP3"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySMTP(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SMTP"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyFName(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyFName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompantFAddress(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompantFAddress"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyFTel(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyFTel"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyFFax(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyFFax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyAccount(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyAccount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetentionBySlab(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DetentionBySlab"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOBOX(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POBOX"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRegestrationNo(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RegestrationNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEconomicNo(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EconomicNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySOCEDICode(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SOCEDICode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyBranchAdrs(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyBranchAdrs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCompanyLBranchAdrs(ByVal sortDirection As SortDirection) As TB_CompanyCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CompanyLBranchAdrs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Country))>public MustInherit class TB_CountryCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Country))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Country
            Get
                return CType(Me.List(index),TB_Country)
            End Get
            Set(ByVal Value As TB_Country)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CountryCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CountryCollection
            Dim retCollection = New TB_CountryCollection()
            Dim _TB_Country As TB_Country

            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country(propertyName), searchValue) Then
                    retCollection.Add(_TB_Country)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_CountryCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_CountryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Country
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Country
            Dim _TB_Country As TB_Country

            For Each _TB_Country In Me.List
                if  Match(comparer,_TB_Country(propertyName) , searchValue) then Return _TB_Country
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Country As TB_Country) As System.Int32
            Return Me.List.Add(newTB_Country)
        End Function
			
		

        Public Function FindByCountryCode(ByVal searchValue As System.String) As TB_Country
            Return FindByCountryCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCountryCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Country
            Dim _TB_Country As TB_Country
            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.CountryCode, searchValue) Then Return _TB_Country
            Next

            Return Nothing
        End Function

        Public Function FindByCountryName(ByVal searchValue As System.String) As TB_Country
            Return FindByCountryName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCountryName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Country
            Dim _TB_Country As TB_Country
            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.CountryName, searchValue) Then Return _TB_Country
            Next

            Return Nothing
        End Function

        Public Function FindByFCountryName(ByVal searchValue As System.String) As TB_Country
            Return FindByFCountryName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFCountryName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Country
            Dim _TB_Country As TB_Country
            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.FCountryName, searchValue) Then Return _TB_Country
            Next

            Return Nothing
        End Function

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Country
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Country
            Dim _TB_Country As TB_Country
            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.ID, searchValue) Then Return _TB_Country
            Next

            Return Nothing
        End Function

        Public Function FilterByCountryCode(ByVal searchValue As System.String) As TB_CountryCollection
            Return FilterByCountryCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCountryCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CountryCollection
            Dim retCollection = New TB_CountryCollection()
            Dim _TB_Country As TB_Country

            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.CountryCode, searchValue) Then
                    retCollection.Add(_TB_Country)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCountryName(ByVal searchValue As System.String) As TB_CountryCollection
            Return FilterByCountryName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCountryName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CountryCollection
            Dim retCollection = New TB_CountryCollection()
            Dim _TB_Country As TB_Country

            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.CountryName, searchValue) Then
                    retCollection.Add(_TB_Country)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFCountryName(ByVal searchValue As System.String) As TB_CountryCollection
            Return FilterByFCountryName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFCountryName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CountryCollection
            Dim retCollection = New TB_CountryCollection()
            Dim _TB_Country As TB_Country

            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.FCountryName, searchValue) Then
                    retCollection.Add(_TB_Country)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_CountryCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CountryCollection
            Dim retCollection = New TB_CountryCollection()
            Dim _TB_Country As TB_Country

            For Each _TB_Country In Me.List
                If Match(comparer, _TB_Country.ID, searchValue) Then
                    retCollection.Add(_TB_Country)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByCountryCode(ByVal sortDirection As SortDirection) As TB_CountryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CountryCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCountryName(ByVal sortDirection As SortDirection) As TB_CountryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CountryName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFCountryName(ByVal sortDirection As SortDirection) As TB_CountryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FCountryName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_CountryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_CustomMenu))>public MustInherit class TB_CustomMenuCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_CustomMenu))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_CustomMenu
            Get
                return CType(Me.List(index),TB_CustomMenu)
            End Get
            Set(ByVal Value As TB_CustomMenu)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CustomMenuCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CustomMenuCollection
            Dim retCollection = New TB_CustomMenuCollection()
            Dim _TB_CustomMenu As TB_CustomMenu

            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu(propertyName), searchValue) Then
                    retCollection.Add(_TB_CustomMenu)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_CustomMenuCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_CustomMenuCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_CustomMenu
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_CustomMenu
            Dim _TB_CustomMenu As TB_CustomMenu

            For Each _TB_CustomMenu In Me.List
                if  Match(comparer,_TB_CustomMenu(propertyName) , searchValue) then Return _TB_CustomMenu
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_CustomMenu As TB_CustomMenu) As System.Int32
            Return Me.List.Add(newTB_CustomMenu)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_CustomMenu
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CustomMenu
            Dim _TB_CustomMenu As TB_CustomMenu
            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.ID, searchValue) Then Return _TB_CustomMenu
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_CustomMenu
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenu
            Dim _TB_CustomMenu As TB_CustomMenu
            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.Line, searchValue) Then Return _TB_CustomMenu
            Next

            Return Nothing
        End Function

        Public Function FindByMenuGroup(ByVal searchValue As System.String) As TB_CustomMenu
            Return FindByMenuGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMenuGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenu
            Dim _TB_CustomMenu As TB_CustomMenu
            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.MenuGroup, searchValue) Then Return _TB_CustomMenu
            Next

            Return Nothing
        End Function

        Public Function FindByMenuItem(ByVal searchValue As System.String) As TB_CustomMenu
            Return FindByMenuItem(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMenuItem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenu
            Dim _TB_CustomMenu As TB_CustomMenu
            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.MenuItem, searchValue) Then Return _TB_CustomMenu
            Next

            Return Nothing
        End Function

        Public Function FindByFormName(ByVal searchValue As System.String) As TB_CustomMenu
            Return FindByFormName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFormName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenu
            Dim _TB_CustomMenu As TB_CustomMenu
            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.FormName, searchValue) Then Return _TB_CustomMenu
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_CustomMenuCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_CustomMenuCollection
            Dim retCollection = New TB_CustomMenuCollection()
            Dim _TB_CustomMenu As TB_CustomMenu

            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.ID, searchValue) Then
                    retCollection.Add(_TB_CustomMenu)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_CustomMenuCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenuCollection
            Dim retCollection = New TB_CustomMenuCollection()
            Dim _TB_CustomMenu As TB_CustomMenu

            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.Line, searchValue) Then
                    retCollection.Add(_TB_CustomMenu)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMenuGroup(ByVal searchValue As System.String) As TB_CustomMenuCollection
            Return FilterByMenuGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMenuGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenuCollection
            Dim retCollection = New TB_CustomMenuCollection()
            Dim _TB_CustomMenu As TB_CustomMenu

            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.MenuGroup, searchValue) Then
                    retCollection.Add(_TB_CustomMenu)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMenuItem(ByVal searchValue As System.String) As TB_CustomMenuCollection
            Return FilterByMenuItem(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMenuItem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenuCollection
            Dim retCollection = New TB_CustomMenuCollection()
            Dim _TB_CustomMenu As TB_CustomMenu

            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.MenuItem, searchValue) Then
                    retCollection.Add(_TB_CustomMenu)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFormName(ByVal searchValue As System.String) As TB_CustomMenuCollection
            Return FilterByFormName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFormName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_CustomMenuCollection
            Dim retCollection = New TB_CustomMenuCollection()
            Dim _TB_CustomMenu As TB_CustomMenu

            For Each _TB_CustomMenu In Me.List
                If Match(comparer, _TB_CustomMenu.FormName, searchValue) Then
                    retCollection.Add(_TB_CustomMenu)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_CustomMenuCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_CustomMenuCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMenuGroup(ByVal sortDirection As SortDirection) As TB_CustomMenuCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MenuGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMenuItem(ByVal sortDirection As SortDirection) As TB_CustomMenuCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MenuItem"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFormName(ByVal sortDirection As SortDirection) As TB_CustomMenuCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FormName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Damage))>public MustInherit class TB_DamageCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Damage))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Damage
            Get
                return CType(Me.List(index),TB_Damage)
            End Get
            Set(ByVal Value As TB_Damage)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DamageCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage(propertyName), searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_DamageCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Damage
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                if  Match(comparer,_TB_Damage(propertyName) , searchValue) then Return _TB_Damage
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Damage As TB_Damage) As System.Int32
            Return Me.List.Add(newTB_Damage)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Damage
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.ID, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_Damage
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.CntrID, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FindByReportDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Damage
            Return FindByReportDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReportDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.ReportDate, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByReportDate(ByVal searchValue As String) As TB_Damage
            Return FindByReportDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReportDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Damage
            Return FindByReportDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDescription(ByVal searchValue As System.String) As TB_Damage
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.Description, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FindByDamageOn(ByVal searchValue As System.String) As TB_Damage
            Return FindByDamageOn(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDamageOn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.DamageOn, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FindByRepairShop(ByVal searchValue As System.String) As TB_Damage
            Return FindByRepairShop(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRepairShop(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.RepairShop, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FindByStartRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Damage
            Return FindByStartRepair(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStartRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.StartRepair, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByStartRepair(ByVal searchValue As String) As TB_Damage
            Return FindByStartRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByStartRepair(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Damage
            Return FindByStartRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFinishedRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Damage
            Return FindByFinishedRepair(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFinishedRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.FinishedRepair, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByFinishedRepair(ByVal searchValue As String) As TB_Damage
            Return FindByFinishedRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFinishedRepair(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Damage
            Return FindByFinishedRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByRepairCost(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Damage
            Return FindByRepairCost(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRepairCost(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.RepairCost, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByRepairCost(ByVal searchValue As String) As TB_Damage
            Return FindByRepairCost(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRepairCost(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Damage
            Return FindByRepairCost(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_Damage
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.Currency, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceTo(ByVal searchValue As System.Guid) As TB_Damage
            Return FindByInvoiceTo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceTo(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.InvoiceTo, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Damage
            Return FindByInvoiceAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.InvoiceAmount, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByInvoiceAmount(ByVal searchValue As String) As TB_Damage
            Return FindByInvoiceAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByInvoiceAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Damage
            Return FindByInvoiceAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByInvCurrency(ByVal searchValue As System.String) As TB_Damage
            Return FindByInvCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Damage
            Dim _TB_Damage As TB_Damage
            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.InvCurrency, searchValue) Then Return _TB_Damage
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_DamageCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.ID, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_DamageCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.CntrID, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReportDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DamageCollection
            Return FilterByReportDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReportDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.ReportDate, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByReportDate(ByVal searchValue As String) As TB_DamageCollection
            Return FilterByReportDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReportDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DamageCollection
            Return FilterByReportDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_DamageCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.Description, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDamageOn(ByVal searchValue As System.String) As TB_DamageCollection
            Return FilterByDamageOn(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDamageOn(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.DamageOn, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRepairShop(ByVal searchValue As System.String) As TB_DamageCollection
            Return FilterByRepairShop(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRepairShop(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.RepairShop, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStartRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DamageCollection
            Return FilterByStartRepair(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStartRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.StartRepair, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByStartRepair(ByVal searchValue As String) As TB_DamageCollection
            Return FilterByStartRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByStartRepair(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DamageCollection
            Return FilterByStartRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFinishedRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DamageCollection
            Return FilterByFinishedRepair(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFinishedRepair(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.FinishedRepair, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByFinishedRepair(ByVal searchValue As String) As TB_DamageCollection
            Return FilterByFinishedRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFinishedRepair(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DamageCollection
            Return FilterByFinishedRepair(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByRepairCost(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DamageCollection
            Return FilterByRepairCost(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRepairCost(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.RepairCost, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByRepairCost(ByVal searchValue As String) As TB_DamageCollection
            Return FilterByRepairCost(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRepairCost(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DamageCollection
            Return FilterByRepairCost(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_DamageCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.Currency, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceTo(ByVal searchValue As System.Guid) As TB_DamageCollection
            Return FilterByInvoiceTo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceTo(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.InvoiceTo, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DamageCollection
            Return FilterByInvoiceAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.InvoiceAmount, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByInvoiceAmount(ByVal searchValue As String) As TB_DamageCollection
            Return FilterByInvoiceAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByInvoiceAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DamageCollection
            Return FilterByInvoiceAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByInvCurrency(ByVal searchValue As System.String) As TB_DamageCollection
            Return FilterByInvCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DamageCollection
            Dim retCollection = New TB_DamageCollection()
            Dim _TB_Damage As TB_Damage

            For Each _TB_Damage In Me.List
                If Match(comparer, _TB_Damage.InvCurrency, searchValue) Then
                    retCollection.Add(_TB_Damage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReportDate(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReportDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDamageOn(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DamageOn"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRepairShop(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RepairShop"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStartRepair(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("StartRepair"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFinishedRepair(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FinishedRepair"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRepairCost(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RepairCost"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceTo(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceTo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceAmount(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvCurrency(ByVal sortDirection As SortDirection) As TB_DamageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvCurrency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Deposits))>public MustInherit class TB_DepositsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Deposits))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Deposits
            Get
                return CType(Me.List(index),TB_Deposits)
            End Get
            Set(ByVal Value As TB_Deposits)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DepositsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits(propertyName), searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_DepositsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Deposits
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                if  Match(comparer,_TB_Deposits(propertyName) , searchValue) then Return _TB_Deposits
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Deposits As TB_Deposits) As System.Int32
            Return Me.List.Add(newTB_Deposits)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Deposits
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ID, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_Deposits
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.BLID, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

        Public Function FindByChargesCodes(ByVal searchValue As System.String) As TB_Deposits
            Return FindByChargesCodes(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCodes(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ChargesCodes, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_Deposits
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.Remarks, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Deposits
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.Amount, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_Deposits
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Deposits
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Deposits
            Return FindByReturnBackDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ReturnBackDate, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByReturnBackDate(ByVal searchValue As String) As TB_Deposits
            Return FindByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReturnBackDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Deposits
            Return FindByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_Deposits
            Return FindByReturnBackAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ReturnBackAmount, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByReturnBackAmount(ByVal searchValue As String) As TB_Deposits
            Return FindByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReturnBackAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Deposits
            Return FindByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReturnBackRef(ByVal searchValue As System.String) As TB_Deposits
            Return FindByReturnBackRef(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReturnBackRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ReturnBackRef, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

        Public Function FindByPaidRef(ByVal searchValue As System.String) As TB_Deposits
            Return FindByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Deposits
            Dim _TB_Deposits As TB_Deposits
            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.PaidRef, searchValue) Then Return _TB_Deposits
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_DepositsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ID, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_DepositsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.BLID, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesCodes(ByVal searchValue As System.String) As TB_DepositsCollection
            Return FilterByChargesCodes(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCodes(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ChargesCodes, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_DepositsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.Remarks, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DepositsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.Amount, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_DepositsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DepositsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DepositsCollection
            Return FilterByReturnBackDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReturnBackDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ReturnBackDate, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByReturnBackDate(ByVal searchValue As String) As TB_DepositsCollection
            Return FilterByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReturnBackDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DepositsCollection
            Return FilterByReturnBackDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_DepositsCollection
            Return FilterByReturnBackAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReturnBackAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ReturnBackAmount, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByReturnBackAmount(ByVal searchValue As String) As TB_DepositsCollection
            Return FilterByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReturnBackAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DepositsCollection
            Return FilterByReturnBackAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReturnBackRef(ByVal searchValue As System.String) As TB_DepositsCollection
            Return FilterByReturnBackRef(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReturnBackRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.ReturnBackRef, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaidRef(ByVal searchValue As System.String) As TB_DepositsCollection
            Return FilterByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DepositsCollection
            Dim retCollection = New TB_DepositsCollection()
            Dim _TB_Deposits As TB_Deposits

            For Each _TB_Deposits In Me.List
                If Match(comparer, _TB_Deposits.PaidRef, searchValue) Then
                    retCollection.Add(_TB_Deposits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCodes(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCodes"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReturnBackDate(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReturnBackDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReturnBackAmount(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReturnBackAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReturnBackRef(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReturnBackRef"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaidRef(ByVal sortDirection As SortDirection) As TB_DepositsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaidRef"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_DetentionBase))>public MustInherit class TB_DetentionBaseCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_DetentionBase))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_DetentionBase
            Get
                return CType(Me.List(index),TB_DetentionBase)
            End Get
            Set(ByVal Value As TB_DetentionBase)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DetentionBaseCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase(propertyName), searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_DetentionBaseCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DetentionBase
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                if  Match(comparer,_TB_DetentionBase(propertyName) , searchValue) then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_DetentionBase As TB_DetentionBase) As System.Int32
            Return Me.List.Add(newTB_DetentionBase)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_DetentionBase
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.ID, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FindByImpExp(ByVal searchValue As System.String) As TB_DetentionBase
            Return FindByImpExp(searchValue, CompareType.Exact)
        End Function


        Public Function FindByImpExp(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.ImpExp, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FindByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DetentionBase
            Return FindByApplyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.ApplyDate, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByApplyDate(ByVal searchValue As String) As TB_DetentionBase
            Return FindByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByApplyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBase
            Return FindByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DetentionBase
            Return FindByValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FindByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Validity, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByValidity(ByVal searchValue As String) As TB_DetentionBase
            Return FindByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBase
            Return FindByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_DetentionBase
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Remarks, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FindByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_DetentionBase
            Return FindByTax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Tax, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTax(ByVal searchValue As String) As TB_DetentionBase
            Return FindByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBase
            Return FindByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_DetentionBase
            Return FindByToll(searchValue, CompareType.Exact)
        End Function


        Public Function FindByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Toll, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByToll(ByVal searchValue As String) As TB_DetentionBase
            Return FindByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByToll(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBase
            Return FindByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIsBase(ByVal searchValue As System.String) As TB_DetentionBase
            Return FindByIsBase(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.IsBase, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_DetentionBase
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Currency, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FindByClause(ByVal searchValue As System.String) As TB_DetentionBase
            Return FindByClause(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClause(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Clause, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FindByFClause(ByVal searchValue As System.String) As TB_DetentionBase
            Return FindByFClause(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFClause(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.FClause, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_DetentionBase
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBase
            Dim _TB_DetentionBase As TB_DetentionBase
            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Line, searchValue) Then Return _TB_DetentionBase
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_DetentionBaseCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.ID, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByImpExp(ByVal searchValue As System.String) As TB_DetentionBaseCollection
            Return FilterByImpExp(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByImpExp(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.ImpExp, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DetentionBaseCollection
            Return FilterByApplyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.ApplyDate, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByApplyDate(ByVal searchValue As String) As TB_DetentionBaseCollection
            Return FilterByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByApplyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Return FilterByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_DetentionBaseCollection
            Return FilterByValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Validity, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByValidity(ByVal searchValue As String) As TB_DetentionBaseCollection
            Return FilterByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Return FilterByValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_DetentionBaseCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Remarks, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_DetentionBaseCollection
            Return FilterByTax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Tax, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTax(ByVal searchValue As String) As TB_DetentionBaseCollection
            Return FilterByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Return FilterByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_DetentionBaseCollection
            Return FilterByToll(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByToll(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Toll, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByToll(ByVal searchValue As String) As TB_DetentionBaseCollection
            Return FilterByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByToll(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Return FilterByToll(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIsBase(ByVal searchValue As System.String) As TB_DetentionBaseCollection
            Return FilterByIsBase(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.IsBase, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_DetentionBaseCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Currency, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByClause(ByVal searchValue As System.String) As TB_DetentionBaseCollection
            Return FilterByClause(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClause(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Clause, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFClause(ByVal searchValue As System.String) As TB_DetentionBaseCollection
            Return FilterByFClause(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFClause(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.FClause, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_DetentionBaseCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseCollection
            Dim retCollection = New TB_DetentionBaseCollection()
            Dim _TB_DetentionBase As TB_DetentionBase

            For Each _TB_DetentionBase In Me.List
                If Match(comparer, _TB_DetentionBase.Line, searchValue) Then
                    retCollection.Add(_TB_DetentionBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByImpExp(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ImpExp"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByApplyDate(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ApplyDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByValidity(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Validity"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTax(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Tax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByToll(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Toll"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsBase(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsBase"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClause(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Clause"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFClause(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FClause"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_DetentionBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_DetentionBaseDetails))>public MustInherit class TB_DetentionBaseDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_DetentionBaseDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_DetentionBaseDetails
            Get
                return CType(Me.List(index),TB_DetentionBaseDetails)
            End Get
            Set(ByVal Value As TB_DetentionBaseDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DetentionBaseDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_DetentionBaseDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DetentionBaseDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                if  Match(comparer,_TB_DetentionBaseDetails(propertyName) , searchValue) then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_DetentionBaseDetails As TB_DetentionBaseDetails) As System.Int32
            Return Me.List.Add(newTB_DetentionBaseDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_DetentionBaseDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.ID, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

        Public Function FindByBaseID(ByVal searchValue As System.Guid) As TB_DetentionBaseDetails
            Return FindByBaseID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBaseID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.BaseID, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_DetentionBaseDetails
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.CnType, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

        Public Function FindByDayFrom(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_DetentionBaseDetails
            Return FindByDayFrom(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDayFrom(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.DayFrom, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByDayFrom(ByVal searchValue As String) As TB_DetentionBaseDetails
            Return FindByDayFrom(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDayFrom(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Return FindByDayFrom(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDayTo(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_DetentionBaseDetails
            Return FindByDayTo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDayTo(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.DayTo, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByDayTo(ByVal searchValue As String) As TB_DetentionBaseDetails
            Return FindByDayTo(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDayTo(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Return FindByDayTo(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DetentionBaseDetails
            Return FindByAmount20(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.Amount20, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount20(ByVal searchValue As String) As TB_DetentionBaseDetails
            Return FindByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Return FindByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DetentionBaseDetails
            Return FindByAmount40(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.Amount40, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount40(ByVal searchValue As String) As TB_DetentionBaseDetails
            Return FindByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Return FindByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DetentionBaseDetails
            Return FindByAmount45(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails
            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.Amount45, searchValue) Then Return _TB_DetentionBaseDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount45(ByVal searchValue As String) As TB_DetentionBaseDetails
            Return FindByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetails
            Return FindByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_DetentionBaseDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.ID, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBaseID(ByVal searchValue As System.Guid) As TB_DetentionBaseDetailsCollection
            Return FilterByBaseID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBaseID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.BaseID, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_DetentionBaseDetailsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.CnType, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDayFrom(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_DetentionBaseDetailsCollection
            Return FilterByDayFrom(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDayFrom(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.DayFrom, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByDayFrom(ByVal searchValue As String) As TB_DetentionBaseDetailsCollection
            Return FilterByDayFrom(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDayFrom(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Return FilterByDayFrom(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDayTo(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_DetentionBaseDetailsCollection
            Return FilterByDayTo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDayTo(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.DayTo, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByDayTo(ByVal searchValue As String) As TB_DetentionBaseDetailsCollection
            Return FilterByDayTo(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDayTo(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Return FilterByDayTo(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount20(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.Amount20, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount20(ByVal searchValue As String) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount40(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.Amount40, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount40(ByVal searchValue As String) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount45(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Dim retCollection = New TB_DetentionBaseDetailsCollection()
            Dim _TB_DetentionBaseDetails As TB_DetentionBaseDetails

            For Each _TB_DetentionBaseDetails In Me.List
                If Match(comparer, _TB_DetentionBaseDetails.Amount45, searchValue) Then
                    retCollection.Add(_TB_DetentionBaseDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount45(ByVal searchValue As String) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DetentionBaseDetailsCollection
            Return FilterByAmount45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBaseID(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BaseID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDayFrom(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DayFrom"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDayTo(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DayTo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount20(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount20"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount40(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount40"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount45(ByVal sortDirection As SortDirection) As TB_DetentionBaseDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount45"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Documets))>public MustInherit class TB_DocumetsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Documets))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Documets
            Get
                return CType(Me.List(index),TB_Documets)
            End Get
            Set(ByVal Value As TB_Documets)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DocumetsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DocumetsCollection
            Dim retCollection = New TB_DocumetsCollection()
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets(propertyName), searchValue) Then
                    retCollection.Add(_TB_Documets)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_DocumetsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_DocumetsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Documets
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Documets
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                if  Match(comparer,_TB_Documets(propertyName) , searchValue) then Return _TB_Documets
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Documets As TB_Documets) As System.Int32
            Return Me.List.Add(newTB_Documets)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Documets
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Documets
            Dim _TB_Documets As TB_Documets
            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.ID, searchValue) Then Return _TB_Documets
            Next

            Return Nothing
        End Function

        Public Function FindByLineCode(ByVal searchValue As System.String) As TB_Documets
            Return FindByLineCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLineCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Documets
            Dim _TB_Documets As TB_Documets
            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.LineCode, searchValue) Then Return _TB_Documets
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentType(ByVal searchValue As System.String) As TB_Documets
            Return FindByDocumentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Documets
            Dim _TB_Documets As TB_Documets
            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.DocumentType, searchValue) Then Return _TB_Documets
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_Documets
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Documets
            Dim _TB_Documets As TB_Documets
            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.Remarks, searchValue) Then Return _TB_Documets
            Next

            Return Nothing
        End Function

        Public Function FindByFreeDocument(ByVal searchValue As System.String) As TB_Documets
            Return FindByFreeDocument(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFreeDocument(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Documets
            Dim _TB_Documets As TB_Documets
            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.FreeDocument, searchValue) Then Return _TB_Documets
            Next

            Return Nothing
        End Function

        Public Function FindByPaperSize(ByVal searchValue As System.String) As TB_Documets
            Return FindByPaperSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaperSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Documets
            Dim _TB_Documets As TB_Documets
            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.PaperSize, searchValue) Then Return _TB_Documets
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_DocumetsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DocumetsCollection
            Dim retCollection = New TB_DocumetsCollection()
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.ID, searchValue) Then
                    retCollection.Add(_TB_Documets)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLineCode(ByVal searchValue As System.String) As TB_DocumetsCollection
            Return FilterByLineCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLineCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsCollection
            Dim retCollection = New TB_DocumetsCollection()
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.LineCode, searchValue) Then
                    retCollection.Add(_TB_Documets)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentType(ByVal searchValue As System.String) As TB_DocumetsCollection
            Return FilterByDocumentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsCollection
            Dim retCollection = New TB_DocumetsCollection()
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.DocumentType, searchValue) Then
                    retCollection.Add(_TB_Documets)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_DocumetsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsCollection
            Dim retCollection = New TB_DocumetsCollection()
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.Remarks, searchValue) Then
                    retCollection.Add(_TB_Documets)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFreeDocument(ByVal searchValue As System.String) As TB_DocumetsCollection
            Return FilterByFreeDocument(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFreeDocument(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsCollection
            Dim retCollection = New TB_DocumetsCollection()
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.FreeDocument, searchValue) Then
                    retCollection.Add(_TB_Documets)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaperSize(ByVal searchValue As System.String) As TB_DocumetsCollection
            Return FilterByPaperSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaperSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsCollection
            Dim retCollection = New TB_DocumetsCollection()
            Dim _TB_Documets As TB_Documets

            For Each _TB_Documets In Me.List
                If Match(comparer, _TB_Documets.PaperSize, searchValue) Then
                    retCollection.Add(_TB_Documets)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_DocumetsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLineCode(ByVal sortDirection As SortDirection) As TB_DocumetsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LineCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentType(ByVal sortDirection As SortDirection) As TB_DocumetsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_DocumetsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFreeDocument(ByVal sortDirection As SortDirection) As TB_DocumetsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FreeDocument"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaperSize(ByVal sortDirection As SortDirection) As TB_DocumetsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaperSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_DocumetsDetail))>public MustInherit class TB_DocumetsDetailCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_DocumetsDetail))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_DocumetsDetail
            Get
                return CType(Me.List(index),TB_DocumetsDetail)
            End Get
            Set(ByVal Value As TB_DocumetsDetail)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DocumetsDetailCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail(propertyName), searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_DocumetsDetailCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_DocumetsDetail
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                if  Match(comparer,_TB_DocumetsDetail(propertyName) , searchValue) then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_DocumetsDetail As TB_DocumetsDetail) As System.Int32
            Return Me.List.Add(newTB_DocumetsDetail)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_DocumetsDetail
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.ID, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentID(ByVal searchValue As System.Guid) As TB_DocumetsDetail
            Return FindByDocumentID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.DocumentID, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByFieldDescription(ByVal searchValue As System.String) As TB_DocumetsDetail
            Return FindByFieldDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFieldDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FieldDescription, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByFieldName(ByVal searchValue As System.String) As TB_DocumetsDetail
            Return FindByFieldName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFieldName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FieldName, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByVisible(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetail
            Return FindByVisible(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVisible(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.Visible, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByVisible(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindByVisible(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByVisible(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindByVisible(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBynTop(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetail
            Return FindBynTop(searchValue, CompareType.Exact)
        End Function


        Public Function FindBynTop(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nTop, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindBynTop(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindBynTop(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBynTop(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindBynTop(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBynLeft(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetail
            Return FindBynLeft(searchValue, CompareType.Exact)
        End Function


        Public Function FindBynLeft(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nLeft, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindBynLeft(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindBynLeft(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBynLeft(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindBynLeft(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBynHight(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetail
            Return FindBynHight(searchValue, CompareType.Exact)
        End Function


        Public Function FindBynHight(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nHight, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindBynHight(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindBynHight(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBynHight(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindBynHight(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBynWidth(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetail
            Return FindBynWidth(searchValue, CompareType.Exact)
        End Function


        Public Function FindBynWidth(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nWidth, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindBynWidth(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindBynWidth(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBynWidth(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindBynWidth(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFontName(ByVal searchValue As System.String) As TB_DocumetsDetail
            Return FindByFontName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFontName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontName, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

        Public Function FindByFontSize(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DocumetsDetail
            Return FindByFontSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFontSize(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontSize, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFontSize(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindByFontSize(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFontSize(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindByFontSize(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFontItalic(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetail
            Return FindByFontItalic(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFontItalic(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontItalic, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByFontItalic(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindByFontItalic(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFontItalic(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindByFontItalic(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFontUnderLine(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetail
            Return FindByFontUnderLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFontUnderLine(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontUnderLine, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByFontUnderLine(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindByFontUnderLine(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFontUnderLine(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindByFontUnderLine(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFontBold(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetail
            Return FindByFontBold(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFontBold(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontBold, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByFontBold(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindByFontBold(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFontBold(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindByFontBold(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFontStrickOut(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetail
            Return FindByFontStrickOut(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFontStrickOut(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetail
            Dim _TB_DocumetsDetail As TB_DocumetsDetail
            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontStrickOut, searchValue) Then Return _TB_DocumetsDetail
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByFontStrickOut(ByVal searchValue As String) As TB_DocumetsDetail
            Return FindByFontStrickOut(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFontStrickOut(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetail
            Return FindByFontStrickOut(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_DocumetsDetailCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.ID, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentID(ByVal searchValue As System.Guid) As TB_DocumetsDetailCollection
            Return FilterByDocumentID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.DocumentID, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFieldDescription(ByVal searchValue As System.String) As TB_DocumetsDetailCollection
            Return FilterByFieldDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFieldDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FieldDescription, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFieldName(ByVal searchValue As System.String) As TB_DocumetsDetailCollection
            Return FilterByFieldName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFieldName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FieldName, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVisible(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetailCollection
            Return FilterByVisible(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVisible(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.Visible, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByVisible(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterByVisible(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByVisible(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterByVisible(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterBynTop(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetailCollection
            Return FilterBynTop(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBynTop(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nTop, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterBynTop(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterBynTop(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBynTop(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterBynTop(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterBynLeft(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetailCollection
            Return FilterBynLeft(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBynLeft(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nLeft, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterBynLeft(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterBynLeft(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBynLeft(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterBynLeft(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterBynHight(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetailCollection
            Return FilterBynHight(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBynHight(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nHight, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterBynHight(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterBynHight(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBynHight(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterBynHight(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterBynWidth(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_DocumetsDetailCollection
            Return FilterBynWidth(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBynWidth(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.nWidth, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterBynWidth(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterBynWidth(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBynWidth(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterBynWidth(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFontName(ByVal searchValue As System.String) As TB_DocumetsDetailCollection
            Return FilterByFontName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFontName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontName, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFontSize(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_DocumetsDetailCollection
            Return FilterByFontSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFontSize(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontSize, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFontSize(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterByFontSize(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFontSize(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterByFontSize(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFontItalic(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetailCollection
            Return FilterByFontItalic(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFontItalic(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontItalic, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByFontItalic(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterByFontItalic(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFontItalic(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterByFontItalic(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFontUnderLine(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetailCollection
            Return FilterByFontUnderLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFontUnderLine(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontUnderLine, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByFontUnderLine(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterByFontUnderLine(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFontUnderLine(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterByFontUnderLine(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFontBold(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetailCollection
            Return FilterByFontBold(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFontBold(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontBold, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByFontBold(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterByFontBold(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFontBold(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterByFontBold(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFontStrickOut(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_DocumetsDetailCollection
            Return FilterByFontStrickOut(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFontStrickOut(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Dim retCollection = New TB_DocumetsDetailCollection()
            Dim _TB_DocumetsDetail As TB_DocumetsDetail

            For Each _TB_DocumetsDetail In Me.List
                If Match(comparer, _TB_DocumetsDetail.FontStrickOut, searchValue) Then
                    retCollection.Add(_TB_DocumetsDetail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByFontStrickOut(ByVal searchValue As String) As TB_DocumetsDetailCollection
            Return FilterByFontStrickOut(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFontStrickOut(ByVal searchValue As String, ByVal comparer As CompareType) As TB_DocumetsDetailCollection
            Return FilterByFontStrickOut(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentID(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFieldDescription(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FieldDescription"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFieldName(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FieldName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVisible(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Visible"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBynTop(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("nTop"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBynLeft(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("nLeft"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBynHight(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("nHight"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBynWidth(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("nWidth"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFontName(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FontName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFontSize(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FontSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFontItalic(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FontItalic"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFontUnderLine(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FontUnderLine"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFontBold(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FontBold"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFontStrickOut(ByVal sortDirection As SortDirection) As TB_DocumetsDetailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FontStrickOut"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_EcsContainers))>public MustInherit class TB_EcsContainersCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_EcsContainers))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_EcsContainers
            Get
                return CType(Me.List(index),TB_EcsContainers)
            End Get
            Set(ByVal Value As TB_EcsContainers)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EcsContainersCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers(propertyName), searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_EcsContainersCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EcsContainers
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                if  Match(comparer,_TB_EcsContainers(propertyName) , searchValue) then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_EcsContainers As TB_EcsContainers) As System.Int32
            Return Me.List.Add(newTB_EcsContainers)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_EcsContainers
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.ID, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.Line, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByInVoyageID(ByVal searchValue As System.Guid) As TB_EcsContainers
            Return FindByInVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InVoyageID, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByCntrNo(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.CntrNo, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByCnSize(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.CnSize, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.CnType, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByDischargeTo(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByDischargeTo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDischargeTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.DischargeTo, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByInStatus(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByInStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InStatus, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByInCellNo(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByInCellNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInCellNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InCellNo, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByBookingID(ByVal searchValue As System.Guid) As TB_EcsContainers
            Return FindByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.BookingID, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByOutVoyageID(ByVal searchValue As System.Guid) As TB_EcsContainers
            Return FindByOutVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOutVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.OutVoyageID, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByOutStatus(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByOutStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOutStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.OutStatus, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByOutCellNo(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByOutCellNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOutCellNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.OutCellNo, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByReturnTo(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByReturnTo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReturnTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.ReturnTo, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByDestination(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByDestination(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDestination(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.Destination, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByLastDepot(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByLastDepot(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLastDepot(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.LastDepot, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByLastStatus(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByLastStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLastStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.LastStatus, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByLastStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_EcsContainers
            Return FindByLastStatusDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLastStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.LastStatusDate, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByLastStatusDate(ByVal searchValue As String) As TB_EcsContainers
            Return FindByLastStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByLastStatusDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsContainers
            Return FindByLastStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIsTerminate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_EcsContainers
            Return FindByIsTerminate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsTerminate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.IsTerminate, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsTerminate(ByVal searchValue As String) As TB_EcsContainers
            Return FindByIsTerminate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsTerminate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsContainers
            Return FindByIsTerminate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByExportPermit(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByExportPermit(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExportPermit(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.ExportPermit, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindByInDjwazNo(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindByInDjwazNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInDjwazNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InDjwazNo, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindBySOC(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.SOC, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FindBySpecialOpr(ByVal searchValue As System.String) As TB_EcsContainers
            Return FindBySpecialOpr(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySpecialOpr(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainers
            Dim _TB_EcsContainers As TB_EcsContainers
            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.SpecialOpr, searchValue) Then Return _TB_EcsContainers
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_EcsContainersCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.ID, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.Line, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInVoyageID(ByVal searchValue As System.Guid) As TB_EcsContainersCollection
            Return FilterByInVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InVoyageID, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrNo(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.CntrNo, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnSize(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.CnSize, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.CnType, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDischargeTo(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByDischargeTo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDischargeTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.DischargeTo, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInStatus(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByInStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InStatus, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInCellNo(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByInCellNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInCellNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InCellNo, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingID(ByVal searchValue As System.Guid) As TB_EcsContainersCollection
            Return FilterByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.BookingID, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByOutVoyageID(ByVal searchValue As System.Guid) As TB_EcsContainersCollection
            Return FilterByOutVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOutVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.OutVoyageID, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByOutStatus(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByOutStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOutStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.OutStatus, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByOutCellNo(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByOutCellNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOutCellNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.OutCellNo, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReturnTo(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByReturnTo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReturnTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.ReturnTo, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDestination(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByDestination(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDestination(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.Destination, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLastDepot(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByLastDepot(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLastDepot(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.LastDepot, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLastStatus(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByLastStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLastStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.LastStatus, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLastStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_EcsContainersCollection
            Return FilterByLastStatusDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLastStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.LastStatusDate, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByLastStatusDate(ByVal searchValue As String) As TB_EcsContainersCollection
            Return FilterByLastStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByLastStatusDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Return FilterByLastStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIsTerminate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_EcsContainersCollection
            Return FilterByIsTerminate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsTerminate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.IsTerminate, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsTerminate(ByVal searchValue As String) As TB_EcsContainersCollection
            Return FilterByIsTerminate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsTerminate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Return FilterByIsTerminate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByExportPermit(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByExportPermit(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExportPermit(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.ExportPermit, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInDjwazNo(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterByInDjwazNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInDjwazNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.InDjwazNo, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySOC(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.SOC, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySpecialOpr(ByVal searchValue As System.String) As TB_EcsContainersCollection
            Return FilterBySpecialOpr(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySpecialOpr(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsContainersCollection
            Dim retCollection = New TB_EcsContainersCollection()
            Dim _TB_EcsContainers As TB_EcsContainers

            For Each _TB_EcsContainers In Me.List
                If Match(comparer, _TB_EcsContainers.SpecialOpr, searchValue) Then
                    retCollection.Add(_TB_EcsContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInVoyageID(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InVoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrNo(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnSize(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDischargeTo(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DischargeTo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInStatus(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInCellNo(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InCellNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingID(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOutVoyageID(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OutVoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOutStatus(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OutStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOutCellNo(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OutCellNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReturnTo(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReturnTo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDestination(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Destination"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLastDepot(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LastDepot"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLastStatus(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LastStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLastStatusDate(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LastStatusDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsTerminate(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsTerminate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExportPermit(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExportPermit"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInDjwazNo(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InDjwazNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySOC(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SOC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySpecialOpr(ByVal sortDirection As SortDirection) As TB_EcsContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SpecialOpr"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_EcsMoves))>public MustInherit class TB_EcsMovesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_EcsMoves))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_EcsMoves
            Get
                return CType(Me.List(index),TB_EcsMoves)
            End Get
            Set(ByVal Value As TB_EcsMoves)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EcsMovesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves(propertyName), searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_EcsMovesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EcsMoves
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                if  Match(comparer,_TB_EcsMoves(propertyName) , searchValue) then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_EcsMoves As TB_EcsMoves) As System.Int32
            Return Me.List.Add(newTB_EcsMoves)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_EcsMoves
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.ID, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_EcsMoves
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.CntrID, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

        Public Function FindByStatus(ByVal searchValue As System.String) As TB_EcsMoves
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.Status, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

        Public Function FindByStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_EcsMoves
            Return FindByStatusDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.StatusDate, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByStatusDate(ByVal searchValue As String) As TB_EcsMoves
            Return FindByStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByStatusDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsMoves
            Return FindByStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByStatusDateToLine(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_EcsMoves
            Return FindByStatusDateToLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatusDateToLine(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.StatusDateToLine, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByStatusDateToLine(ByVal searchValue As String) As TB_EcsMoves
            Return FindByStatusDateToLine(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByStatusDateToLine(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsMoves
            Return FindByStatusDateToLine(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDepot(ByVal searchValue As System.String) As TB_EcsMoves
            Return FindByDepot(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDepot(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.Depot, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_EcsMoves
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.Remarks, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

        Public Function FindByIsReported(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_EcsMoves
            Return FindByIsReported(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsReported(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_EcsMoves
            Dim _TB_EcsMoves As TB_EcsMoves
            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.IsReported, searchValue) Then Return _TB_EcsMoves
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsReported(ByVal searchValue As String) As TB_EcsMoves
            Return FindByIsReported(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsReported(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsMoves
            Return FindByIsReported(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_EcsMovesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.ID, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_EcsMovesCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.CntrID, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_EcsMovesCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.Status, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_EcsMovesCollection
            Return FilterByStatusDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatusDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.StatusDate, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByStatusDate(ByVal searchValue As String) As TB_EcsMovesCollection
            Return FilterByStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByStatusDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Return FilterByStatusDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByStatusDateToLine(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_EcsMovesCollection
            Return FilterByStatusDateToLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatusDateToLine(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.StatusDateToLine, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByStatusDateToLine(ByVal searchValue As String) As TB_EcsMovesCollection
            Return FilterByStatusDateToLine(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByStatusDateToLine(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Return FilterByStatusDateToLine(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDepot(ByVal searchValue As System.String) As TB_EcsMovesCollection
            Return FilterByDepot(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDepot(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.Depot, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_EcsMovesCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.Remarks, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsReported(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_EcsMovesCollection
            Return FilterByIsReported(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsReported(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Dim retCollection = New TB_EcsMovesCollection()
            Dim _TB_EcsMoves As TB_EcsMoves

            For Each _TB_EcsMoves In Me.List
                If Match(comparer, _TB_EcsMoves.IsReported, searchValue) Then
                    retCollection.Add(_TB_EcsMoves)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsReported(ByVal searchValue As String) As TB_EcsMovesCollection
            Return FilterByIsReported(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsReported(ByVal searchValue As String, ByVal comparer As CompareType) As TB_EcsMovesCollection
            Return FilterByIsReported(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatusDate(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("StatusDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatusDateToLine(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("StatusDateToLine"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDepot(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Depot"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsReported(ByVal sortDirection As SortDirection) As TB_EcsMovesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsReported"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_EcsReserveContainers))>public MustInherit class TB_EcsReserveContainersCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_EcsReserveContainers))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_EcsReserveContainers
            Get
                return CType(Me.List(index),TB_EcsReserveContainers)
            End Get
            Set(ByVal Value As TB_EcsReserveContainers)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EcsReserveContainersCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EcsReserveContainersCollection
            Dim retCollection = New TB_EcsReserveContainersCollection()
            Dim _TB_EcsReserveContainers As TB_EcsReserveContainers

            For Each _TB_EcsReserveContainers In Me.List
                If Match(comparer, _TB_EcsReserveContainers(propertyName), searchValue) Then
                    retCollection.Add(_TB_EcsReserveContainers)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_EcsReserveContainersCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_EcsReserveContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EcsReserveContainers
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EcsReserveContainers
            Dim _TB_EcsReserveContainers As TB_EcsReserveContainers

            For Each _TB_EcsReserveContainers In Me.List
                if  Match(comparer,_TB_EcsReserveContainers(propertyName) , searchValue) then Return _TB_EcsReserveContainers
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_EcsReserveContainers As TB_EcsReserveContainers) As System.Int32
            Return Me.List.Add(newTB_EcsReserveContainers)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_EcsReserveContainers
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsReserveContainers
            Dim _TB_EcsReserveContainers As TB_EcsReserveContainers
            For Each _TB_EcsReserveContainers In Me.List
                If Match(comparer, _TB_EcsReserveContainers.ID, searchValue) Then Return _TB_EcsReserveContainers
            Next

            Return Nothing
        End Function

        Public Function FindByCntrNo(ByVal searchValue As System.String) As TB_EcsReserveContainers
            Return FindByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsReserveContainers
            Dim _TB_EcsReserveContainers As TB_EcsReserveContainers
            For Each _TB_EcsReserveContainers In Me.List
                If Match(comparer, _TB_EcsReserveContainers.CntrNo, searchValue) Then Return _TB_EcsReserveContainers
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_EcsReserveContainersCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EcsReserveContainersCollection
            Dim retCollection = New TB_EcsReserveContainersCollection()
            Dim _TB_EcsReserveContainers As TB_EcsReserveContainers

            For Each _TB_EcsReserveContainers In Me.List
                If Match(comparer, _TB_EcsReserveContainers.ID, searchValue) Then
                    retCollection.Add(_TB_EcsReserveContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrNo(ByVal searchValue As System.String) As TB_EcsReserveContainersCollection
            Return FilterByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EcsReserveContainersCollection
            Dim retCollection = New TB_EcsReserveContainersCollection()
            Dim _TB_EcsReserveContainers As TB_EcsReserveContainers

            For Each _TB_EcsReserveContainers In Me.List
                If Match(comparer, _TB_EcsReserveContainers.CntrNo, searchValue) Then
                    retCollection.Add(_TB_EcsReserveContainers)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_EcsReserveContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrNo(ByVal sortDirection As SortDirection) As TB_EcsReserveContainersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_EventMail))>public MustInherit class TB_EventMailCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_EventMail))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_EventMail
            Get
                return CType(Me.List(index),TB_EventMail)
            End Get
            Set(ByVal Value As TB_EventMail)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EventMailCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail(propertyName), searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_EventMailCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_EventMail
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                if  Match(comparer,_TB_EventMail(propertyName) , searchValue) then Return _TB_EventMail
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_EventMail As TB_EventMail) As System.Int32
            Return Me.List.Add(newTB_EventMail)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_EventMail
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail
            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.ID, searchValue) Then Return _TB_EventMail
            Next

            Return Nothing
        End Function

        Public Function FindByEventCode(ByVal searchValue As System.String) As TB_EventMail
            Return FindByEventCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEventCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail
            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.EventCode, searchValue) Then Return _TB_EventMail
            Next

            Return Nothing
        End Function

        Public Function FindByMailTo(ByVal searchValue As System.String) As TB_EventMail
            Return FindByMailTo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail
            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.MailTo, searchValue) Then Return _TB_EventMail
            Next

            Return Nothing
        End Function

        Public Function FindByMailCC(ByVal searchValue As System.String) As TB_EventMail
            Return FindByMailCC(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail
            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.MailCC, searchValue) Then Return _TB_EventMail
            Next

            Return Nothing
        End Function

        Public Function FindByMailBCC(ByVal searchValue As System.String) As TB_EventMail
            Return FindByMailBCC(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailBCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail
            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.MailBCC, searchValue) Then Return _TB_EventMail
            Next

            Return Nothing
        End Function

        Public Function FindByPORT(ByVal searchValue As System.String) As TB_EventMail
            Return FindByPORT(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPORT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail
            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.PORT, searchValue) Then Return _TB_EventMail
            Next

            Return Nothing
        End Function

        Public Function FindByHTMLContent(ByVal searchValue As System.String) As TB_EventMail
            Return FindByHTMLContent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByHTMLContent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMail
            Dim _TB_EventMail As TB_EventMail
            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.HTMLContent, searchValue) Then Return _TB_EventMail
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_EventMailCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.ID, searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEventCode(ByVal searchValue As System.String) As TB_EventMailCollection
            Return FilterByEventCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEventCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.EventCode, searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMailTo(ByVal searchValue As System.String) As TB_EventMailCollection
            Return FilterByMailTo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.MailTo, searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMailCC(ByVal searchValue As System.String) As TB_EventMailCollection
            Return FilterByMailCC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.MailCC, searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMailBCC(ByVal searchValue As System.String) As TB_EventMailCollection
            Return FilterByMailBCC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailBCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.MailBCC, searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPORT(ByVal searchValue As System.String) As TB_EventMailCollection
            Return FilterByPORT(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPORT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.PORT, searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByHTMLContent(ByVal searchValue As System.String) As TB_EventMailCollection
            Return FilterByHTMLContent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByHTMLContent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_EventMailCollection
            Dim retCollection = New TB_EventMailCollection()
            Dim _TB_EventMail As TB_EventMail

            For Each _TB_EventMail In Me.List
                If Match(comparer, _TB_EventMail.HTMLContent, searchValue) Then
                    retCollection.Add(_TB_EventMail)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEventCode(ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EventCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailTo(ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailTo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailCC(ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailCC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailBCC(ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailBCC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPORT(ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PORT"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByHTMLContent(ByVal sortDirection As SortDirection) As TB_EventMailCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("HTMLContent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Exchange))>public MustInherit class TB_ExchangeCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Exchange))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Exchange
            Get
                return CType(Me.List(index),TB_Exchange)
            End Get
            Set(ByVal Value As TB_Exchange)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExchangeCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExchangeCollection
            Dim retCollection = New TB_ExchangeCollection()
            Dim _TB_Exchange As TB_Exchange

            For Each _TB_Exchange In Me.List
                If Match(comparer, _TB_Exchange(propertyName), searchValue) Then
                    retCollection.Add(_TB_Exchange)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ExchangeCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ExchangeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Exchange
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Exchange
            Dim _TB_Exchange As TB_Exchange

            For Each _TB_Exchange In Me.List
                if  Match(comparer,_TB_Exchange(propertyName) , searchValue) then Return _TB_Exchange
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Exchange As TB_Exchange) As System.Int32
            Return Me.List.Add(newTB_Exchange)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Exchange
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Exchange
            Dim _TB_Exchange As TB_Exchange
            For Each _TB_Exchange In Me.List
                If Match(comparer, _TB_Exchange.ID, searchValue) Then Return _TB_Exchange
            Next

            Return Nothing
        End Function

        Public Function FindByExchangeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Exchange
            Return FindByExchangeDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExchangeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Exchange
            Dim _TB_Exchange As TB_Exchange
            For Each _TB_Exchange In Me.List
                If Match(comparer, _TB_Exchange.ExchangeDate, searchValue) Then Return _TB_Exchange
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByExchangeDate(ByVal searchValue As String) As TB_Exchange
            Return FindByExchangeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByExchangeDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Exchange
            Return FindByExchangeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ExchangeCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExchangeCollection
            Dim retCollection = New TB_ExchangeCollection()
            Dim _TB_Exchange As TB_Exchange

            For Each _TB_Exchange In Me.List
                If Match(comparer, _TB_Exchange.ID, searchValue) Then
                    retCollection.Add(_TB_Exchange)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByExchangeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ExchangeCollection
            Return FilterByExchangeDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExchangeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ExchangeCollection
            Dim retCollection = New TB_ExchangeCollection()
            Dim _TB_Exchange As TB_Exchange

            For Each _TB_Exchange In Me.List
                If Match(comparer, _TB_Exchange.ExchangeDate, searchValue) Then
                    retCollection.Add(_TB_Exchange)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByExchangeDate(ByVal searchValue As String) As TB_ExchangeCollection
            Return FilterByExchangeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByExchangeDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExchangeCollection
            Return FilterByExchangeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ExchangeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExchangeDate(ByVal sortDirection As SortDirection) As TB_ExchangeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExchangeDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ExchangeDetails))>public MustInherit class TB_ExchangeDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ExchangeDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ExchangeDetails
            Get
                return CType(Me.List(index),TB_ExchangeDetails)
            End Get
            Set(ByVal Value As TB_ExchangeDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExchangeDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Dim retCollection = New TB_ExchangeDetailsCollection()
            Dim _TB_ExchangeDetails As TB_ExchangeDetails

            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_ExchangeDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ExchangeDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ExchangeDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExchangeDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExchangeDetails
            Dim _TB_ExchangeDetails As TB_ExchangeDetails

            For Each _TB_ExchangeDetails In Me.List
                if  Match(comparer,_TB_ExchangeDetails(propertyName) , searchValue) then Return _TB_ExchangeDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ExchangeDetails As TB_ExchangeDetails) As System.Int32
            Return Me.List.Add(newTB_ExchangeDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ExchangeDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExchangeDetails
            Dim _TB_ExchangeDetails As TB_ExchangeDetails
            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.ID, searchValue) Then Return _TB_ExchangeDetails
            Next

            Return Nothing
        End Function

        Public Function FindByMasterID(ByVal searchValue As System.Guid) As TB_ExchangeDetails
            Return FindByMasterID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMasterID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExchangeDetails
            Dim _TB_ExchangeDetails As TB_ExchangeDetails
            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.MasterID, searchValue) Then Return _TB_ExchangeDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCurCode(ByVal searchValue As System.String) As TB_ExchangeDetails
            Return FindByCurCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExchangeDetails
            Dim _TB_ExchangeDetails As TB_ExchangeDetails
            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.CurCode, searchValue) Then Return _TB_ExchangeDetails
            Next

            Return Nothing
        End Function

        Public Function FindByTHCRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ExchangeDetails
            Return FindByTHCRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTHCRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ExchangeDetails
            Dim _TB_ExchangeDetails As TB_ExchangeDetails
            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.THCRate, searchValue) Then Return _TB_ExchangeDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTHCRate(ByVal searchValue As String) As TB_ExchangeDetails
            Return FindByTHCRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTHCRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExchangeDetails
            Return FindByTHCRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFRTRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ExchangeDetails
            Return FindByFRTRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFRTRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ExchangeDetails
            Dim _TB_ExchangeDetails As TB_ExchangeDetails
            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.FRTRate, searchValue) Then Return _TB_ExchangeDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByFRTRate(ByVal searchValue As String) As TB_ExchangeDetails
            Return FindByFRTRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFRTRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExchangeDetails
            Return FindByFRTRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ExchangeDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Dim retCollection = New TB_ExchangeDetailsCollection()
            Dim _TB_ExchangeDetails As TB_ExchangeDetails

            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.ID, searchValue) Then
                    retCollection.Add(_TB_ExchangeDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMasterID(ByVal searchValue As System.Guid) As TB_ExchangeDetailsCollection
            Return FilterByMasterID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMasterID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Dim retCollection = New TB_ExchangeDetailsCollection()
            Dim _TB_ExchangeDetails As TB_ExchangeDetails

            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.MasterID, searchValue) Then
                    retCollection.Add(_TB_ExchangeDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurCode(ByVal searchValue As System.String) As TB_ExchangeDetailsCollection
            Return FilterByCurCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Dim retCollection = New TB_ExchangeDetailsCollection()
            Dim _TB_ExchangeDetails As TB_ExchangeDetails

            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.CurCode, searchValue) Then
                    retCollection.Add(_TB_ExchangeDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTHCRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ExchangeDetailsCollection
            Return FilterByTHCRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTHCRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Dim retCollection = New TB_ExchangeDetailsCollection()
            Dim _TB_ExchangeDetails As TB_ExchangeDetails

            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.THCRate, searchValue) Then
                    retCollection.Add(_TB_ExchangeDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTHCRate(ByVal searchValue As String) As TB_ExchangeDetailsCollection
            Return FilterByTHCRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTHCRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Return FilterByTHCRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFRTRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ExchangeDetailsCollection
            Return FilterByFRTRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFRTRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Dim retCollection = New TB_ExchangeDetailsCollection()
            Dim _TB_ExchangeDetails As TB_ExchangeDetails

            For Each _TB_ExchangeDetails In Me.List
                If Match(comparer, _TB_ExchangeDetails.FRTRate, searchValue) Then
                    retCollection.Add(_TB_ExchangeDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByFRTRate(ByVal searchValue As String) As TB_ExchangeDetailsCollection
            Return FilterByFRTRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFRTRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExchangeDetailsCollection
            Return FilterByFRTRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ExchangeDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMasterID(ByVal sortDirection As SortDirection) As TB_ExchangeDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MasterID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurCode(ByVal sortDirection As SortDirection) As TB_ExchangeDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CurCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTHCRate(ByVal sortDirection As SortDirection) As TB_ExchangeDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("THCRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFRTRate(ByVal sortDirection As SortDirection) As TB_ExchangeDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FRTRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ExpInvoice))>public MustInherit class TB_ExpInvoiceCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ExpInvoice))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ExpInvoice
            Get
                return CType(Me.List(index),TB_ExpInvoice)
            End Get
            Set(ByVal Value As TB_ExpInvoice)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExpInvoiceCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice(propertyName), searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ExpInvoiceCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExpInvoice
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                if  Match(comparer,_TB_ExpInvoice(propertyName) , searchValue) then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ExpInvoice As TB_ExpInvoice) As System.Int32
            Return Me.List.Add(newTB_ExpInvoice)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ExpInvoice
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ID, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_ExpInvoice
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.BLID, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceNo(ByVal searchValue As System.String) As TB_ExpInvoice
            Return FindByInvoiceNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.InvoiceNo, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_ExpInvoice
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.Description, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ExpInvoice
            Return FindByIssueTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.IssueTime, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByIssueTime(ByVal searchValue As String) As TB_ExpInvoice
            Return FindByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIssueTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoice
            Return FindByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIssueBy(ByVal searchValue As System.String) As TB_ExpInvoice
            Return FindByIssueBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.IssueBy, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ExpInvoice
            Return FindByConfirmTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ConfirmTime, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByConfirmTime(ByVal searchValue As String) As TB_ExpInvoice
            Return FindByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByConfirmTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoice
            Return FindByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByConfirmBy(ByVal searchValue As System.String) As TB_ExpInvoice
            Return FindByConfirmBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByConfirmBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ConfirmBy, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByStatus(ByVal searchValue As System.String) As TB_ExpInvoice
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.Status, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByIssueOffice(ByVal searchValue As System.String) As TB_ExpInvoice
            Return FindByIssueOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.IssueOffice, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByConfirmOffice(ByVal searchValue As System.String) As TB_ExpInvoice
            Return FindByConfirmOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByConfirmOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoice
            Dim _TB_ExpInvoice As TB_ExpInvoice
            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ConfirmOffice, searchValue) Then Return _TB_ExpInvoice
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ExpInvoiceCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ID, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_ExpInvoiceCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.BLID, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceNo(ByVal searchValue As System.String) As TB_ExpInvoiceCollection
            Return FilterByInvoiceNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.InvoiceNo, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_ExpInvoiceCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.Description, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ExpInvoiceCollection
            Return FilterByIssueTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.IssueTime, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByIssueTime(ByVal searchValue As String) As TB_ExpInvoiceCollection
            Return FilterByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIssueTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Return FilterByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIssueBy(ByVal searchValue As System.String) As TB_ExpInvoiceCollection
            Return FilterByIssueBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.IssueBy, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ExpInvoiceCollection
            Return FilterByConfirmTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ConfirmTime, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByConfirmTime(ByVal searchValue As String) As TB_ExpInvoiceCollection
            Return FilterByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByConfirmTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Return FilterByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByConfirmBy(ByVal searchValue As System.String) As TB_ExpInvoiceCollection
            Return FilterByConfirmBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByConfirmBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ConfirmBy, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_ExpInvoiceCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.Status, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueOffice(ByVal searchValue As System.String) As TB_ExpInvoiceCollection
            Return FilterByIssueOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.IssueOffice, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByConfirmOffice(ByVal searchValue As System.String) As TB_ExpInvoiceCollection
            Return FilterByConfirmOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByConfirmOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceCollection
            Dim retCollection = New TB_ExpInvoiceCollection()
            Dim _TB_ExpInvoice As TB_ExpInvoice

            For Each _TB_ExpInvoice In Me.List
                If Match(comparer, _TB_ExpInvoice.ConfirmOffice, searchValue) Then
                    retCollection.Add(_TB_ExpInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceNo(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueTime(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueBy(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByConfirmTime(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ConfirmTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByConfirmBy(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ConfirmBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueOffice(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueOffice"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByConfirmOffice(ByVal sortDirection As SortDirection) As TB_ExpInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ConfirmOffice"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ExpInvoiceDetails))>public MustInherit class TB_ExpInvoiceDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ExpInvoiceDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ExpInvoiceDetails
            Get
                return CType(Me.List(index),TB_ExpInvoiceDetails)
            End Get
            Set(ByVal Value As TB_ExpInvoiceDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExpInvoiceDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ExpInvoiceDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExpInvoiceDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                if  Match(comparer,_TB_ExpInvoiceDetails(propertyName) , searchValue) then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ExpInvoiceDetails As TB_ExpInvoiceDetails) As System.Int32
            Return Me.List.Add(newTB_ExpInvoiceDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ExpInvoiceDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.ID, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceID(ByVal searchValue As System.Guid) As TB_ExpInvoiceDetails
            Return FindByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.InvoiceID, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_ExpInvoiceDetails
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Seq, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_ExpInvoiceDetails
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_ExpInvoiceDetails
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Remarks, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_ExpInvoiceDetails
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.ChargesCode, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_ExpInvoiceDetails
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Currency, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ExpInvoiceDetails
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Amount, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_ExpInvoiceDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ExpInvoiceDetails
            Return FindByIRRAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails
            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.IRRAmount, searchValue) Then Return _TB_ExpInvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByIRRAmount(ByVal searchValue As String) As TB_ExpInvoiceDetails
            Return FindByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIRRAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceDetails
            Return FindByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ExpInvoiceDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.ID, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid) As TB_ExpInvoiceDetailsCollection
            Return FilterByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.InvoiceID, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_ExpInvoiceDetailsCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Seq, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_ExpInvoiceDetailsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_ExpInvoiceDetailsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Remarks, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_ExpInvoiceDetailsCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_ExpInvoiceDetailsCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Currency, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ExpInvoiceDetailsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.Amount, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_ExpInvoiceDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ExpInvoiceDetailsCollection
            Return FilterByIRRAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Dim retCollection = New TB_ExpInvoiceDetailsCollection()
            Dim _TB_ExpInvoiceDetails As TB_ExpInvoiceDetails

            For Each _TB_ExpInvoiceDetails In Me.List
                If Match(comparer, _TB_ExpInvoiceDetails.IRRAmount, searchValue) Then
                    retCollection.Add(_TB_ExpInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByIRRAmount(ByVal searchValue As String) As TB_ExpInvoiceDetailsCollection
            Return FilterByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIRRAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpInvoiceDetailsCollection
            Return FilterByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceID(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIRRAmount(ByVal sortDirection As SortDirection) As TB_ExpInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IRRAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ExpRecivedItems))>public MustInherit class TB_ExpRecivedItemsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ExpRecivedItems))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ExpRecivedItems
            Get
                return CType(Me.List(index),TB_ExpRecivedItems)
            End Get
            Set(ByVal Value As TB_ExpRecivedItems)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExpRecivedItemsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems(propertyName), searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ExpRecivedItemsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ExpRecivedItems
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                if  Match(comparer,_TB_ExpRecivedItems(propertyName) , searchValue) then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ExpRecivedItems As TB_ExpRecivedItems) As System.Int32
            Return Me.List.Add(newTB_ExpRecivedItems)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ExpRecivedItems
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.ID, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceID(ByVal searchValue As System.Guid) As TB_ExpRecivedItems
            Return FindByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.InvoiceID, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_ExpRecivedItems
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Seq, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_ExpRecivedItems
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDescription(ByVal searchValue As System.String) As TB_ExpRecivedItems
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Description, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByPaymentType(ByVal searchValue As System.String) As TB_ExpRecivedItems
            Return FindByPaymentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaymentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.PaymentType, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByBank(ByVal searchValue As System.String) As TB_ExpRecivedItems
            Return FindByBank(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBank(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Bank, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_ExpRecivedItems
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Currency, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ExpRecivedItems
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Amount, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_ExpRecivedItems
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_ExpRecivedItems
            Return FindByIrrAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.IrrAmount, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByIrrAmount(ByVal searchValue As String) As TB_ExpRecivedItems
            Return FindByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIrrAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Return FindByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPaidDate(ByVal searchValue As System.String) As TB_ExpRecivedItems
            Return FindByPaidDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaidDate(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.PaidDate, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByPaidRef(ByVal searchValue As System.String) As TB_ExpRecivedItems
            Return FindByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.PaidRef, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByReceivedType(ByVal searchValue As System.String) As TB_ExpRecivedItems
            Return FindByReceivedType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReceivedType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItems
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems
            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.ReceivedType, searchValue) Then Return _TB_ExpRecivedItems
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ExpRecivedItemsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.ID, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid) As TB_ExpRecivedItemsCollection
            Return FilterByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.InvoiceID, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_ExpRecivedItemsCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Seq, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_ExpRecivedItemsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_ExpRecivedItemsCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Description, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaymentType(ByVal searchValue As System.String) As TB_ExpRecivedItemsCollection
            Return FilterByPaymentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaymentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.PaymentType, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBank(ByVal searchValue As System.String) As TB_ExpRecivedItemsCollection
            Return FilterByBank(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBank(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Bank, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_ExpRecivedItemsCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Currency, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_ExpRecivedItemsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.Amount, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_ExpRecivedItemsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_ExpRecivedItemsCollection
            Return FilterByIrrAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.IrrAmount, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByIrrAmount(ByVal searchValue As String) As TB_ExpRecivedItemsCollection
            Return FilterByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIrrAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Return FilterByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPaidDate(ByVal searchValue As System.String) As TB_ExpRecivedItemsCollection
            Return FilterByPaidDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaidDate(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.PaidDate, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaidRef(ByVal searchValue As System.String) As TB_ExpRecivedItemsCollection
            Return FilterByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.PaidRef, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReceivedType(ByVal searchValue As System.String) As TB_ExpRecivedItemsCollection
            Return FilterByReceivedType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReceivedType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ExpRecivedItemsCollection
            Dim retCollection = New TB_ExpRecivedItemsCollection()
            Dim _TB_ExpRecivedItems As TB_ExpRecivedItems

            For Each _TB_ExpRecivedItems In Me.List
                If Match(comparer, _TB_ExpRecivedItems.ReceivedType, searchValue) Then
                    retCollection.Add(_TB_ExpRecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceID(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaymentType(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaymentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBank(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Bank"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIrrAmount(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IrrAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaidDate(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaidDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaidRef(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaidRef"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReceivedType(ByVal sortDirection As SortDirection) As TB_ExpRecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReceivedType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_FaxActions))>public MustInherit class TB_FaxActionsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_FaxActions))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_FaxActions
            Get
                return CType(Me.List(index),TB_FaxActions)
            End Get
            Set(ByVal Value As TB_FaxActions)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_FaxActionsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions(propertyName), searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_FaxActionsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_FaxActions
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                if  Match(comparer,_TB_FaxActions(propertyName) , searchValue) then Return _TB_FaxActions
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_FaxActions As TB_FaxActions) As System.Int32
            Return Me.List.Add(newTB_FaxActions)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_FaxActions
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.ID, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentCode(ByVal searchValue As System.String) As TB_FaxActions
            Return FindByDocumentCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.DocumentCode, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_FaxActions
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.Description, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

        Public Function FindByDefualtFaxLine(ByVal searchValue As System.String) As TB_FaxActions
            Return FindByDefualtFaxLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDefualtFaxLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.DefualtFaxLine, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

        Public Function FindByRecipiantAsTo(ByVal searchValue As System.String) As TB_FaxActions
            Return FindByRecipiantAsTo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRecipiantAsTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.RecipiantAsTo, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

        Public Function FindByRecipiantAsCC(ByVal searchValue As System.String) As TB_FaxActions
            Return FindByRecipiantAsCC(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRecipiantAsCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.RecipiantAsCC, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

        Public Function FindByIsInAction(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_FaxActions
            Return FindByIsInAction(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsInAction(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.IsInAction, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsInAction(ByVal searchValue As String) As TB_FaxActions
            Return FindByIsInAction(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsInAction(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxActions
            Return FindByIsInAction(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByActionID(ByVal searchValue As System.Guid) As TB_FaxActions
            Return FindByActionID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByActionID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.ActionID, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

        Public Function FindByLastActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_FaxActions
            Return FindByLastActionTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLastActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_FaxActions
            Dim _TB_FaxActions As TB_FaxActions
            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.LastActionTime, searchValue) Then Return _TB_FaxActions
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByLastActionTime(ByVal searchValue As String) As TB_FaxActions
            Return FindByLastActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByLastActionTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxActions
            Return FindByLastActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_FaxActionsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.ID, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentCode(ByVal searchValue As System.String) As TB_FaxActionsCollection
            Return FilterByDocumentCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.DocumentCode, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_FaxActionsCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.Description, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDefualtFaxLine(ByVal searchValue As System.String) As TB_FaxActionsCollection
            Return FilterByDefualtFaxLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDefualtFaxLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.DefualtFaxLine, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRecipiantAsTo(ByVal searchValue As System.String) As TB_FaxActionsCollection
            Return FilterByRecipiantAsTo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRecipiantAsTo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.RecipiantAsTo, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRecipiantAsCC(ByVal searchValue As System.String) As TB_FaxActionsCollection
            Return FilterByRecipiantAsCC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRecipiantAsCC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.RecipiantAsCC, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsInAction(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_FaxActionsCollection
            Return FilterByIsInAction(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsInAction(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.IsInAction, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsInAction(ByVal searchValue As String) As TB_FaxActionsCollection
            Return FilterByIsInAction(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsInAction(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Return FilterByIsInAction(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByActionID(ByVal searchValue As System.Guid) As TB_FaxActionsCollection
            Return FilterByActionID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByActionID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.ActionID, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLastActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_FaxActionsCollection
            Return FilterByLastActionTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLastActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Dim retCollection = New TB_FaxActionsCollection()
            Dim _TB_FaxActions As TB_FaxActions

            For Each _TB_FaxActions In Me.List
                If Match(comparer, _TB_FaxActions.LastActionTime, searchValue) Then
                    retCollection.Add(_TB_FaxActions)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByLastActionTime(ByVal searchValue As String) As TB_FaxActionsCollection
            Return FilterByLastActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByLastActionTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxActionsCollection
            Return FilterByLastActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentCode(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDefualtFaxLine(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DefualtFaxLine"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRecipiantAsTo(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RecipiantAsTo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRecipiantAsCC(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RecipiantAsCC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsInAction(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsInAction"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByActionID(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ActionID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLastActionTime(ByVal sortDirection As SortDirection) As TB_FaxActionsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LastActionTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_FaxStatus))>public MustInherit class TB_FaxStatusCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_FaxStatus))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_FaxStatus
            Get
                return CType(Me.List(index),TB_FaxStatus)
            End Get
            Set(ByVal Value As TB_FaxStatus)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_FaxStatusCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus(propertyName), searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_FaxStatusCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_FaxStatus
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                if  Match(comparer,_TB_FaxStatus(propertyName) , searchValue) then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_FaxStatus As TB_FaxStatus) As System.Int32
            Return Me.List.Add(newTB_FaxStatus)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_FaxStatus
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.ID, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_FaxStatus
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.BLID, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

        Public Function FindByDocumentType(ByVal searchValue As System.String) As TB_FaxStatus
            Return FindByDocumentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocumentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.DocumentType, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

        Public Function FindByGenerateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_FaxStatus
            Return FindByGenerateDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGenerateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.GenerateDate, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByGenerateDate(ByVal searchValue As String) As TB_FaxStatus
            Return FindByGenerateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGenerateDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxStatus
            Return FindByGenerateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_FaxStatus
            Return FindBySentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.SentDate, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindBySentDate(ByVal searchValue As String) As TB_FaxStatus
            Return FindBySentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxStatus
            Return FindBySentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByStatus(ByVal searchValue As System.String) As TB_FaxStatus
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.Status, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

        Public Function FindByIsMailSent(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_FaxStatus
            Return FindByIsMailSent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsMailSent(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.IsMailSent, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsMailSent(ByVal searchValue As String) As TB_FaxStatus
            Return FindByIsMailSent(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsMailSent(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxStatus
            Return FindByIsMailSent(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFaxLog(ByVal searchValue As System.String) As TB_FaxStatus
            Return FindByFaxLog(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFaxLog(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.FaxLog, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

        Public Function FindBySavedPath(ByVal searchValue As System.String) As TB_FaxStatus
            Return FindBySavedPath(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySavedPath(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatus
            Dim _TB_FaxStatus As TB_FaxStatus
            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.SavedPath, searchValue) Then Return _TB_FaxStatus
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_FaxStatusCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.ID, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_FaxStatusCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.BLID, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDocumentType(ByVal searchValue As System.String) As TB_FaxStatusCollection
            Return FilterByDocumentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocumentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.DocumentType, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGenerateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_FaxStatusCollection
            Return FilterByGenerateDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGenerateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.GenerateDate, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByGenerateDate(ByVal searchValue As String) As TB_FaxStatusCollection
            Return FilterByGenerateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGenerateDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Return FilterByGenerateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_FaxStatusCollection
            Return FilterBySentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.SentDate, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterBySentDate(ByVal searchValue As String) As TB_FaxStatusCollection
            Return FilterBySentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Return FilterBySentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_FaxStatusCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.Status, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsMailSent(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_FaxStatusCollection
            Return FilterByIsMailSent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsMailSent(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.IsMailSent, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsMailSent(ByVal searchValue As String) As TB_FaxStatusCollection
            Return FilterByIsMailSent(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsMailSent(ByVal searchValue As String, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Return FilterByIsMailSent(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFaxLog(ByVal searchValue As System.String) As TB_FaxStatusCollection
            Return FilterByFaxLog(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFaxLog(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.FaxLog, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySavedPath(ByVal searchValue As System.String) As TB_FaxStatusCollection
            Return FilterBySavedPath(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySavedPath(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_FaxStatusCollection
            Dim retCollection = New TB_FaxStatusCollection()
            Dim _TB_FaxStatus As TB_FaxStatus

            For Each _TB_FaxStatus In Me.List
                If Match(comparer, _TB_FaxStatus.SavedPath, searchValue) Then
                    retCollection.Add(_TB_FaxStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocumentType(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocumentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGenerateDate(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GenerateDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySentDate(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SentDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsMailSent(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsMailSent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFaxLog(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FaxLog"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySavedPath(ByVal sortDirection As SortDirection) As TB_FaxStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SavedPath"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Inquery))>public MustInherit class TB_InqueryCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Inquery))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Inquery
            Get
                return CType(Me.List(index),TB_Inquery)
            End Get
            Set(ByVal Value As TB_Inquery)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InqueryCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery(propertyName), searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InqueryCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Inquery
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                if  Match(comparer,_TB_Inquery(propertyName) , searchValue) then Return _TB_Inquery
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Inquery As TB_Inquery) As System.Int32
            Return Me.List.Add(newTB_Inquery)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Inquery
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery
            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.ID, searchValue) Then Return _TB_Inquery
            Next

            Return Nothing
        End Function

        Public Function FindByClinetID(ByVal searchValue As System.Guid) As TB_Inquery
            Return FindByClinetID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClinetID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery
            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.ClinetID, searchValue) Then Return _TB_Inquery
            Next

            Return Nothing
        End Function

        Public Function FindByInqueryDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Inquery
            Return FindByInqueryDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInqueryDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery
            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.InqueryDate, searchValue) Then Return _TB_Inquery
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByInqueryDate(ByVal searchValue As String) As TB_Inquery
            Return FindByInqueryDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByInqueryDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Inquery
            Return FindByInqueryDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByInqueryValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Inquery
            Return FindByInqueryValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInqueryValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery
            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.InqueryValidity, searchValue) Then Return _TB_Inquery
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByInqueryValidity(ByVal searchValue As String) As TB_Inquery
            Return FindByInqueryValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByInqueryValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Inquery
            Return FindByInqueryValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPrincipalReference(ByVal searchValue As System.String) As TB_Inquery
            Return FindByPrincipalReference(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPrincipalReference(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery
            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.PrincipalReference, searchValue) Then Return _TB_Inquery
            Next

            Return Nothing
        End Function

        Public Function FindByPOL(ByVal searchValue As System.String) As TB_Inquery
            Return FindByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery
            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.POL, searchValue) Then Return _TB_Inquery
            Next

            Return Nothing
        End Function

        Public Function FindByPOD(ByVal searchValue As System.String) As TB_Inquery
            Return FindByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Inquery
            Dim _TB_Inquery As TB_Inquery
            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.POD, searchValue) Then Return _TB_Inquery
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InqueryCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.ID, searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByClinetID(ByVal searchValue As System.Guid) As TB_InqueryCollection
            Return FilterByClinetID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClinetID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.ClinetID, searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInqueryDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InqueryCollection
            Return FilterByInqueryDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInqueryDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.InqueryDate, searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByInqueryDate(ByVal searchValue As String) As TB_InqueryCollection
            Return FilterByInqueryDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByInqueryDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InqueryCollection
            Return FilterByInqueryDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByInqueryValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InqueryCollection
            Return FilterByInqueryValidity(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInqueryValidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.InqueryValidity, searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByInqueryValidity(ByVal searchValue As String) As TB_InqueryCollection
            Return FilterByInqueryValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByInqueryValidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InqueryCollection
            Return FilterByInqueryValidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPrincipalReference(ByVal searchValue As System.String) As TB_InqueryCollection
            Return FilterByPrincipalReference(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPrincipalReference(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.PrincipalReference, searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOL(ByVal searchValue As System.String) As TB_InqueryCollection
            Return FilterByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.POL, searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOD(ByVal searchValue As System.String) As TB_InqueryCollection
            Return FilterByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InqueryCollection
            Dim retCollection = New TB_InqueryCollection()
            Dim _TB_Inquery As TB_Inquery

            For Each _TB_Inquery In Me.List
                If Match(comparer, _TB_Inquery.POD, searchValue) Then
                    retCollection.Add(_TB_Inquery)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClinetID(ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ClinetID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInqueryDate(ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InqueryDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInqueryValidity(ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InqueryValidity"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPrincipalReference(ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PrincipalReference"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOL(ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOD(ByVal sortDirection As SortDirection) As TB_InqueryCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InqueryDetails))>public MustInherit class TB_InqueryDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InqueryDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InqueryDetails
            Get
                return CType(Me.List(index),TB_InqueryDetails)
            End Get
            Set(ByVal Value As TB_InqueryDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InqueryDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Dim retCollection = New TB_InqueryDetailsCollection()
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_InqueryDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InqueryDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InqueryDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InqueryDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InqueryDetails
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                if  Match(comparer,_TB_InqueryDetails(propertyName) , searchValue) then Return _TB_InqueryDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InqueryDetails As TB_InqueryDetails) As System.Int32
            Return Me.List.Add(newTB_InqueryDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InqueryDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InqueryDetails
            Dim _TB_InqueryDetails As TB_InqueryDetails
            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.ID, searchValue) Then Return _TB_InqueryDetails
            Next

            Return Nothing
        End Function

        Public Function FindByMasterID(ByVal searchValue As System.Guid) As TB_InqueryDetails
            Return FindByMasterID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMasterID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InqueryDetails
            Dim _TB_InqueryDetails As TB_InqueryDetails
            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.MasterID, searchValue) Then Return _TB_InqueryDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCnSize(ByVal searchValue As System.String) As TB_InqueryDetails
            Return FindByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InqueryDetails
            Dim _TB_InqueryDetails As TB_InqueryDetails
            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.CnSize, searchValue) Then Return _TB_InqueryDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_InqueryDetails
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InqueryDetails
            Dim _TB_InqueryDetails As TB_InqueryDetails
            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.CnType, searchValue) Then Return _TB_InqueryDetails
            Next

            Return Nothing
        End Function

        Public Function FindByIsDG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InqueryDetails
            Return FindByIsDG(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsDG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InqueryDetails
            Dim _TB_InqueryDetails As TB_InqueryDetails
            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.IsDG, searchValue) Then Return _TB_InqueryDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsDG(ByVal searchValue As String) As TB_InqueryDetails
            Return FindByIsDG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsDG(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InqueryDetails
            Return FindByIsDG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InqueryDetails
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InqueryDetails
            Dim _TB_InqueryDetails As TB_InqueryDetails
            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.Amount, searchValue) Then Return _TB_InqueryDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByAmount(ByVal searchValue As String) As TB_InqueryDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InqueryDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InqueryDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Dim retCollection = New TB_InqueryDetailsCollection()
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.ID, searchValue) Then
                    retCollection.Add(_TB_InqueryDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMasterID(ByVal searchValue As System.Guid) As TB_InqueryDetailsCollection
            Return FilterByMasterID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMasterID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Dim retCollection = New TB_InqueryDetailsCollection()
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.MasterID, searchValue) Then
                    retCollection.Add(_TB_InqueryDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnSize(ByVal searchValue As System.String) As TB_InqueryDetailsCollection
            Return FilterByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Dim retCollection = New TB_InqueryDetailsCollection()
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.CnSize, searchValue) Then
                    retCollection.Add(_TB_InqueryDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_InqueryDetailsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Dim retCollection = New TB_InqueryDetailsCollection()
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.CnType, searchValue) Then
                    retCollection.Add(_TB_InqueryDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsDG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InqueryDetailsCollection
            Return FilterByIsDG(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsDG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Dim retCollection = New TB_InqueryDetailsCollection()
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.IsDG, searchValue) Then
                    retCollection.Add(_TB_InqueryDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsDG(ByVal searchValue As String) As TB_InqueryDetailsCollection
            Return FilterByIsDG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsDG(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Return FilterByIsDG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InqueryDetailsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Dim retCollection = New TB_InqueryDetailsCollection()
            Dim _TB_InqueryDetails As TB_InqueryDetails

            For Each _TB_InqueryDetails In Me.List
                If Match(comparer, _TB_InqueryDetails.Amount, searchValue) Then
                    retCollection.Add(_TB_InqueryDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByAmount(ByVal searchValue As String) As TB_InqueryDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InqueryDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InqueryDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMasterID(ByVal sortDirection As SortDirection) As TB_InqueryDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MasterID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnSize(ByVal sortDirection As SortDirection) As TB_InqueryDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_InqueryDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsDG(ByVal sortDirection As SortDirection) As TB_InqueryDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsDG"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_InqueryDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Invoice))>public MustInherit class TB_InvoiceCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Invoice))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Invoice
            Get
                return CType(Me.List(index),TB_Invoice)
            End Get
            Set(ByVal Value As TB_Invoice)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InvoiceCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice(propertyName), searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InvoiceCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Invoice
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                if  Match(comparer,_TB_Invoice(propertyName) , searchValue) then Return _TB_Invoice
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Invoice As TB_Invoice) As System.Int32
            Return Me.List.Add(newTB_Invoice)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Invoice
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ID, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_Invoice
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.BLID, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceNo(ByVal searchValue As System.String) As TB_Invoice
            Return FindByInvoiceNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.InvoiceNo, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_Invoice
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.Description, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Invoice
            Return FindByIssueTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.IssueTime, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByIssueTime(ByVal searchValue As String) As TB_Invoice
            Return FindByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIssueTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Invoice
            Return FindByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIssueBy(ByVal searchValue As System.String) As TB_Invoice
            Return FindByIssueBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.IssueBy, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Invoice
            Return FindByConfirmTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ConfirmTime, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByConfirmTime(ByVal searchValue As String) As TB_Invoice
            Return FindByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByConfirmTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Invoice
            Return FindByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByConfirmBy(ByVal searchValue As System.String) As TB_Invoice
            Return FindByConfirmBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByConfirmBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ConfirmBy, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByStatus(ByVal searchValue As System.String) As TB_Invoice
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.Status, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByIssueOffice(ByVal searchValue As System.String) As TB_Invoice
            Return FindByIssueOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.IssueOffice, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FindByConfirmOffice(ByVal searchValue As System.String) As TB_Invoice
            Return FindByConfirmOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByConfirmOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Invoice
            Dim _TB_Invoice As TB_Invoice
            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ConfirmOffice, searchValue) Then Return _TB_Invoice
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InvoiceCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ID, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InvoiceCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.BLID, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceNo(ByVal searchValue As System.String) As TB_InvoiceCollection
            Return FilterByInvoiceNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.InvoiceNo, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_InvoiceCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.Description, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InvoiceCollection
            Return FilterByIssueTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.IssueTime, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByIssueTime(ByVal searchValue As String) As TB_InvoiceCollection
            Return FilterByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIssueTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Return FilterByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIssueBy(ByVal searchValue As System.String) As TB_InvoiceCollection
            Return FilterByIssueBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.IssueBy, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InvoiceCollection
            Return FilterByConfirmTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByConfirmTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ConfirmTime, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByConfirmTime(ByVal searchValue As String) As TB_InvoiceCollection
            Return FilterByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByConfirmTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Return FilterByConfirmTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByConfirmBy(ByVal searchValue As System.String) As TB_InvoiceCollection
            Return FilterByConfirmBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByConfirmBy(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ConfirmBy, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_InvoiceCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.Status, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueOffice(ByVal searchValue As System.String) As TB_InvoiceCollection
            Return FilterByIssueOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.IssueOffice, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByConfirmOffice(ByVal searchValue As System.String) As TB_InvoiceCollection
            Return FilterByConfirmOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByConfirmOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceCollection
            Dim retCollection = New TB_InvoiceCollection()
            Dim _TB_Invoice As TB_Invoice

            For Each _TB_Invoice In Me.List
                If Match(comparer, _TB_Invoice.ConfirmOffice, searchValue) Then
                    retCollection.Add(_TB_Invoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceNo(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueTime(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueBy(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByConfirmTime(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ConfirmTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByConfirmBy(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ConfirmBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueOffice(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueOffice"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByConfirmOffice(ByVal sortDirection As SortDirection) As TB_InvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ConfirmOffice"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InvoiceDetails))>public MustInherit class TB_InvoiceDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InvoiceDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InvoiceDetails
            Get
                return CType(Me.List(index),TB_InvoiceDetails)
            End Get
            Set(ByVal Value As TB_InvoiceDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InvoiceDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InvoiceDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InvoiceDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                if  Match(comparer,_TB_InvoiceDetails(propertyName) , searchValue) then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InvoiceDetails As TB_InvoiceDetails) As System.Int32
            Return Me.List.Add(newTB_InvoiceDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InvoiceDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.ID, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceID(ByVal searchValue As System.Guid) As TB_InvoiceDetails
            Return FindByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.InvoiceID, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InvoiceDetails
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Seq, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_InvoiceDetails
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceDetails
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_InvoiceDetails
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.ChargesCode, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_InvoiceDetails
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Remarks, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_InvoiceDetails
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Currency, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InvoiceDetails
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Amount, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_InvoiceDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InvoiceDetails
            Return FindByIRRAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InvoiceDetails
            Dim _TB_InvoiceDetails As TB_InvoiceDetails
            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.IRRAmount, searchValue) Then Return _TB_InvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByIRRAmount(ByVal searchValue As String) As TB_InvoiceDetails
            Return FindByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIRRAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceDetails
            Return FindByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InvoiceDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.ID, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid) As TB_InvoiceDetailsCollection
            Return FilterByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.InvoiceID, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InvoiceDetailsCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Seq, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_InvoiceDetailsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_InvoiceDetailsCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_InvoiceDetailsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Remarks, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_InvoiceDetailsCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Currency, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InvoiceDetailsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.Amount, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_InvoiceDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InvoiceDetailsCollection
            Return FilterByIRRAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIRRAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Dim retCollection = New TB_InvoiceDetailsCollection()
            Dim _TB_InvoiceDetails As TB_InvoiceDetails

            For Each _TB_InvoiceDetails In Me.List
                If Match(comparer, _TB_InvoiceDetails.IRRAmount, searchValue) Then
                    retCollection.Add(_TB_InvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByIRRAmount(ByVal searchValue As String) As TB_InvoiceDetailsCollection
            Return FilterByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIRRAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InvoiceDetailsCollection
            Return FilterByIRRAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceID(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIRRAmount(ByVal sortDirection As SortDirection) As TB_InvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IRRAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardBLS))>public MustInherit class TB_InwardBLSCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardBLS))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardBLS
            Get
                return CType(Me.List(index),TB_InwardBLS)
            End Get
            Set(ByVal Value As TB_InwardBLS)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBLSCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardBLSCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBLS
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                if  Match(comparer,_TB_InwardBLS(propertyName) , searchValue) then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardBLS As TB_InwardBLS) As System.Int32
            Return Me.List.Add(newTB_InwardBLS)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardBLS
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.ID, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByService(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByService(searchValue, CompareType.Exact)
        End Function


        Public Function FindByService(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Service, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Line, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBlNo(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BlNo, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByIssuePlace(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByIssuePlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssuePlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.IssuePlace, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBLS
            Return FindByIssueDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.IssueDate, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByIssueDate(ByVal searchValue As String) As TB_InwardBLS
            Return FindByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIssueDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLS
            Return FindByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBLS
            Return FindByOnBoardDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.OnBoardDate, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByOnBoardDate(ByVal searchValue As String) As TB_InwardBLS
            Return FindByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByOnBoardDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLS
            Return FindByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPOR(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByPOR(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOR(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POR, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPOL(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POL, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPOT(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POT, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPOD(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POD, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFPOD(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FPOD, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPreVoyageID(ByVal searchValue As System.Guid) As TB_InwardBLS
            Return FindByPreVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPreVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.PreVoyageID, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByVoyageID(ByVal searchValue As System.Guid) As TB_InwardBLS
            Return FindByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.VoyageID, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InwardBLS
            Return FindByNoOfBls(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.NoOfBls, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByNoOfBls(ByVal searchValue As String) As TB_InwardBLS
            Return FindByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOfBls(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLS
            Return FindByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTermsOfPayment(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByTermsOfPayment(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTermsOfPayment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.TermsOfPayment, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByClientID(ByVal searchValue As System.Guid) As TB_InwardBLS
            Return FindByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.ClientID, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFCLType(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByFCLType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFCLType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FCLType, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Remarks, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardBLS
            Return FindByReference(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Reference, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByReference(ByVal searchValue As String) As TB_InwardBLS
            Return FindByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReference(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLS
            Return FindByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardBLS
            Return FindByMailRelease(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.MailRelease, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByMailRelease(ByVal searchValue As String) As TB_InwardBLS
            Return FindByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMailRelease(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLS
            Return FindByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMailReleaseRem(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByMailReleaseRem(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailReleaseRem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.MailReleaseRem, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFrtCoverdCarr(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByFrtCoverdCarr(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFrtCoverdCarr(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FrtCoverdCarr, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFrtCoverdBlNo(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByFrtCoverdBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFrtCoverdBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FrtCoverdBlNo, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByStatus(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Status, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByLcNo(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByLcNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLcNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.LcNo, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBLStatus(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByBLStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BLStatus, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBookingID(ByVal searchValue As System.Guid) As TB_InwardBLS
            Return FindByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BookingID, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBookingNo(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByBookingNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BookingNo, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByMBL(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByMBL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMBL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.MBL, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFwdLine(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByFwdLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFwdLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FwdLine, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFwAgent(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByFwAgent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFwAgent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FwAgent, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByJobNumber(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByJobNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobNumber(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.JobNumber, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByIssueFU(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardBLS
            Return FindByIssueFU(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueFU(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.IssueFU, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIssueFU(ByVal searchValue As String) As TB_InwardBLS
            Return FindByIssueFU(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIssueFU(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLS
            Return FindByIssueFU(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFinalizeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBLS
            Return FindByFinalizeDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFinalizeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FinalizeDate, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByFinalizeDate(ByVal searchValue As String) As TB_InwardBLS
            Return FindByFinalizeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFinalizeDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLS
            Return FindByFinalizeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFinalizeStatus(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByFinalizeStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFinalizeStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FinalizeStatus, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByTFCCode(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByTFCCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTFCCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.TFCCode, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBarCode(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByBarCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBarCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BarCode, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByHSCode(ByVal searchValue As System.String) As TB_InwardBLS
            Return FindByHSCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByHSCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLS
            Dim _TB_InwardBLS As TB_InwardBLS
            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.HSCode, searchValue) Then Return _TB_InwardBLS
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardBLSCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.ID, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByService(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByService(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByService(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Service, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Line, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBlNo(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BlNo, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssuePlace(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByIssuePlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssuePlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.IssuePlace, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBLSCollection
            Return FilterByIssueDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.IssueDate, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByIssueDate(ByVal searchValue As String) As TB_InwardBLSCollection
            Return FilterByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIssueDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Return FilterByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBLSCollection
            Return FilterByOnBoardDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.OnBoardDate, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByOnBoardDate(ByVal searchValue As String) As TB_InwardBLSCollection
            Return FilterByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByOnBoardDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Return FilterByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPOR(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByPOR(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOR(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POR, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOL(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POL, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOT(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POT, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOD(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.POD, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFPOD(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FPOD, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPreVoyageID(ByVal searchValue As System.Guid) As TB_InwardBLSCollection
            Return FilterByPreVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPreVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.PreVoyageID, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVoyageID(ByVal searchValue As System.Guid) As TB_InwardBLSCollection
            Return FilterByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.VoyageID, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InwardBLSCollection
            Return FilterByNoOfBls(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.NoOfBls, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByNoOfBls(ByVal searchValue As String) As TB_InwardBLSCollection
            Return FilterByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOfBls(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Return FilterByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTermsOfPayment(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByTermsOfPayment(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTermsOfPayment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.TermsOfPayment, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByClientID(ByVal searchValue As System.Guid) As TB_InwardBLSCollection
            Return FilterByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.ClientID, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFCLType(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByFCLType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFCLType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FCLType, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Remarks, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardBLSCollection
            Return FilterByReference(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Reference, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByReference(ByVal searchValue As String) As TB_InwardBLSCollection
            Return FilterByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReference(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Return FilterByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardBLSCollection
            Return FilterByMailRelease(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.MailRelease, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByMailRelease(ByVal searchValue As String) As TB_InwardBLSCollection
            Return FilterByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMailRelease(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Return FilterByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMailReleaseRem(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByMailReleaseRem(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailReleaseRem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.MailReleaseRem, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFrtCoverdCarr(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByFrtCoverdCarr(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFrtCoverdCarr(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FrtCoverdCarr, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFrtCoverdBlNo(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByFrtCoverdBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFrtCoverdBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FrtCoverdBlNo, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.Status, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLcNo(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByLcNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLcNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.LcNo, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLStatus(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByBLStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BLStatus, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingID(ByVal searchValue As System.Guid) As TB_InwardBLSCollection
            Return FilterByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BookingID, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingNo(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByBookingNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BookingNo, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMBL(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByMBL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMBL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.MBL, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFwdLine(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByFwdLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFwdLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FwdLine, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFwAgent(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByFwAgent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFwAgent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FwAgent, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobNumber(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByJobNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobNumber(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.JobNumber, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueFU(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardBLSCollection
            Return FilterByIssueFU(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueFU(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.IssueFU, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIssueFU(ByVal searchValue As String) As TB_InwardBLSCollection
            Return FilterByIssueFU(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIssueFU(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Return FilterByIssueFU(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFinalizeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBLSCollection
            Return FilterByFinalizeDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFinalizeDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FinalizeDate, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByFinalizeDate(ByVal searchValue As String) As TB_InwardBLSCollection
            Return FilterByFinalizeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFinalizeDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Return FilterByFinalizeDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFinalizeStatus(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByFinalizeStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFinalizeStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.FinalizeStatus, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTFCCode(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByTFCCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTFCCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.TFCCode, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBarCode(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByBarCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBarCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.BarCode, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByHSCode(ByVal searchValue As System.String) As TB_InwardBLSCollection
            Return FilterByHSCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByHSCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBLSCollection
            Dim retCollection = New TB_InwardBLSCollection()
            Dim _TB_InwardBLS As TB_InwardBLS

            For Each _TB_InwardBLS In Me.List
                If Match(comparer, _TB_InwardBLS.HSCode, searchValue) Then
                    retCollection.Add(_TB_InwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByService(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Service"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBlNo(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BlNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssuePlace(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssuePlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueDate(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOnBoardDate(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OnBoardDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOR(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POR"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOL(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOT(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POT"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOD(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFPOD(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FPOD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPreVoyageID(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PreVoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVoyageID(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOfBls(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOfBls"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTermsOfPayment(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TermsOfPayment"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClientID(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ClientID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFCLType(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FCLType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReference(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Reference"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailRelease(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailRelease"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailReleaseRem(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailReleaseRem"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFrtCoverdCarr(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FrtCoverdCarr"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFrtCoverdBlNo(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FrtCoverdBlNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLcNo(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LcNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLStatus(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingID(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingNo(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMBL(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MBL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFwdLine(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FwdLine"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFwAgent(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FwAgent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobNumber(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueFU(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueFU"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFinalizeDate(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FinalizeDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFinalizeStatus(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FinalizeStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTFCCode(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TFCCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBarCode(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BarCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByHSCode(ByVal sortDirection As SortDirection) As TB_InwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("HSCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardBlsComments))>public MustInherit class TB_InwardBlsCommentsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardBlsComments))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardBlsComments
            Get
                return CType(Me.List(index),TB_InwardBlsComments)
            End Get
            Set(ByVal Value As TB_InwardBlsComments)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBlsCommentsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBlsCommentsCollection
            Dim retCollection = New TB_InwardBlsCommentsCollection()
            Dim _TB_InwardBlsComments As TB_InwardBlsComments

            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardBlsComments)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardBlsCommentsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBlsComments
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBlsComments
            Dim _TB_InwardBlsComments As TB_InwardBlsComments

            For Each _TB_InwardBlsComments In Me.List
                if  Match(comparer,_TB_InwardBlsComments(propertyName) , searchValue) then Return _TB_InwardBlsComments
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardBlsComments As TB_InwardBlsComments) As System.Int32
            Return Me.List.Add(newTB_InwardBlsComments)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardBlsComments
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsComments
            Dim _TB_InwardBlsComments As TB_InwardBlsComments
            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.ID, searchValue) Then Return _TB_InwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_InwardBlsComments
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsComments
            Dim _TB_InwardBlsComments As TB_InwardBlsComments
            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.BLID, searchValue) Then Return _TB_InwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByCommentType(ByVal searchValue As System.String) As TB_InwardBlsComments
            Return FindByCommentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCommentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsComments
            Dim _TB_InwardBlsComments As TB_InwardBlsComments
            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.CommentType, searchValue) Then Return _TB_InwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByComment(ByVal searchValue As System.String) As TB_InwardBlsComments
            Return FindByComment(searchValue, CompareType.Exact)
        End Function


        Public Function FindByComment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsComments
            Dim _TB_InwardBlsComments As TB_InwardBlsComments
            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.Comment, searchValue) Then Return _TB_InwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBlsComments
            Return FindByCommentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBlsComments
            Dim _TB_InwardBlsComments As TB_InwardBlsComments
            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.CommentDate, searchValue) Then Return _TB_InwardBlsComments
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByCommentDate(ByVal searchValue As String) As TB_InwardBlsComments
            Return FindByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCommentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsComments
            Return FindByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardBlsCommentsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsCommentsCollection
            Dim retCollection = New TB_InwardBlsCommentsCollection()
            Dim _TB_InwardBlsComments As TB_InwardBlsComments

            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.ID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InwardBlsCommentsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsCommentsCollection
            Dim retCollection = New TB_InwardBlsCommentsCollection()
            Dim _TB_InwardBlsComments As TB_InwardBlsComments

            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.BLID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCommentType(ByVal searchValue As System.String) As TB_InwardBlsCommentsCollection
            Return FilterByCommentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCommentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsCommentsCollection
            Dim retCollection = New TB_InwardBlsCommentsCollection()
            Dim _TB_InwardBlsComments As TB_InwardBlsComments

            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.CommentType, searchValue) Then
                    retCollection.Add(_TB_InwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByComment(ByVal searchValue As System.String) As TB_InwardBlsCommentsCollection
            Return FilterByComment(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByComment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsCommentsCollection
            Dim retCollection = New TB_InwardBlsCommentsCollection()
            Dim _TB_InwardBlsComments As TB_InwardBlsComments

            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.Comment, searchValue) Then
                    retCollection.Add(_TB_InwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardBlsCommentsCollection
            Return FilterByCommentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardBlsCommentsCollection
            Dim retCollection = New TB_InwardBlsCommentsCollection()
            Dim _TB_InwardBlsComments As TB_InwardBlsComments

            For Each _TB_InwardBlsComments In Me.List
                If Match(comparer, _TB_InwardBlsComments.CommentDate, searchValue) Then
                    retCollection.Add(_TB_InwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByCommentDate(ByVal searchValue As String) As TB_InwardBlsCommentsCollection
            Return FilterByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCommentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsCommentsCollection
            Return FilterByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCommentType(ByVal sortDirection As SortDirection) As TB_InwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CommentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByComment(ByVal sortDirection As SortDirection) As TB_InwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Comment"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCommentDate(ByVal sortDirection As SortDirection) As TB_InwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CommentDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(Tb_InwardBlsFrs))>public MustInherit class Tb_InwardBlsFrsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(Tb_InwardBlsFrs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As Tb_InwardBlsFrs
            Get
                return CType(Me.List(index),Tb_InwardBlsFrs)
            End Get
            Set(ByVal Value As Tb_InwardBlsFrs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As Tb_InwardBlsFrsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As Tb_InwardBlsFrsCollection
            Dim retCollection = New Tb_InwardBlsFrsCollection()
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs

            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs(propertyName), searchValue) Then
                    retCollection.Add(_Tb_InwardBlsFrs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As Tb_InwardBlsFrsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As Tb_InwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As Tb_InwardBlsFrs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As Tb_InwardBlsFrs
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs

            For Each _Tb_InwardBlsFrs In Me.List
                if  Match(comparer,_Tb_InwardBlsFrs(propertyName) , searchValue) then Return _Tb_InwardBlsFrs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTb_InwardBlsFrs As Tb_InwardBlsFrs) As System.Int32
            Return Me.List.Add(newTb_InwardBlsFrs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As Tb_InwardBlsFrs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_InwardBlsFrs
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs
            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.ID, searchValue) Then Return _Tb_InwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As Tb_InwardBlsFrs
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_InwardBlsFrs
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs
            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.BLID, searchValue) Then Return _Tb_InwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByFCnee(ByVal searchValue As System.String) As Tb_InwardBlsFrs
            Return FindByFCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_InwardBlsFrs
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs
            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.FCnee, searchValue) Then Return _Tb_InwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByFGoods(ByVal searchValue As System.String) As Tb_InwardBlsFrs
            Return FindByFGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_InwardBlsFrs
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs
            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.FGoods, searchValue) Then Return _Tb_InwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByFPkgs(ByVal searchValue As System.String) As Tb_InwardBlsFrs
            Return FindByFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFPkgs(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_InwardBlsFrs
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs
            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.FPkgs, searchValue) Then Return _Tb_InwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As Tb_InwardBlsFrsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_InwardBlsFrsCollection
            Dim retCollection = New Tb_InwardBlsFrsCollection()
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs

            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.ID, searchValue) Then
                    retCollection.Add(_Tb_InwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As Tb_InwardBlsFrsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_InwardBlsFrsCollection
            Dim retCollection = New Tb_InwardBlsFrsCollection()
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs

            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.BLID, searchValue) Then
                    retCollection.Add(_Tb_InwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFCnee(ByVal searchValue As System.String) As Tb_InwardBlsFrsCollection
            Return FilterByFCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_InwardBlsFrsCollection
            Dim retCollection = New Tb_InwardBlsFrsCollection()
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs

            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.FCnee, searchValue) Then
                    retCollection.Add(_Tb_InwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFGoods(ByVal searchValue As System.String) As Tb_InwardBlsFrsCollection
            Return FilterByFGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_InwardBlsFrsCollection
            Dim retCollection = New Tb_InwardBlsFrsCollection()
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs

            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.FGoods, searchValue) Then
                    retCollection.Add(_Tb_InwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFPkgs(ByVal searchValue As System.String) As Tb_InwardBlsFrsCollection
            Return FilterByFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFPkgs(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_InwardBlsFrsCollection
            Dim retCollection = New Tb_InwardBlsFrsCollection()
            Dim _Tb_InwardBlsFrs As Tb_InwardBlsFrs

            For Each _Tb_InwardBlsFrs In Me.List
                If Match(comparer, _Tb_InwardBlsFrs.FPkgs, searchValue) Then
                    retCollection.Add(_Tb_InwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As Tb_InwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As Tb_InwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFCnee(ByVal sortDirection As SortDirection) As Tb_InwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FCnee"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFGoods(ByVal sortDirection As SortDirection) As Tb_InwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FGoods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFPkgs(ByVal sortDirection As SortDirection) As Tb_InwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardBlsGoods))>public MustInherit class TB_InwardBlsGoodsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardBlsGoods))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardBlsGoods
            Get
                return CType(Me.List(index),TB_InwardBlsGoods)
            End Get
            Set(ByVal Value As TB_InwardBlsGoods)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBlsGoodsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardBlsGoodsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBlsGoods
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                if  Match(comparer,_TB_InwardBlsGoods(propertyName) , searchValue) then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardBlsGoods As TB_InwardBlsGoods) As System.Int32
            Return Me.List.Add(newTB_InwardBlsGoods)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardBlsGoods
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.ID, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_InwardBlsGoods
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.BLID, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByGoods(ByVal searchValue As System.String) As TB_InwardBlsGoods
            Return FindByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.Goods, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByMarks(ByVal searchValue As System.String) As TB_InwardBlsGoods
            Return FindByMarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.Marks, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByMainCom(ByVal searchValue As System.String) As TB_InwardBlsGoods
            Return FindByMainCom(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMainCom(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.MainCom, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardBlsGoods
            Return FindByTTW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTW, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByTTW(ByVal searchValue As String) As TB_InwardBlsGoods
            Return FindByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Return FindByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardBlsGoods
            Return FindByTGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TGW, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTGW(ByVal searchValue As String) As TB_InwardBlsGoods
            Return FindByTGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Return FindByTGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardBlsGoods
            Return FindByTTLPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTLPkgs, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByTTLPkgs(ByVal searchValue As String) As TB_InwardBlsGoods
            Return FindByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTLPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Return FindByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardBlsGoods
            Return FindByTTLCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTLCBM, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTTLCBM(ByVal searchValue As String) As TB_InwardBlsGoods
            Return FindByTTLCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTLCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Return FindByTTLCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardBlsGoods
            Return FindByTTLNET(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods
            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTLNET, searchValue) Then Return _TB_InwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTTLNET(ByVal searchValue As String) As TB_InwardBlsGoods
            Return FindByTTLNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTLNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoods
            Return FindByTTLNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardBlsGoodsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.ID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InwardBlsGoodsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.BLID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGoods(ByVal searchValue As System.String) As TB_InwardBlsGoodsCollection
            Return FilterByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.Goods, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMarks(ByVal searchValue As System.String) As TB_InwardBlsGoodsCollection
            Return FilterByMarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.Marks, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMainCom(ByVal searchValue As System.String) As TB_InwardBlsGoodsCollection
            Return FilterByMainCom(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMainCom(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.MainCom, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardBlsGoodsCollection
            Return FilterByTTW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTW, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByTTW(ByVal searchValue As String) As TB_InwardBlsGoodsCollection
            Return FilterByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Return FilterByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardBlsGoodsCollection
            Return FilterByTGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TGW, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTGW(ByVal searchValue As String) As TB_InwardBlsGoodsCollection
            Return FilterByTGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Return FilterByTGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardBlsGoodsCollection
            Return FilterByTTLPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTLPkgs, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByTTLPkgs(ByVal searchValue As String) As TB_InwardBlsGoodsCollection
            Return FilterByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTLPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Return FilterByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardBlsGoodsCollection
            Return FilterByTTLCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTLCBM, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTTLCBM(ByVal searchValue As String) As TB_InwardBlsGoodsCollection
            Return FilterByTTLCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTLCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Return FilterByTTLCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardBlsGoodsCollection
            Return FilterByTTLNET(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Dim retCollection = New TB_InwardBlsGoodsCollection()
            Dim _TB_InwardBlsGoods As TB_InwardBlsGoods

            For Each _TB_InwardBlsGoods In Me.List
                If Match(comparer, _TB_InwardBlsGoods.TTLNET, searchValue) Then
                    retCollection.Add(_TB_InwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTTLNET(ByVal searchValue As String) As TB_InwardBlsGoodsCollection
            Return FilterByTTLNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTLNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardBlsGoodsCollection
            Return FilterByTTLNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGoods(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Goods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMarks(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Marks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMainCom(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MainCom"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTW(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTGW(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TGW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTLPkgs(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTLPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTLCBM(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTLCBM"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTLNET(ByVal sortDirection As SortDirection) As TB_InwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTLNET"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardBlsNames))>public MustInherit class TB_InwardBlsNamesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardBlsNames))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardBlsNames
            Get
                return CType(Me.List(index),TB_InwardBlsNames)
            End Get
            Set(ByVal Value As TB_InwardBlsNames)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBlsNamesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardBlsNamesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardBlsNames
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                if  Match(comparer,_TB_InwardBlsNames(propertyName) , searchValue) then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardBlsNames As TB_InwardBlsNames) As System.Int32
            Return Me.List.Add(newTB_InwardBlsNames)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardBlsNames
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.ID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_InwardBlsNames
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.BLID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByShipper(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByShipper(searchValue, CompareType.Exact)
        End Function


        Public Function FindByShipper(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Shipper, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByCnee(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Cnee, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify1(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByNotify1(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify1, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify2(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByNotify2(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify2, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify3(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByNotify3(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify3, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByMessers(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByMessers(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMessers(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Messers, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByShipperID(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByShipperID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByShipperID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.ShipperID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByCneeID(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByCneeID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCneeID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.CneeID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify1ID(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByNotify1ID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify1ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify1ID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify2ID(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByNotify2ID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify2ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify2ID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify3ID(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByNotify3ID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify3ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify3ID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByForwarder(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByForwarder(searchValue, CompareType.Exact)
        End Function


        Public Function FindByForwarder(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Forwarder, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByForwarderID(ByVal searchValue As System.String) As TB_InwardBlsNames
            Return FindByForwarderID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByForwarderID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNames
            Dim _TB_InwardBlsNames As TB_InwardBlsNames
            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.ForwarderID, searchValue) Then Return _TB_InwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardBlsNamesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.ID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InwardBlsNamesCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.BLID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByShipper(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByShipper(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByShipper(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Shipper, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnee(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Cnee, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify1(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByNotify1(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify1, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify2(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByNotify2(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify2, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify3(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByNotify3(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify3, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMessers(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByMessers(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMessers(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Messers, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByShipperID(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByShipperID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByShipperID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.ShipperID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCneeID(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByCneeID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCneeID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.CneeID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify1ID(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByNotify1ID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify1ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify1ID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify2ID(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByNotify2ID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify2ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify2ID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify3ID(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByNotify3ID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify3ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Notify3ID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByForwarder(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByForwarder(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByForwarder(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.Forwarder, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByForwarderID(ByVal searchValue As System.String) As TB_InwardBlsNamesCollection
            Return FilterByForwarderID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByForwarderID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardBlsNamesCollection
            Dim retCollection = New TB_InwardBlsNamesCollection()
            Dim _TB_InwardBlsNames As TB_InwardBlsNames

            For Each _TB_InwardBlsNames In Me.List
                If Match(comparer, _TB_InwardBlsNames.ForwarderID, searchValue) Then
                    retCollection.Add(_TB_InwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByShipper(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Shipper"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnee(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Cnee"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify1(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify1"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify2(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify2"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify3(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify3"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMessers(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Messers"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByShipperID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ShipperID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCneeID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CneeID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify1ID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify1ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify2ID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify2ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify3ID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify3ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByForwarder(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Forwarder"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByForwarderID(ByVal sortDirection As SortDirection) As TB_InwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ForwarderID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardCharges))>public MustInherit class TB_InwardChargesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardCharges))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardCharges
            Get
                return CType(Me.List(index),TB_InwardCharges)
            End Get
            Set(ByVal Value As TB_InwardCharges)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardChargesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardChargesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCharges
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                if  Match(comparer,_TB_InwardCharges(propertyName) , searchValue) then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardCharges As TB_InwardCharges) As System.Int32
            Return Me.List.Add(newTB_InwardCharges)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardCharges
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ID, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_InwardCharges
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.BLID, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InwardCharges
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Seq, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_InwardCharges
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ChargesCode, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Currency, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InwardCharges
            Return FindByQty(searchValue, CompareType.Exact)
        End Function


        Public Function FindByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Qty, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByQty(ByVal searchValue As String) As TB_InwardCharges
            Return FindByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByQty(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCharges
            Return FindByRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Rate, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByRate(ByVal searchValue As String) As TB_InwardCharges
            Return FindByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCharges
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Amount, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_InwardCharges
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPayAt(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByPayAt(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAt(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAt, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByChargesBase(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByChargesBase(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ChargesBase, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByTerms(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Terms, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCharges
            Return FindByActPlaceExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ActPlaceExRate, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByActPlaceExRate(ByVal searchValue As String) As TB_InwardCharges
            Return FindByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByActPlaceExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMeaUnitOfCharge(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByMeaUnitOfCharge(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMeaUnitOfCharge(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.MeaUnitOfCharge, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByFromPlace(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.FromPlace, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByToPlace(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ToPlace, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByPayAtBranch(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByPayAtBranch(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAtBranch(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAtBranch, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCharges
            Return FindByPayAtExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAtExRate, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByPayAtExRate(ByVal searchValue As String) As TB_InwardCharges
            Return FindByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPayAtExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPayAtPc(ByVal searchValue As System.String) As TB_InwardCharges
            Return FindByPayAtPc(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAtPc(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAtPc, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCharges
            Return FindByInvoiceAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.InvoiceAmount, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByInvoiceAmount(ByVal searchValue As String) As TB_InwardCharges
            Return FindByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByInvoiceAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCharges
            Return FindByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCharges
            Dim _TB_InwardCharges As TB_InwardCharges
            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.RealAmount, searchValue) Then Return _TB_InwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByRealAmount(ByVal searchValue As String) As TB_InwardCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardChargesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ID, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InwardChargesCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.BLID, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InwardChargesCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Seq, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Currency, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_InwardChargesCollection
            Return FilterByQty(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Qty, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByQty(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByQty(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardChargesCollection
            Return FilterByRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Rate, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByRate(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardChargesCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Amount, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPayAt(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByPayAt(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAt(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAt, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesBase(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByChargesBase(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ChargesBase, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTerms(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.Terms, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardChargesCollection
            Return FilterByActPlaceExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ActPlaceExRate, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByActPlaceExRate(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByActPlaceExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMeaUnitOfCharge(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByMeaUnitOfCharge(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMeaUnitOfCharge(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.MeaUnitOfCharge, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFromPlace(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.FromPlace, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByToPlace(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.ToPlace, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPayAtBranch(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByPayAtBranch(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAtBranch(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAtBranch, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardChargesCollection
            Return FilterByPayAtExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAtExRate, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByPayAtExRate(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPayAtExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPayAtPc(ByVal searchValue As System.String) As TB_InwardChargesCollection
            Return FilterByPayAtPc(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAtPc(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.PayAtPc, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardChargesCollection
            Return FilterByInvoiceAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.InvoiceAmount, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByInvoiceAmount(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByInvoiceAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardChargesCollection
            Return FilterByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Dim retCollection = New TB_InwardChargesCollection()
            Dim _TB_InwardCharges As TB_InwardCharges

            For Each _TB_InwardCharges In Me.List
                If Match(comparer, _TB_InwardCharges.RealAmount, searchValue) Then
                    retCollection.Add(_TB_InwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByRealAmount(ByVal searchValue As String) As TB_InwardChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByQty(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Qty"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRate(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Rate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAt(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAt"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesBase(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesBase"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTerms(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Terms"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByActPlaceExRate(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ActPlaceExRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMeaUnitOfCharge(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MeaUnitOfCharge"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFromPlace(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FromPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByToPlace(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ToPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAtBranch(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAtBranch"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAtExRate(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAtExRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAtPc(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAtPc"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceAmount(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRealAmount(ByVal sortDirection As SortDirection) As TB_InwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RealAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardCnsImco))>public MustInherit class TB_InwardCnsImcoCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardCnsImco))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardCnsImco
            Get
                return CType(Me.List(index),TB_InwardCnsImco)
            End Get
            Set(ByVal Value As TB_InwardCnsImco)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCnsImcoCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardCnsImcoCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCnsImco
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                if  Match(comparer,_TB_InwardCnsImco(propertyName) , searchValue) then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardCnsImco As TB_InwardCnsImco) As System.Int32
            Return Me.List.Add(newTB_InwardCnsImco)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardCnsImco
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.ID, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_InwardCnsImco
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.CntrID, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByUNNO(ByVal searchValue As System.String) As TB_InwardCnsImco
            Return FindByUNNO(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUNNO(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.UNNO, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByIMDGCode(ByVal searchValue As System.String) As TB_InwardCnsImco
            Return FindByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.IMDGCode, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCnsImco
            Return FindByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.FlashPoint, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFlashPoint(ByVal searchValue As String) As TB_InwardCnsImco
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsImco
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPakingGroup(ByVal searchValue As System.String) As TB_InwardCnsImco
            Return FindByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPakingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.PakingGroup, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsImco
            Return FindByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.PageNumber, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByPageNumber(ByVal searchValue As String) As TB_InwardCnsImco
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsImco
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsImco
            Return FindByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsImco
            Dim _TB_InwardCnsImco As TB_InwardCnsImco
            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.EMSNumber, searchValue) Then Return _TB_InwardCnsImco
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByEMSNumber(ByVal searchValue As String) As TB_InwardCnsImco
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsImco
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardCnsImcoCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.ID, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_InwardCnsImcoCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.CntrID, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUNNO(ByVal searchValue As System.String) As TB_InwardCnsImcoCollection
            Return FilterByUNNO(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUNNO(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.UNNO, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIMDGCode(ByVal searchValue As System.String) As TB_InwardCnsImcoCollection
            Return FilterByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.IMDGCode, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCnsImcoCollection
            Return FilterByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.FlashPoint, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFlashPoint(ByVal searchValue As String) As TB_InwardCnsImcoCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPakingGroup(ByVal searchValue As System.String) As TB_InwardCnsImcoCollection
            Return FilterByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPakingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.PakingGroup, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsImcoCollection
            Return FilterByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.PageNumber, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByPageNumber(ByVal searchValue As String) As TB_InwardCnsImcoCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsImcoCollection
            Return FilterByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Dim retCollection = New TB_InwardCnsImcoCollection()
            Dim _TB_InwardCnsImco As TB_InwardCnsImco

            For Each _TB_InwardCnsImco In Me.List
                If Match(comparer, _TB_InwardCnsImco.EMSNumber, searchValue) Then
                    retCollection.Add(_TB_InwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByEMSNumber(ByVal searchValue As String) As TB_InwardCnsImcoCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsImcoCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUNNO(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UNNO"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIMDGCode(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IMDGCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFlashPoint(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FlashPoint"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPakingGroup(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PakingGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPageNumber(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PageNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEMSNumber(ByVal sortDirection As SortDirection) As TB_InwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EMSNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardCnsPkgs))>public MustInherit class TB_InwardCnsPkgsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardCnsPkgs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardCnsPkgs
            Get
                return CType(Me.List(index),TB_InwardCnsPkgs)
            End Get
            Set(ByVal Value As TB_InwardCnsPkgs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCnsPkgsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardCnsPkgsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCnsPkgs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                if  Match(comparer,_TB_InwardCnsPkgs(propertyName) , searchValue) then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardCnsPkgs As TB_InwardCnsPkgs) As System.Int32
            Return Me.List.Add(newTB_InwardCnsPkgs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardCnsPkgs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.ID, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_InwardCnsPkgs
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.CntrID, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByPackageType(ByVal searchValue As System.String) As TB_InwardCnsPkgs
            Return FindByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.PackageType, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgs
            Return FindByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.NoOFPkgs, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByNoOFPkgs(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsPkgs
            Return FindByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.GW, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByGW(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsPkgs
            Return FindByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.CBM, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByCBM(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCnsPkgs
            Return FindByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.NET, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByNET(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCnsPkgs
            Return FindByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.FlashPoint, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFlashPoint(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIMDGCode(ByVal searchValue As System.String) As TB_InwardCnsPkgs
            Return FindByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.IMDGCode, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgs
            Return FindByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.PakingGroup, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByPakingGroup(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPakingGroup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgs
            Return FindByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.PageNumber, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByPageNumber(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgs
            Return FindByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs
            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.EMSNumber, searchValue) Then Return _TB_InwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByEMSNumber(ByVal searchValue As String) As TB_InwardCnsPkgs
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgs
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardCnsPkgsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.ID, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_InwardCnsPkgsCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.CntrID, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPackageType(ByVal searchValue As System.String) As TB_InwardCnsPkgsCollection
            Return FilterByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.PackageType, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgsCollection
            Return FilterByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.NoOFPkgs, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByNoOFPkgs(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsPkgsCollection
            Return FilterByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.GW, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByGW(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsPkgsCollection
            Return FilterByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.CBM, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByCBM(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCnsPkgsCollection
            Return FilterByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.NET, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByNET(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardCnsPkgsCollection
            Return FilterByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.FlashPoint, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFlashPoint(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIMDGCode(ByVal searchValue As System.String) As TB_InwardCnsPkgsCollection
            Return FilterByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.IMDGCode, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgsCollection
            Return FilterByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.PakingGroup, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByPakingGroup(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPakingGroup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgsCollection
            Return FilterByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.PageNumber, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByPageNumber(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCnsPkgsCollection
            Return FilterByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Dim retCollection = New TB_InwardCnsPkgsCollection()
            Dim _TB_InwardCnsPkgs As TB_InwardCnsPkgs

            For Each _TB_InwardCnsPkgs In Me.List
                If Match(comparer, _TB_InwardCnsPkgs.EMSNumber, searchValue) Then
                    retCollection.Add(_TB_InwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByEMSNumber(ByVal searchValue As String) As TB_InwardCnsPkgsCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsPkgsCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackageType(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PackageType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOFPkgs(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOFPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGW(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCBM(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CBM"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNET(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NET"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFlashPoint(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FlashPoint"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIMDGCode(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IMDGCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPakingGroup(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PakingGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPageNumber(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PageNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEMSNumber(ByVal sortDirection As SortDirection) As TB_InwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EMSNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardCnsTemprature))>public MustInherit class TB_InwardCnsTempratureCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardCnsTemprature))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardCnsTemprature
            Get
                return CType(Me.List(index),TB_InwardCnsTemprature)
            End Get
            Set(ByVal Value As TB_InwardCnsTemprature)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCnsTempratureCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Dim retCollection = New TB_InwardCnsTempratureCollection()
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature

            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardCnsTemprature)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardCnsTempratureCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCnsTemprature
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature

            For Each _TB_InwardCnsTemprature In Me.List
                if  Match(comparer,_TB_InwardCnsTemprature(propertyName) , searchValue) then Return _TB_InwardCnsTemprature
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardCnsTemprature As TB_InwardCnsTemprature) As System.Int32
            Return Me.List.Add(newTB_InwardCnsTemprature)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardCnsTemprature
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature
            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.ID, searchValue) Then Return _TB_InwardCnsTemprature
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_InwardCnsTemprature
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature
            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.CntrID, searchValue) Then Return _TB_InwardCnsTemprature
            Next

            Return Nothing
        End Function

        Public Function FindByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsTemprature
            Return FindByTempMin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature
            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.TempMin, searchValue) Then Return _TB_InwardCnsTemprature
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByTempMin(ByVal searchValue As String) As TB_InwardCnsTemprature
            Return FindByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTempMin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Return FindByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsTemprature
            Return FindByTempMax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature
            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.TempMax, searchValue) Then Return _TB_InwardCnsTemprature
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByTempMax(ByVal searchValue As String) As TB_InwardCnsTemprature
            Return FindByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTempMax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Return FindByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTemperatureBase(ByVal searchValue As System.String) As TB_InwardCnsTemprature
            Return FindByTemperatureBase(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTemperatureBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsTemprature
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature
            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.TemperatureBase, searchValue) Then Return _TB_InwardCnsTemprature
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardCnsTempratureCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Dim retCollection = New TB_InwardCnsTempratureCollection()
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature

            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.ID, searchValue) Then
                    retCollection.Add(_TB_InwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_InwardCnsTempratureCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Dim retCollection = New TB_InwardCnsTempratureCollection()
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature

            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.CntrID, searchValue) Then
                    retCollection.Add(_TB_InwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsTempratureCollection
            Return FilterByTempMin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Dim retCollection = New TB_InwardCnsTempratureCollection()
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature

            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.TempMin, searchValue) Then
                    retCollection.Add(_TB_InwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByTempMin(ByVal searchValue As String) As TB_InwardCnsTempratureCollection
            Return FilterByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTempMin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Return FilterByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardCnsTempratureCollection
            Return FilterByTempMax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Dim retCollection = New TB_InwardCnsTempratureCollection()
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature

            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.TempMax, searchValue) Then
                    retCollection.Add(_TB_InwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByTempMax(ByVal searchValue As String) As TB_InwardCnsTempratureCollection
            Return FilterByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTempMax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Return FilterByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTemperatureBase(ByVal searchValue As System.String) As TB_InwardCnsTempratureCollection
            Return FilterByTemperatureBase(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTemperatureBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCnsTempratureCollection
            Dim retCollection = New TB_InwardCnsTempratureCollection()
            Dim _TB_InwardCnsTemprature As TB_InwardCnsTemprature

            For Each _TB_InwardCnsTemprature In Me.List
                If Match(comparer, _TB_InwardCnsTemprature.TemperatureBase, searchValue) Then
                    retCollection.Add(_TB_InwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_InwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTempMin(ByVal sortDirection As SortDirection) As TB_InwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TempMin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTempMax(ByVal sortDirection As SortDirection) As TB_InwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TempMax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTemperatureBase(ByVal sortDirection As SortDirection) As TB_InwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TemperatureBase"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardCntrs))>public MustInherit class TB_InwardCntrsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardCntrs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardCntrs
            Get
                return CType(Me.List(index),TB_InwardCntrs)
            End Get
            Set(ByVal Value As TB_InwardCntrs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCntrsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardCntrsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCntrs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                if  Match(comparer,_TB_InwardCntrs(propertyName) , searchValue) then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardCntrs As TB_InwardCntrs) As System.Int32
            Return Me.List.Add(newTB_InwardCntrs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardCntrs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.ID, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_InwardCntrs
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.BLID, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCntrNo(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CntrNo, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCnSize(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CnSize, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CnType, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindBySealNo(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindBySealNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySealNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.SealNo, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCntrs
            Return FindByTW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.TW, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByTW(ByVal searchValue As String) As TB_InwardCntrs
            Return FindByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrs
            Return FindByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrs
            Return FindByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.GW, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByGW(ByVal searchValue As String) As TB_InwardCntrs
            Return FindByGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrs
            Return FindByGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrs
            Return FindByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CBM, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByCBM(ByVal searchValue As String) As TB_InwardCntrs
            Return FindByCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrs
            Return FindByCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrs
            Return FindByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.NET, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByNET(ByVal searchValue As String) As TB_InwardCntrs
            Return FindByNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrs
            Return FindByNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFLE(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByFLE(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFLE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.FLE, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindBySOC(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.SOC, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByPackageType(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.PackageType, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCntrs
            Return FindByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.NoOFPkgs, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByNoOFPkgs(ByVal searchValue As String) As TB_InwardCntrs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGoods(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.Goods, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardCntrs
            Return FindByIsOOG(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.IsOOG, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsOOG(ByVal searchValue As String) As TB_InwardCntrs
            Return FindByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsOOG(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrs
            Return FindByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMarks(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByMarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.Marks, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByPOLTerm(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByPOLTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOLTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.POLTerm, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByPODTerm(ByVal searchValue As System.String) As TB_InwardCntrs
            Return FindByPODTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPODTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrs
            Dim _TB_InwardCntrs As TB_InwardCntrs
            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.PODTerm, searchValue) Then Return _TB_InwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardCntrsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.ID, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InwardCntrsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.BLID, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrNo(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CntrNo, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnSize(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CnSize, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CnType, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySealNo(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterBySealNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySealNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.SealNo, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCntrsCollection
            Return FilterByTW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.TW, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByTW(ByVal searchValue As String) As TB_InwardCntrsCollection
            Return FilterByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Return FilterByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCollection
            Return FilterByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.GW, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByGW(ByVal searchValue As String) As TB_InwardCntrsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCollection
            Return FilterByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.CBM, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByCBM(ByVal searchValue As String) As TB_InwardCntrsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCollection
            Return FilterByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.NET, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByNET(ByVal searchValue As String) As TB_InwardCntrsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFLE(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByFLE(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFLE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.FLE, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySOC(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.SOC, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPackageType(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.PackageType, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardCntrsCollection
            Return FilterByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.NoOFPkgs, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByNoOFPkgs(ByVal searchValue As String) As TB_InwardCntrsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGoods(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.Goods, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardCntrsCollection
            Return FilterByIsOOG(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.IsOOG, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsOOG(ByVal searchValue As String) As TB_InwardCntrsCollection
            Return FilterByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsOOG(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Return FilterByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMarks(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByMarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.Marks, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOLTerm(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByPOLTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOLTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.POLTerm, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPODTerm(ByVal searchValue As System.String) As TB_InwardCntrsCollection
            Return FilterByPODTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPODTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCollection
            Dim retCollection = New TB_InwardCntrsCollection()
            Dim _TB_InwardCntrs As TB_InwardCntrs

            For Each _TB_InwardCntrs In Me.List
                If Match(comparer, _TB_InwardCntrs.PODTerm, searchValue) Then
                    retCollection.Add(_TB_InwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrNo(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnSize(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySealNo(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SealNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTW(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGW(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCBM(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CBM"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNET(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NET"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFLE(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FLE"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySOC(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SOC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackageType(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PackageType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOFPkgs(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOFPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGoods(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Goods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsOOG(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsOOG"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMarks(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Marks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOLTerm(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POLTerm"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPODTerm(ByVal sortDirection As SortDirection) As TB_InwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PODTerm"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardCntrsCharges))>public MustInherit class TB_InwardCntrsChargesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardCntrsCharges))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardCntrsCharges
            Get
                return CType(Me.List(index),TB_InwardCntrsCharges)
            End Get
            Set(ByVal Value As TB_InwardCntrsCharges)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCntrsChargesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardCntrsChargesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardCntrsCharges
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                if  Match(comparer,_TB_InwardCntrsCharges(propertyName) , searchValue) then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardCntrsCharges As TB_InwardCntrsCharges) As System.Int32
            Return Me.List.Add(newTB_InwardCntrsCharges)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardCntrsCharges
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.ID, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_InwardCntrsCharges
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.CntrID, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_InwardCntrsCharges
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.ChargesCode, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_InwardCntrsCharges
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.Currency, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCharges
            Return FindByUnitRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.UnitRate, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByUnitRate(ByVal searchValue As String) As TB_InwardCntrsCharges
            Return FindByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByUnitRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Return FindByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCharges
            Return FindByMEARate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.MEARate, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByMEARate(ByVal searchValue As String) As TB_InwardCntrsCharges
            Return FindByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMEARate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Return FindByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCharges
            Return FindByWGTrate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.WGTrate, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByWGTrate(ByVal searchValue As String) As TB_InwardCntrsCharges
            Return FindByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByWGTrate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Return FindByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFromPlace(ByVal searchValue As System.String) As TB_InwardCntrsCharges
            Return FindByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.FromPlace, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByToPlace(ByVal searchValue As System.String) As TB_InwardCntrsCharges
            Return FindByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.ToPlace, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCharges
            Return FindByMinRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.MinRate, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByMinRate(ByVal searchValue As String) As TB_InwardCntrsCharges
            Return FindByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMinRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Return FindByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTerms(ByVal searchValue As System.String) As TB_InwardCntrsCharges
            Return FindByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.Terms, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsCharges
            Return FindByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges
            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.RealAmount, searchValue) Then Return _TB_InwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByRealAmount(ByVal searchValue As String) As TB_InwardCntrsCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardCntrsChargesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.ID, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_InwardCntrsChargesCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.CntrID, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_InwardCntrsChargesCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_InwardCntrsChargesCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.Currency, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsChargesCollection
            Return FilterByUnitRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.UnitRate, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByUnitRate(ByVal searchValue As String) As TB_InwardCntrsChargesCollection
            Return FilterByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByUnitRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Return FilterByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsChargesCollection
            Return FilterByMEARate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.MEARate, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByMEARate(ByVal searchValue As String) As TB_InwardCntrsChargesCollection
            Return FilterByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMEARate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Return FilterByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsChargesCollection
            Return FilterByWGTrate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.WGTrate, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByWGTrate(ByVal searchValue As String) As TB_InwardCntrsChargesCollection
            Return FilterByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByWGTrate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Return FilterByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFromPlace(ByVal searchValue As System.String) As TB_InwardCntrsChargesCollection
            Return FilterByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.FromPlace, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByToPlace(ByVal searchValue As System.String) As TB_InwardCntrsChargesCollection
            Return FilterByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.ToPlace, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsChargesCollection
            Return FilterByMinRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.MinRate, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByMinRate(ByVal searchValue As String) As TB_InwardCntrsChargesCollection
            Return FilterByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMinRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Return FilterByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTerms(ByVal searchValue As System.String) As TB_InwardCntrsChargesCollection
            Return FilterByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.Terms, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_InwardCntrsChargesCollection
            Return FilterByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Dim retCollection = New TB_InwardCntrsChargesCollection()
            Dim _TB_InwardCntrsCharges As TB_InwardCntrsCharges

            For Each _TB_InwardCntrsCharges In Me.List
                If Match(comparer, _TB_InwardCntrsCharges.RealAmount, searchValue) Then
                    retCollection.Add(_TB_InwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByRealAmount(ByVal searchValue As String) As TB_InwardCntrsChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardCntrsChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUnitRate(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UnitRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMEARate(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MEARate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByWGTrate(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("WGTrate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFromPlace(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FromPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByToPlace(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ToPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMinRate(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MinRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTerms(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Terms"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRealAmount(ByVal sortDirection As SortDirection) As TB_InwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RealAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardDiscount))>public MustInherit class TB_InwardDiscountCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardDiscount))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardDiscount
            Get
                return CType(Me.List(index),TB_InwardDiscount)
            End Get
            Set(ByVal Value As TB_InwardDiscount)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardDiscountCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardDiscountCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardDiscount
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                if  Match(comparer,_TB_InwardDiscount(propertyName) , searchValue) then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardDiscount As TB_InwardDiscount) As System.Int32
            Return Me.List.Add(newTB_InwardDiscount)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardDiscount
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.ID, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_InwardDiscount
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.BLID, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FindBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_InwardDiscount
            Return FindBydFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.dFreeDays, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt32 
        Public Function FindBydFreeDays(ByVal searchValue As String) As TB_InwardDiscount
            Return FindBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBydFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_InwardDiscount
            Return FindBydPercent(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.dPercent, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt32 
        Public Function FindBydPercent(ByVal searchValue As String) As TB_InwardDiscount
            Return FindBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBydPercent(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardDiscount
            Return FindBydAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.dAmount, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindBydAmount(ByVal searchValue As String) As TB_InwardDiscount
            Return FindBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBydAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardDiscount
            Return FindByLineSetel(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.LineSetel, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByLineSetel(ByVal searchValue As String) As TB_InwardDiscount
            Return FindByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByLineSetel(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardDiscount
            Return FindByIsFDaysAsDiscount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.IsFDaysAsDiscount, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As String) As TB_InwardDiscount
            Return FindByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardDiscount
            Return FindBySpecialCalculate(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.SpecialCalculate, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindBySpecialCalculate(ByVal searchValue As String) As TB_InwardDiscount
            Return FindBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySpecialCalculate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardDiscount
            Return FindByPerDay20(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.PerDay20, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByPerDay20(ByVal searchValue As String) As TB_InwardDiscount
            Return FindByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPerDay20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardDiscount
            Return FindByPerDay40(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.PerDay40, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByPerDay40(ByVal searchValue As String) As TB_InwardDiscount
            Return FindByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPerDay40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardDiscount
            Return FindByPerDay45(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.PerDay45, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByPerDay45(ByVal searchValue As String) As TB_InwardDiscount
            Return FindByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPerDay45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscount
            Return FindByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDetentionID(ByVal searchValue As System.Guid) As TB_InwardDiscount
            Return FindByDetentionID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetentionID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.DetentionID, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FindByNoTax(ByVal searchValue As System.String) As TB_InwardDiscount
            Return FindByNoTax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoTax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardDiscount
            Dim _TB_InwardDiscount As TB_InwardDiscount
            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.NoTax, searchValue) Then Return _TB_InwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardDiscountCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.ID, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InwardDiscountCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.BLID, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_InwardDiscountCollection
            Return FilterBydFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.dFreeDays, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt32
        Public Function FilterBydFreeDays(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBydFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function

        Public Function FilterBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_InwardDiscountCollection
            Return FilterBydPercent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.dPercent, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt32
        Public Function FilterBydPercent(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBydPercent(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function

        Public Function FilterBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_InwardDiscountCollection
            Return FilterBydAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.dAmount, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterBydAmount(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBydAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardDiscountCollection
            Return FilterByLineSetel(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.LineSetel, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByLineSetel(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByLineSetel(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardDiscountCollection
            Return FilterByIsFDaysAsDiscount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.IsFDaysAsDiscount, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsFDaysAsDiscount(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsFDaysAsDiscount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_InwardDiscountCollection
            Return FilterBySpecialCalculate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.SpecialCalculate, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterBySpecialCalculate(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySpecialCalculate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardDiscountCollection
            Return FilterByPerDay20(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.PerDay20, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByPerDay20(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPerDay20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardDiscountCollection
            Return FilterByPerDay40(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.PerDay40, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByPerDay40(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPerDay40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardDiscountCollection
            Return FilterByPerDay45(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.PerDay45, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByPerDay45(ByVal searchValue As String) As TB_InwardDiscountCollection
            Return FilterByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPerDay45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Return FilterByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDetentionID(ByVal searchValue As System.Guid) As TB_InwardDiscountCollection
            Return FilterByDetentionID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetentionID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.DetentionID, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoTax(ByVal searchValue As System.String) As TB_InwardDiscountCollection
            Return FilterByNoTax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoTax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardDiscountCollection
            Dim retCollection = New TB_InwardDiscountCollection()
            Dim _TB_InwardDiscount As TB_InwardDiscount

            For Each _TB_InwardDiscount In Me.List
                If Match(comparer, _TB_InwardDiscount.NoTax, searchValue) Then
                    retCollection.Add(_TB_InwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydFreeDays(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("dFreeDays"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydPercent(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("dPercent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydAmount(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("dAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLineSetel(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LineSetel"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsFDaysAsDiscount(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsFDaysAsDiscount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySpecialCalculate(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SpecialCalculate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPerDay20(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PerDay20"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPerDay40(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PerDay40"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPerDay45(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PerDay45"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetentionID(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DetentionID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoTax(ByVal sortDirection As SortDirection) As TB_InwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoTax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_InwardStatus))>public MustInherit class TB_InwardStatusCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_InwardStatus))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_InwardStatus
            Get
                return CType(Me.List(index),TB_InwardStatus)
            End Get
            Set(ByVal Value As TB_InwardStatus)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardStatusCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus(propertyName), searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_InwardStatusCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_InwardStatus
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                if  Match(comparer,_TB_InwardStatus(propertyName) , searchValue) then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_InwardStatus As TB_InwardStatus) As System.Int32
            Return Me.List.Add(newTB_InwardStatus)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_InwardStatus
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.ID, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_InwardStatus
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.BLID, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

        Public Function FindByDoOffice(ByVal searchValue As System.String) As TB_InwardStatus
            Return FindByDoOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDoOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.DoOffice, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

        Public Function FindByDoDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardStatus
            Return FindByDoDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDoDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.DoDate, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByDoDate(ByVal searchValue As String) As TB_InwardStatus
            Return FindByDoDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDoDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatus
            Return FindByDoDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDetention(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardStatus
            Return FindByDetention(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetention(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.Detention, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByDetention(ByVal searchValue As String) As TB_InwardStatus
            Return FindByDetention(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDetention(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatus
            Return FindByDetention(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDiscont(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardStatus
            Return FindByDiscont(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDiscont(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.Discont, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByDiscont(ByVal searchValue As String) As TB_InwardStatus
            Return FindByDiscont(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDiscont(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatus
            Return FindByDiscont(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySetelmentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardStatus
            Return FindBySetelmentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySetelmentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.SetelmentDate, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindBySetelmentDate(ByVal searchValue As String) As TB_InwardStatus
            Return FindBySetelmentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySetelmentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatus
            Return FindBySetelmentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByInvoiceToClinet(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardStatus
            Return FindByInvoiceToClinet(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceToClinet(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.InvoiceToClinet, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByInvoiceToClinet(ByVal searchValue As String) As TB_InwardStatus
            Return FindByInvoiceToClinet(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByInvoiceToClinet(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatus
            Return FindByInvoiceToClinet(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByReportToCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardStatus
            Return FindByReportToCarrier(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReportToCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.ReportToCarrier, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByReportToCarrier(ByVal searchValue As String) As TB_InwardStatus
            Return FindByReportToCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReportToCarrier(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatus
            Return FindByReportToCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByClosed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardStatus
            Return FindByClosed(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClosed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardStatus
            Dim _TB_InwardStatus As TB_InwardStatus
            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.Closed, searchValue) Then Return _TB_InwardStatus
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByClosed(ByVal searchValue As String) As TB_InwardStatus
            Return FindByClosed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByClosed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatus
            Return FindByClosed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_InwardStatusCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.ID, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_InwardStatusCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.BLID, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDoOffice(ByVal searchValue As System.String) As TB_InwardStatusCollection
            Return FilterByDoOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDoOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.DoOffice, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDoDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardStatusCollection
            Return FilterByDoDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDoDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.DoDate, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByDoDate(ByVal searchValue As String) As TB_InwardStatusCollection
            Return FilterByDoDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDoDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Return FilterByDoDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDetention(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardStatusCollection
            Return FilterByDetention(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetention(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.Detention, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByDetention(ByVal searchValue As String) As TB_InwardStatusCollection
            Return FilterByDetention(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDetention(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Return FilterByDetention(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDiscont(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_InwardStatusCollection
            Return FilterByDiscont(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDiscont(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.Discont, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByDiscont(ByVal searchValue As String) As TB_InwardStatusCollection
            Return FilterByDiscont(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDiscont(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Return FilterByDiscont(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySetelmentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardStatusCollection
            Return FilterBySetelmentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySetelmentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.SetelmentDate, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterBySetelmentDate(ByVal searchValue As String) As TB_InwardStatusCollection
            Return FilterBySetelmentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySetelmentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Return FilterBySetelmentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByInvoiceToClinet(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardStatusCollection
            Return FilterByInvoiceToClinet(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceToClinet(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.InvoiceToClinet, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByInvoiceToClinet(ByVal searchValue As String) As TB_InwardStatusCollection
            Return FilterByInvoiceToClinet(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByInvoiceToClinet(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Return FilterByInvoiceToClinet(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByReportToCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_InwardStatusCollection
            Return FilterByReportToCarrier(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReportToCarrier(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.ReportToCarrier, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByReportToCarrier(ByVal searchValue As String) As TB_InwardStatusCollection
            Return FilterByReportToCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReportToCarrier(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Return FilterByReportToCarrier(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByClosed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_InwardStatusCollection
            Return FilterByClosed(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClosed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Dim retCollection = New TB_InwardStatusCollection()
            Dim _TB_InwardStatus As TB_InwardStatus

            For Each _TB_InwardStatus In Me.List
                If Match(comparer, _TB_InwardStatus.Closed, searchValue) Then
                    retCollection.Add(_TB_InwardStatus)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByClosed(ByVal searchValue As String) As TB_InwardStatusCollection
            Return FilterByClosed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByClosed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_InwardStatusCollection
            Return FilterByClosed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDoOffice(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DoOffice"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDoDate(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DoDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetention(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Detention"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDiscont(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Discont"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySetelmentDate(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SetelmentDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceToClinet(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceToClinet"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReportToCarrier(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReportToCarrier"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClosed(ByVal sortDirection As SortDirection) As TB_InwardStatusCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Closed"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ISOType))>public MustInherit class TB_ISOTypeCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ISOType))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ISOType
            Get
                return CType(Me.List(index),TB_ISOType)
            End Get
            Set(ByVal Value As TB_ISOType)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ISOTypeCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType(propertyName), searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ISOTypeCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ISOType
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                if  Match(comparer,_TB_ISOType(propertyName) , searchValue) then Return _TB_ISOType
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ISOType As TB_ISOType) As System.Int32
            Return Me.List.Add(newTB_ISOType)
        End Function
			
		

        Public Function FindByISOTypeID(ByVal searchValue As System.Guid) As TB_ISOType
            Return FindByISOTypeID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByISOTypeID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.ISOTypeID, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindBySizeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOType
            Return FindBySizeIS(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySizeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.SizeIS, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlByte 
        Public Function FindBySizeIS(ByVal searchValue As String) As TB_ISOType
            Return FindBySizeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySizeIS(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOType
            Return FindBySizeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTypeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOType
            Return FindByTypeIS(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTypeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.TypeIS, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlByte 
        Public Function FindByTypeIS(ByVal searchValue As String) As TB_ISOType
            Return FindByTypeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTypeIS(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOType
            Return FindByTypeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByHeightIS(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOType
            Return FindByHeightIS(searchValue, CompareType.Exact)
        End Function


        Public Function FindByHeightIS(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.HeightIS, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlByte 
        Public Function FindByHeightIS(ByVal searchValue As String) As TB_ISOType
            Return FindByHeightIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByHeightIS(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOType
            Return FindByHeightIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDispName(ByVal searchValue As System.String) As TB_ISOType
            Return FindByDispName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDispName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.DispName, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByISOValue(ByVal searchValue As System.String) As TB_ISOType
            Return FindByISOValue(searchValue, CompareType.Exact)
        End Function


        Public Function FindByISOValue(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.ISOValue, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByWHLCode(ByVal searchValue As System.String) As TB_ISOType
            Return FindByWHLCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByWHLCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLCode, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByTareWeight(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ISOType
            Return FindByTareWeight(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTareWeight(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.TareWeight, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTareWeight(ByVal searchValue As String) As TB_ISOType
            Return FindByTareWeight(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTareWeight(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOType
            Return FindByTareWeight(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByWHLSize(ByVal searchValue As System.String) As TB_ISOType
            Return FindByWHLSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByWHLSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLSize, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByWHLType(ByVal searchValue As System.String) As TB_ISOType
            Return FindByWHLType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByWHLType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLType, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByWHLHeight(ByVal searchValue As System.String) As TB_ISOType
            Return FindByWHLHeight(searchValue, CompareType.Exact)
        End Function


        Public Function FindByWHLHeight(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLHeight, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByPSOType(ByVal searchValue As System.String) As TB_ISOType
            Return FindByPSOType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPSOType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.PSOType, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByTEU(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOType
            Return FindByTEU(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTEU(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.TEU, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlByte 
        Public Function FindByTEU(ByVal searchValue As String) As TB_ISOType
            Return FindByTEU(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTEU(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOType
            Return FindByTEU(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByOurType(ByVal searchValue As System.String) As TB_ISOType
            Return FindByOurType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOurType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.OurType, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FindByInGroup(ByVal searchValue As System.String) As TB_ISOType
            Return FindByInGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOType
            Dim _TB_ISOType As TB_ISOType
            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.InGroup, searchValue) Then Return _TB_ISOType
            Next

            Return Nothing
        End Function

        Public Function FilterByISOTypeID(ByVal searchValue As System.Guid) As TB_ISOTypeCollection
            Return FilterByISOTypeID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByISOTypeID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.ISOTypeID, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySizeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOTypeCollection
            Return FilterBySizeIS(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySizeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.SizeIS, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlByte
        Public Function FilterBySizeIS(ByVal searchValue As String) As TB_ISOTypeCollection
            Return FilterBySizeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySizeIS(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Return FilterBySizeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTypeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOTypeCollection
            Return FilterByTypeIS(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTypeIS(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.TypeIS, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlByte
        Public Function FilterByTypeIS(ByVal searchValue As String) As TB_ISOTypeCollection
            Return FilterByTypeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTypeIS(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Return FilterByTypeIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function

        Public Function FilterByHeightIS(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOTypeCollection
            Return FilterByHeightIS(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByHeightIS(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.HeightIS, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlByte
        Public Function FilterByHeightIS(ByVal searchValue As String) As TB_ISOTypeCollection
            Return FilterByHeightIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByHeightIS(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Return FilterByHeightIS(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDispName(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByDispName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDispName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.DispName, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByISOValue(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByISOValue(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByISOValue(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.ISOValue, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByWHLCode(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByWHLCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByWHLCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLCode, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTareWeight(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_ISOTypeCollection
            Return FilterByTareWeight(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTareWeight(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.TareWeight, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTareWeight(ByVal searchValue As String) As TB_ISOTypeCollection
            Return FilterByTareWeight(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTareWeight(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Return FilterByTareWeight(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByWHLSize(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByWHLSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByWHLSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLSize, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByWHLType(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByWHLType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByWHLType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLType, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByWHLHeight(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByWHLHeight(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByWHLHeight(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.WHLHeight, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPSOType(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByPSOType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPSOType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.PSOType, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTEU(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_ISOTypeCollection
            Return FilterByTEU(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTEU(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.TEU, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlByte
        Public Function FilterByTEU(ByVal searchValue As String) As TB_ISOTypeCollection
            Return FilterByTEU(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTEU(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Return FilterByTEU(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function

        Public Function FilterByOurType(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByOurType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOurType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.OurType, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInGroup(ByVal searchValue As System.String) As TB_ISOTypeCollection
            Return FilterByInGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ISOTypeCollection
            Dim retCollection = New TB_ISOTypeCollection()
            Dim _TB_ISOType As TB_ISOType

            For Each _TB_ISOType In Me.List
                If Match(comparer, _TB_ISOType.InGroup, searchValue) Then
                    retCollection.Add(_TB_ISOType)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByISOTypeID(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ISOTypeID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySizeIS(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SizeIS"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTypeIS(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TypeIS"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByHeightIS(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("HeightIS"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDispName(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DispName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByISOValue(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ISOValue"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByWHLCode(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("WHLCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTareWeight(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TareWeight"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByWHLSize(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("WHLSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByWHLType(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("WHLType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByWHLHeight(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("WHLHeight"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPSOType(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PSOType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTEU(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TEU"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOurType(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OurType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInGroup(ByVal sortDirection As SortDirection) As TB_ISOTypeCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Lines))>public MustInherit class TB_LinesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Lines))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Lines
            Get
                return CType(Me.List(index),TB_Lines)
            End Get
            Set(ByVal Value As TB_Lines)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_LinesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_LinesCollection
            Dim retCollection = New TB_LinesCollection()
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines(propertyName), searchValue) Then
                    retCollection.Add(_TB_Lines)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_LinesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_LinesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Lines
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Lines
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                if  Match(comparer,_TB_Lines(propertyName) , searchValue) then Return _TB_Lines
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Lines As TB_Lines) As System.Int32
            Return Me.List.Add(newTB_Lines)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Lines
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Lines
            Dim _TB_Lines As TB_Lines
            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.ID, searchValue) Then Return _TB_Lines
            Next

            Return Nothing
        End Function

        Public Function FindByLineCode(ByVal searchValue As System.String) As TB_Lines
            Return FindByLineCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLineCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Lines
            Dim _TB_Lines As TB_Lines
            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.LineCode, searchValue) Then Return _TB_Lines
            Next

            Return Nothing
        End Function

        Public Function FindByLineName(ByVal searchValue As System.String) As TB_Lines
            Return FindByLineName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLineName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Lines
            Dim _TB_Lines As TB_Lines
            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.LineName, searchValue) Then Return _TB_Lines
            Next

            Return Nothing
        End Function

        Public Function FindByEDICode(ByVal searchValue As System.String) As TB_Lines
            Return FindByEDICode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEDICode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Lines
            Dim _TB_Lines As TB_Lines
            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.EDICode, searchValue) Then Return _TB_Lines
            Next

            Return Nothing
        End Function

        Public Function FindByAddress(ByVal searchValue As System.String) As TB_Lines
            Return FindByAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Lines
            Dim _TB_Lines As TB_Lines
            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.Address, searchValue) Then Return _TB_Lines
            Next

            Return Nothing
        End Function

        Public Function FindByCountry(ByVal searchValue As System.String) As TB_Lines
            Return FindByCountry(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCountry(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Lines
            Dim _TB_Lines As TB_Lines
            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.Country, searchValue) Then Return _TB_Lines
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_LinesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LinesCollection
            Dim retCollection = New TB_LinesCollection()
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.ID, searchValue) Then
                    retCollection.Add(_TB_Lines)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLineCode(ByVal searchValue As System.String) As TB_LinesCollection
            Return FilterByLineCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLineCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LinesCollection
            Dim retCollection = New TB_LinesCollection()
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.LineCode, searchValue) Then
                    retCollection.Add(_TB_Lines)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLineName(ByVal searchValue As System.String) As TB_LinesCollection
            Return FilterByLineName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLineName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LinesCollection
            Dim retCollection = New TB_LinesCollection()
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.LineName, searchValue) Then
                    retCollection.Add(_TB_Lines)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEDICode(ByVal searchValue As System.String) As TB_LinesCollection
            Return FilterByEDICode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEDICode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LinesCollection
            Dim retCollection = New TB_LinesCollection()
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.EDICode, searchValue) Then
                    retCollection.Add(_TB_Lines)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAddress(ByVal searchValue As System.String) As TB_LinesCollection
            Return FilterByAddress(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAddress(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LinesCollection
            Dim retCollection = New TB_LinesCollection()
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.Address, searchValue) Then
                    retCollection.Add(_TB_Lines)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCountry(ByVal searchValue As System.String) As TB_LinesCollection
            Return FilterByCountry(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCountry(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LinesCollection
            Dim retCollection = New TB_LinesCollection()
            Dim _TB_Lines As TB_Lines

            For Each _TB_Lines In Me.List
                If Match(comparer, _TB_Lines.Country, searchValue) Then
                    retCollection.Add(_TB_Lines)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_LinesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLineCode(ByVal sortDirection As SortDirection) As TB_LinesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LineCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLineName(ByVal sortDirection As SortDirection) As TB_LinesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LineName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEDICode(ByVal sortDirection As SortDirection) As TB_LinesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EDICode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAddress(ByVal sortDirection As SortDirection) As TB_LinesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Address"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCountry(ByVal sortDirection As SortDirection) As TB_LinesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Country"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Log))>public MustInherit class TB_LogCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Log))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Log
            Get
                return CType(Me.List(index),TB_Log)
            End Get
            Set(ByVal Value As TB_Log)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_LogCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log(propertyName), searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_LogCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Log
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                if  Match(comparer,_TB_Log(propertyName) , searchValue) then Return _TB_Log
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Log As TB_Log) As System.Int32
            Return Me.List.Add(newTB_Log)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Log
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.ID, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

        Public Function FindByDataID(ByVal searchValue As System.Guid) As TB_Log
            Return FindByDataID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDataID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.DataID, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

        Public Function FindByTableNM(ByVal searchValue As System.String) As TB_Log
            Return FindByTableNM(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTableNM(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.TableNM, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_Log
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.Remarks, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

        Public Function FindByAction(ByVal searchValue As System.String) As TB_Log
            Return FindByAction(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAction(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.Action, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

        Public Function FindByLogText(ByVal searchValue As System.String) As TB_Log
            Return FindByLogText(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLogText(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.LogText, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

        Public Function FindByLastUpdate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Log
            Return FindByLastUpdate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLastUpdate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.LastUpdate, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByLastUpdate(ByVal searchValue As String) As TB_Log
            Return FindByLastUpdate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByLastUpdate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Log
            Return FindByLastUpdate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLastUser(ByVal searchValue As System.String) As TB_Log
            Return FindByLastUser(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLastUser(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Log
            Dim _TB_Log As TB_Log
            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.LastUser, searchValue) Then Return _TB_Log
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_LogCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.ID, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDataID(ByVal searchValue As System.Guid) As TB_LogCollection
            Return FilterByDataID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDataID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.DataID, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTableNM(ByVal searchValue As System.String) As TB_LogCollection
            Return FilterByTableNM(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTableNM(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.TableNM, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_LogCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.Remarks, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAction(ByVal searchValue As System.String) As TB_LogCollection
            Return FilterByAction(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAction(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.Action, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLogText(ByVal searchValue As System.String) As TB_LogCollection
            Return FilterByLogText(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLogText(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.LogText, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLastUpdate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_LogCollection
            Return FilterByLastUpdate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLastUpdate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.LastUpdate, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByLastUpdate(ByVal searchValue As String) As TB_LogCollection
            Return FilterByLastUpdate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByLastUpdate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_LogCollection
            Return FilterByLastUpdate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLastUser(ByVal searchValue As System.String) As TB_LogCollection
            Return FilterByLastUser(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLastUser(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogCollection
            Dim retCollection = New TB_LogCollection()
            Dim _TB_Log As TB_Log

            For Each _TB_Log In Me.List
                If Match(comparer, _TB_Log.LastUser, searchValue) Then
                    retCollection.Add(_TB_Log)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDataID(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DataID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTableNM(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TableNM"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAction(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Action"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLogText(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LogText"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLastUpdate(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LastUpdate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLastUser(ByVal sortDirection As SortDirection) As TB_LogCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LastUser"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_LogDetails))>public MustInherit class TB_LogDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_LogDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_LogDetails
            Get
                return CType(Me.List(index),TB_LogDetails)
            End Get
            Set(ByVal Value As TB_LogDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_LogDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_LogDetailsCollection
            Dim retCollection = New TB_LogDetailsCollection()
            Dim _TB_LogDetails As TB_LogDetails

            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_LogDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_LogDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_LogDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_LogDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_LogDetails
            Dim _TB_LogDetails As TB_LogDetails

            For Each _TB_LogDetails In Me.List
                if  Match(comparer,_TB_LogDetails(propertyName) , searchValue) then Return _TB_LogDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_LogDetails As TB_LogDetails) As System.Int32
            Return Me.List.Add(newTB_LogDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_LogDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogDetails
            Dim _TB_LogDetails As TB_LogDetails
            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.ID, searchValue) Then Return _TB_LogDetails
            Next

            Return Nothing
        End Function

        Public Function FindByLogID(ByVal searchValue As System.Guid) As TB_LogDetails
            Return FindByLogID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLogID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogDetails
            Dim _TB_LogDetails As TB_LogDetails
            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.LogID, searchValue) Then Return _TB_LogDetails
            Next

            Return Nothing
        End Function

        Public Function FindByFieldName(ByVal searchValue As System.String) As TB_LogDetails
            Return FindByFieldName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFieldName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogDetails
            Dim _TB_LogDetails As TB_LogDetails
            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.FieldName, searchValue) Then Return _TB_LogDetails
            Next

            Return Nothing
        End Function

        Public Function FindByOldValue(ByVal searchValue As System.String) As TB_LogDetails
            Return FindByOldValue(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOldValue(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogDetails
            Dim _TB_LogDetails As TB_LogDetails
            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.OldValue, searchValue) Then Return _TB_LogDetails
            Next

            Return Nothing
        End Function

        Public Function FindByNewValue(ByVal searchValue As System.String) As TB_LogDetails
            Return FindByNewValue(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNewValue(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogDetails
            Dim _TB_LogDetails As TB_LogDetails
            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.NewValue, searchValue) Then Return _TB_LogDetails
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_LogDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogDetailsCollection
            Dim retCollection = New TB_LogDetailsCollection()
            Dim _TB_LogDetails As TB_LogDetails

            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.ID, searchValue) Then
                    retCollection.Add(_TB_LogDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLogID(ByVal searchValue As System.Guid) As TB_LogDetailsCollection
            Return FilterByLogID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLogID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogDetailsCollection
            Dim retCollection = New TB_LogDetailsCollection()
            Dim _TB_LogDetails As TB_LogDetails

            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.LogID, searchValue) Then
                    retCollection.Add(_TB_LogDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFieldName(ByVal searchValue As System.String) As TB_LogDetailsCollection
            Return FilterByFieldName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFieldName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogDetailsCollection
            Dim retCollection = New TB_LogDetailsCollection()
            Dim _TB_LogDetails As TB_LogDetails

            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.FieldName, searchValue) Then
                    retCollection.Add(_TB_LogDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByOldValue(ByVal searchValue As System.String) As TB_LogDetailsCollection
            Return FilterByOldValue(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOldValue(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogDetailsCollection
            Dim retCollection = New TB_LogDetailsCollection()
            Dim _TB_LogDetails As TB_LogDetails

            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.OldValue, searchValue) Then
                    retCollection.Add(_TB_LogDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNewValue(ByVal searchValue As System.String) As TB_LogDetailsCollection
            Return FilterByNewValue(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNewValue(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogDetailsCollection
            Dim retCollection = New TB_LogDetailsCollection()
            Dim _TB_LogDetails As TB_LogDetails

            For Each _TB_LogDetails In Me.List
                If Match(comparer, _TB_LogDetails.NewValue, searchValue) Then
                    retCollection.Add(_TB_LogDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_LogDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLogID(ByVal sortDirection As SortDirection) As TB_LogDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LogID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFieldName(ByVal sortDirection As SortDirection) As TB_LogDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FieldName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOldValue(ByVal sortDirection As SortDirection) As TB_LogDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OldValue"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNewValue(ByVal sortDirection As SortDirection) As TB_LogDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NewValue"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_LogMaster))>public MustInherit class TB_LogMasterCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_LogMaster))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_LogMaster
            Get
                return CType(Me.List(index),TB_LogMaster)
            End Get
            Set(ByVal Value As TB_LogMaster)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_LogMasterCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_LogMasterCollection
            Dim retCollection = New TB_LogMasterCollection()
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster(propertyName), searchValue) Then
                    retCollection.Add(_TB_LogMaster)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_LogMasterCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_LogMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_LogMaster
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_LogMaster
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                if  Match(comparer,_TB_LogMaster(propertyName) , searchValue) then Return _TB_LogMaster
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_LogMaster As TB_LogMaster) As System.Int32
            Return Me.List.Add(newTB_LogMaster)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_LogMaster
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogMaster
            Dim _TB_LogMaster As TB_LogMaster
            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ID, searchValue) Then Return _TB_LogMaster
            Next

            Return Nothing
        End Function

        Public Function FindByTBName(ByVal searchValue As System.String) As TB_LogMaster
            Return FindByTBName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTBName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogMaster
            Dim _TB_LogMaster As TB_LogMaster
            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.TBName, searchValue) Then Return _TB_LogMaster
            Next

            Return Nothing
        End Function

        Public Function FindByTableKey(ByVal searchValue As System.Guid) As TB_LogMaster
            Return FindByTableKey(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTableKey(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogMaster
            Dim _TB_LogMaster As TB_LogMaster
            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.TableKey, searchValue) Then Return _TB_LogMaster
            Next

            Return Nothing
        End Function

        Public Function FindByActionUser(ByVal searchValue As System.String) As TB_LogMaster
            Return FindByActionUser(searchValue, CompareType.Exact)
        End Function


        Public Function FindByActionUser(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogMaster
            Dim _TB_LogMaster As TB_LogMaster
            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ActionUser, searchValue) Then Return _TB_LogMaster
            Next

            Return Nothing
        End Function

        Public Function FindByActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_LogMaster
            Return FindByActionTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_LogMaster
            Dim _TB_LogMaster As TB_LogMaster
            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ActionTime, searchValue) Then Return _TB_LogMaster
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByActionTime(ByVal searchValue As String) As TB_LogMaster
            Return FindByActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByActionTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_LogMaster
            Return FindByActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByActionType(ByVal searchValue As System.String) As TB_LogMaster
            Return FindByActionType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByActionType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogMaster
            Dim _TB_LogMaster As TB_LogMaster
            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ActionType, searchValue) Then Return _TB_LogMaster
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_LogMasterCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogMasterCollection
            Dim retCollection = New TB_LogMasterCollection()
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ID, searchValue) Then
                    retCollection.Add(_TB_LogMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTBName(ByVal searchValue As System.String) As TB_LogMasterCollection
            Return FilterByTBName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTBName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogMasterCollection
            Dim retCollection = New TB_LogMasterCollection()
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.TBName, searchValue) Then
                    retCollection.Add(_TB_LogMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTableKey(ByVal searchValue As System.Guid) As TB_LogMasterCollection
            Return FilterByTableKey(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTableKey(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_LogMasterCollection
            Dim retCollection = New TB_LogMasterCollection()
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.TableKey, searchValue) Then
                    retCollection.Add(_TB_LogMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByActionUser(ByVal searchValue As System.String) As TB_LogMasterCollection
            Return FilterByActionUser(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByActionUser(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogMasterCollection
            Dim retCollection = New TB_LogMasterCollection()
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ActionUser, searchValue) Then
                    retCollection.Add(_TB_LogMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_LogMasterCollection
            Return FilterByActionTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByActionTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_LogMasterCollection
            Dim retCollection = New TB_LogMasterCollection()
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ActionTime, searchValue) Then
                    retCollection.Add(_TB_LogMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByActionTime(ByVal searchValue As String) As TB_LogMasterCollection
            Return FilterByActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByActionTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_LogMasterCollection
            Return FilterByActionTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByActionType(ByVal searchValue As System.String) As TB_LogMasterCollection
            Return FilterByActionType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByActionType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_LogMasterCollection
            Dim retCollection = New TB_LogMasterCollection()
            Dim _TB_LogMaster As TB_LogMaster

            For Each _TB_LogMaster In Me.List
                If Match(comparer, _TB_LogMaster.ActionType, searchValue) Then
                    retCollection.Add(_TB_LogMaster)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_LogMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTBName(ByVal sortDirection As SortDirection) As TB_LogMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TBName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTableKey(ByVal sortDirection As SortDirection) As TB_LogMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TableKey"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByActionUser(ByVal sortDirection As SortDirection) As TB_LogMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ActionUser"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByActionTime(ByVal sortDirection As SortDirection) As TB_LogMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ActionTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByActionType(ByVal sortDirection As SortDirection) As TB_LogMasterCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ActionType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_MenuItems))>public MustInherit class TB_MenuItemsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_MenuItems))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_MenuItems
            Get
                return CType(Me.List(index),TB_MenuItems)
            End Get
            Set(ByVal Value As TB_MenuItems)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_MenuItemsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_MenuItemsCollection
            Dim retCollection = New TB_MenuItemsCollection()
            Dim _TB_MenuItems As TB_MenuItems

            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems(propertyName), searchValue) Then
                    retCollection.Add(_TB_MenuItems)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_MenuItemsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_MenuItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_MenuItems
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_MenuItems
            Dim _TB_MenuItems As TB_MenuItems

            For Each _TB_MenuItems In Me.List
                if  Match(comparer,_TB_MenuItems(propertyName) , searchValue) then Return _TB_MenuItems
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_MenuItems As TB_MenuItems) As System.Int32
            Return Me.List.Add(newTB_MenuItems)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_MenuItems
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_MenuItems
            Dim _TB_MenuItems As TB_MenuItems
            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.ID, searchValue) Then Return _TB_MenuItems
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_MenuItems
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_MenuItems
            Dim _TB_MenuItems As TB_MenuItems
            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.Description, searchValue) Then Return _TB_MenuItems
            Next

            Return Nothing
        End Function

        Public Function FindByItemLevel(ByVal searchValue As System.String) As TB_MenuItems
            Return FindByItemLevel(searchValue, CompareType.Exact)
        End Function


        Public Function FindByItemLevel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_MenuItems
            Dim _TB_MenuItems As TB_MenuItems
            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.ItemLevel, searchValue) Then Return _TB_MenuItems
            Next

            Return Nothing
        End Function

        Public Function FindByItemKey(ByVal searchValue As System.String) As TB_MenuItems
            Return FindByItemKey(searchValue, CompareType.Exact)
        End Function


        Public Function FindByItemKey(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_MenuItems
            Dim _TB_MenuItems As TB_MenuItems
            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.ItemKey, searchValue) Then Return _TB_MenuItems
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_MenuItemsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_MenuItemsCollection
            Dim retCollection = New TB_MenuItemsCollection()
            Dim _TB_MenuItems As TB_MenuItems

            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.ID, searchValue) Then
                    retCollection.Add(_TB_MenuItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_MenuItemsCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_MenuItemsCollection
            Dim retCollection = New TB_MenuItemsCollection()
            Dim _TB_MenuItems As TB_MenuItems

            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.Description, searchValue) Then
                    retCollection.Add(_TB_MenuItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByItemLevel(ByVal searchValue As System.String) As TB_MenuItemsCollection
            Return FilterByItemLevel(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByItemLevel(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_MenuItemsCollection
            Dim retCollection = New TB_MenuItemsCollection()
            Dim _TB_MenuItems As TB_MenuItems

            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.ItemLevel, searchValue) Then
                    retCollection.Add(_TB_MenuItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByItemKey(ByVal searchValue As System.String) As TB_MenuItemsCollection
            Return FilterByItemKey(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByItemKey(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_MenuItemsCollection
            Dim retCollection = New TB_MenuItemsCollection()
            Dim _TB_MenuItems As TB_MenuItems

            For Each _TB_MenuItems In Me.List
                If Match(comparer, _TB_MenuItems.ItemKey, searchValue) Then
                    retCollection.Add(_TB_MenuItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_MenuItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_MenuItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByItemLevel(ByVal sortDirection As SortDirection) As TB_MenuItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ItemLevel"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByItemKey(ByVal sortDirection As SortDirection) As TB_MenuItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ItemKey"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_NOSPaymentTyps))>public MustInherit class TB_NOSPaymentTypsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_NOSPaymentTyps))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_NOSPaymentTyps
            Get
                return CType(Me.List(index),TB_NOSPaymentTyps)
            End Get
            Set(ByVal Value As TB_NOSPaymentTyps)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_NOSPaymentTypsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps(propertyName), searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_NOSPaymentTypsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_NOSPaymentTyps
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                if  Match(comparer,_TB_NOSPaymentTyps(propertyName) , searchValue) then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_NOSPaymentTyps As TB_NOSPaymentTyps) As System.Int32
            Return Me.List.Add(newTB_NOSPaymentTyps)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_NOSPaymentTyps
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.ID, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByPaymentType(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByPaymentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaymentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.PaymentType, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.Description, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.Line, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByPort(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.Port, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByBANK(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByBANK(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBANK(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.BANK, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByDBAccount(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByDBAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDBAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBAccount, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByDBLevel1(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByDBLevel1(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDBLevel1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel1, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByDBLevel2(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByDBLevel2(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDBLevel2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel2, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByDBLevel3(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByDBLevel3(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDBLevel3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel3, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByDBLevel4(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByDBLevel4(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDBLevel4(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel4, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FindByDBLevel5(ByVal searchValue As System.String) As TB_NOSPaymentTyps
            Return FindByDBLevel5(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDBLevel5(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTyps
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps
            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel5, searchValue) Then Return _TB_NOSPaymentTyps
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_NOSPaymentTypsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.ID, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaymentType(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByPaymentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaymentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.PaymentType, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.Description, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.Line, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.Port, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBANK(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByBANK(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBANK(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.BANK, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDBAccount(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByDBAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDBAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBAccount, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDBLevel1(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByDBLevel1(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDBLevel1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel1, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDBLevel2(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByDBLevel2(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDBLevel2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel2, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDBLevel3(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByDBLevel3(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDBLevel3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel3, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDBLevel4(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByDBLevel4(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDBLevel4(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel4, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDBLevel5(ByVal searchValue As System.String) As TB_NOSPaymentTypsCollection
            Return FilterByDBLevel5(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDBLevel5(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_NOSPaymentTypsCollection
            Dim retCollection = New TB_NOSPaymentTypsCollection()
            Dim _TB_NOSPaymentTyps As TB_NOSPaymentTyps

            For Each _TB_NOSPaymentTyps In Me.List
                If Match(comparer, _TB_NOSPaymentTyps.DBLevel5, searchValue) Then
                    retCollection.Add(_TB_NOSPaymentTyps)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaymentType(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaymentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBANK(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BANK"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDBAccount(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DBAccount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDBLevel1(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DBLevel1"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDBLevel2(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DBLevel2"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDBLevel3(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DBLevel3"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDBLevel4(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DBLevel4"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDBLevel5(ByVal sortDirection As SortDirection) As TB_NOSPaymentTypsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DBLevel5"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Objects))>public MustInherit class TB_ObjectsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Objects))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Objects
            Get
                return CType(Me.List(index),TB_Objects)
            End Get
            Set(ByVal Value As TB_Objects)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ObjectsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ObjectsCollection
            Dim retCollection = New TB_ObjectsCollection()
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects(propertyName), searchValue) Then
                    retCollection.Add(_TB_Objects)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ObjectsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ObjectsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Objects
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Objects
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                if  Match(comparer,_TB_Objects(propertyName) , searchValue) then Return _TB_Objects
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Objects As TB_Objects) As System.Int32
            Return Me.List.Add(newTB_Objects)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Objects
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Objects
            Dim _TB_Objects As TB_Objects
            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ID, searchValue) Then Return _TB_Objects
            Next

            Return Nothing
        End Function

        Public Function FindByObjectName(ByVal searchValue As System.String) As TB_Objects
            Return FindByObjectName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByObjectName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Objects
            Dim _TB_Objects As TB_Objects
            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ObjectName, searchValue) Then Return _TB_Objects
            Next

            Return Nothing
        End Function

        Public Function FindByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As TB_Objects
            Return FindByObjectContent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As TB_Objects
            Dim _TB_Objects As TB_Objects
            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ObjectContent, searchValue) Then Return _TB_Objects
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_Objects
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Objects
            Dim _TB_Objects As TB_Objects
            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.Remarks, searchValue) Then Return _TB_Objects
            Next

            Return Nothing
        End Function

        Public Function FindByCreateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Objects
            Return FindByCreateDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCreateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Objects
            Dim _TB_Objects As TB_Objects
            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.CreateDate, searchValue) Then Return _TB_Objects
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByCreateDate(ByVal searchValue As String) As TB_Objects
            Return FindByCreateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCreateDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Objects
            Return FindByCreateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByModifyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Objects
            Return FindByModifyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByModifyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Objects
            Dim _TB_Objects As TB_Objects
            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ModifyDate, searchValue) Then Return _TB_Objects
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByModifyDate(ByVal searchValue As String) As TB_Objects
            Return FindByModifyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByModifyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Objects
            Return FindByModifyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ObjectsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ObjectsCollection
            Dim retCollection = New TB_ObjectsCollection()
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ID, searchValue) Then
                    retCollection.Add(_TB_Objects)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByObjectName(ByVal searchValue As System.String) As TB_ObjectsCollection
            Return FilterByObjectName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByObjectName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsCollection
            Dim retCollection = New TB_ObjectsCollection()
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ObjectName, searchValue) Then
                    retCollection.Add(_TB_Objects)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As TB_ObjectsCollection
            Return FilterByObjectContent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As TB_ObjectsCollection
            Dim retCollection = New TB_ObjectsCollection()
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ObjectContent, searchValue) Then
                    retCollection.Add(_TB_Objects)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_ObjectsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsCollection
            Dim retCollection = New TB_ObjectsCollection()
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.Remarks, searchValue) Then
                    retCollection.Add(_TB_Objects)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCreateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ObjectsCollection
            Return FilterByCreateDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCreateDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ObjectsCollection
            Dim retCollection = New TB_ObjectsCollection()
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.CreateDate, searchValue) Then
                    retCollection.Add(_TB_Objects)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByCreateDate(ByVal searchValue As String) As TB_ObjectsCollection
            Return FilterByCreateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCreateDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ObjectsCollection
            Return FilterByCreateDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByModifyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_ObjectsCollection
            Return FilterByModifyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByModifyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_ObjectsCollection
            Dim retCollection = New TB_ObjectsCollection()
            Dim _TB_Objects As TB_Objects

            For Each _TB_Objects In Me.List
                If Match(comparer, _TB_Objects.ModifyDate, searchValue) Then
                    retCollection.Add(_TB_Objects)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByModifyDate(ByVal searchValue As String) As TB_ObjectsCollection
            Return FilterByModifyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByModifyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_ObjectsCollection
            Return FilterByModifyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ObjectsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByObjectName(ByVal sortDirection As SortDirection) As TB_ObjectsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ObjectName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByObjectContent(ByVal sortDirection As SortDirection) As TB_ObjectsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ObjectContent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_ObjectsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCreateDate(ByVal sortDirection As SortDirection) As TB_ObjectsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CreateDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByModifyDate(ByVal sortDirection As SortDirection) As TB_ObjectsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ModifyDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ObjectsUser))>public MustInherit class TB_ObjectsUserCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ObjectsUser))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ObjectsUser
            Get
                return CType(Me.List(index),TB_ObjectsUser)
            End Get
            Set(ByVal Value As TB_ObjectsUser)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ObjectsUserCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ObjectsUserCollection
            Dim retCollection = New TB_ObjectsUserCollection()
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser(propertyName), searchValue) Then
                    retCollection.Add(_TB_ObjectsUser)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ObjectsUserCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ObjectsUserCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ObjectsUser
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ObjectsUser
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                if  Match(comparer,_TB_ObjectsUser(propertyName) , searchValue) then Return _TB_ObjectsUser
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ObjectsUser As TB_ObjectsUser) As System.Int32
            Return Me.List.Add(newTB_ObjectsUser)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ObjectsUser
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ObjectsUser
            Dim _TB_ObjectsUser As TB_ObjectsUser
            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ID, searchValue) Then Return _TB_ObjectsUser
            Next

            Return Nothing
        End Function

        Public Function FindByObjectLine(ByVal searchValue As System.String) As TB_ObjectsUser
            Return FindByObjectLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByObjectLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUser
            Dim _TB_ObjectsUser As TB_ObjectsUser
            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectLine, searchValue) Then Return _TB_ObjectsUser
            Next

            Return Nothing
        End Function

        Public Function FindByObjectGroup(ByVal searchValue As System.String) As TB_ObjectsUser
            Return FindByObjectGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByObjectGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUser
            Dim _TB_ObjectsUser As TB_ObjectsUser
            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectGroup, searchValue) Then Return _TB_ObjectsUser
            Next

            Return Nothing
        End Function

        Public Function FindByObjectName(ByVal searchValue As System.String) As TB_ObjectsUser
            Return FindByObjectName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByObjectName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUser
            Dim _TB_ObjectsUser As TB_ObjectsUser
            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectName, searchValue) Then Return _TB_ObjectsUser
            Next

            Return Nothing
        End Function

        Public Function FindByObjectRemarks(ByVal searchValue As System.String) As TB_ObjectsUser
            Return FindByObjectRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByObjectRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUser
            Dim _TB_ObjectsUser As TB_ObjectsUser
            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectRemarks, searchValue) Then Return _TB_ObjectsUser
            Next

            Return Nothing
        End Function

        Public Function FindByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As TB_ObjectsUser
            Return FindByObjectContent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As TB_ObjectsUser
            Dim _TB_ObjectsUser As TB_ObjectsUser
            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectContent, searchValue) Then Return _TB_ObjectsUser
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ObjectsUserCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ObjectsUserCollection
            Dim retCollection = New TB_ObjectsUserCollection()
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ID, searchValue) Then
                    retCollection.Add(_TB_ObjectsUser)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByObjectLine(ByVal searchValue As System.String) As TB_ObjectsUserCollection
            Return FilterByObjectLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByObjectLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUserCollection
            Dim retCollection = New TB_ObjectsUserCollection()
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectLine, searchValue) Then
                    retCollection.Add(_TB_ObjectsUser)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByObjectGroup(ByVal searchValue As System.String) As TB_ObjectsUserCollection
            Return FilterByObjectGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByObjectGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUserCollection
            Dim retCollection = New TB_ObjectsUserCollection()
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectGroup, searchValue) Then
                    retCollection.Add(_TB_ObjectsUser)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByObjectName(ByVal searchValue As System.String) As TB_ObjectsUserCollection
            Return FilterByObjectName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByObjectName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUserCollection
            Dim retCollection = New TB_ObjectsUserCollection()
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectName, searchValue) Then
                    retCollection.Add(_TB_ObjectsUser)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByObjectRemarks(ByVal searchValue As System.String) As TB_ObjectsUserCollection
            Return FilterByObjectRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByObjectRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ObjectsUserCollection
            Dim retCollection = New TB_ObjectsUserCollection()
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectRemarks, searchValue) Then
                    retCollection.Add(_TB_ObjectsUser)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As TB_ObjectsUserCollection
            Return FilterByObjectContent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByObjectContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As TB_ObjectsUserCollection
            Dim retCollection = New TB_ObjectsUserCollection()
            Dim _TB_ObjectsUser As TB_ObjectsUser

            For Each _TB_ObjectsUser In Me.List
                If Match(comparer, _TB_ObjectsUser.ObjectContent, searchValue) Then
                    retCollection.Add(_TB_ObjectsUser)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ObjectsUserCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByObjectLine(ByVal sortDirection As SortDirection) As TB_ObjectsUserCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ObjectLine"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByObjectGroup(ByVal sortDirection As SortDirection) As TB_ObjectsUserCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ObjectGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByObjectName(ByVal sortDirection As SortDirection) As TB_ObjectsUserCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ObjectName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByObjectRemarks(ByVal sortDirection As SortDirection) As TB_ObjectsUserCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ObjectRemarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByObjectContent(ByVal sortDirection As SortDirection) As TB_ObjectsUserCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ObjectContent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardBLS))>public MustInherit class TB_OutwardBLSCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardBLS))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardBLS
            Get
                return CType(Me.List(index),TB_OutwardBLS)
            End Get
            Set(ByVal Value As TB_OutwardBLS)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBLSCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardBLSCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBLS
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                if  Match(comparer,_TB_OutwardBLS(propertyName) , searchValue) then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardBLS As TB_OutwardBLS) As System.Int32
            Return Me.List.Add(newTB_OutwardBLS)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardBLS
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.ID, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByService(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByService(searchValue, CompareType.Exact)
        End Function


        Public Function FindByService(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Service, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Line, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBlNo(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BlNo, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByIssuePlace(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByIssuePlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssuePlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.IssuePlace, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardBLS
            Return FindByIssueDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.IssueDate, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByIssueDate(ByVal searchValue As String) As TB_OutwardBLS
            Return FindByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIssueDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLS
            Return FindByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardBLS
            Return FindByOnBoardDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.OnBoardDate, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByOnBoardDate(ByVal searchValue As String) As TB_OutwardBLS
            Return FindByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByOnBoardDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLS
            Return FindByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPOR(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByPOR(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOR(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POR, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPOL(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POL, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPOT(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POT, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPOD(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POD, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFPOD(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FPOD, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByPreVoyageID(ByVal searchValue As System.Guid) As TB_OutwardBLS
            Return FindByPreVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPreVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.PreVoyageID, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByVoyageID(ByVal searchValue As System.Guid) As TB_OutwardBLS
            Return FindByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.VoyageID, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_OutwardBLS
            Return FindByNoOfBls(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.NoOfBls, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByNoOfBls(ByVal searchValue As String) As TB_OutwardBLS
            Return FindByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOfBls(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLS
            Return FindByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTermsOfPayment(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByTermsOfPayment(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTermsOfPayment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.TermsOfPayment, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByClientID(ByVal searchValue As System.Guid) As TB_OutwardBLS
            Return FindByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.ClientID, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFCLType(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByFCLType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFCLType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FCLType, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Remarks, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardBLS
            Return FindByReference(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Reference, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByReference(ByVal searchValue As String) As TB_OutwardBLS
            Return FindByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByReference(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLS
            Return FindByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardBLS
            Return FindByMailRelease(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.MailRelease, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByMailRelease(ByVal searchValue As String) As TB_OutwardBLS
            Return FindByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMailRelease(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLS
            Return FindByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMailReleaseRem(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByMailReleaseRem(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMailReleaseRem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.MailReleaseRem, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFrtCoverdCarr(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByFrtCoverdCarr(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFrtCoverdCarr(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FrtCoverdCarr, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFrtCoverdBlNo(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByFrtCoverdBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFrtCoverdBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FrtCoverdBlNo, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByStatus(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Status, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByLcNo(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByLcNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLcNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.LcNo, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBlStatus(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByBlStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBlStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BlStatus, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBookingID(ByVal searchValue As System.Guid) As TB_OutwardBLS
            Return FindByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BookingID, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBookingNo(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByBookingNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BookingNo, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByMBL(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByMBL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMBL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.MBL, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFwdLine(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByFwdLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFwdLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FwdLine, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByFwAgent(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByFwAgent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFwAgent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FwAgent, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByJobNumber(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByJobNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJobNumber(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.JobNumber, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByTFCCode(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByTFCCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTFCCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.TFCCode, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FindByBarCode(ByVal searchValue As System.String) As TB_OutwardBLS
            Return FindByBarCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBarCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLS
            Dim _TB_OutwardBLS As TB_OutwardBLS
            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BarCode, searchValue) Then Return _TB_OutwardBLS
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardBLSCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByService(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByService(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByService(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Service, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Line, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBlNo(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BlNo, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssuePlace(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByIssuePlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssuePlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.IssuePlace, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardBLSCollection
            Return FilterByIssueDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.IssueDate, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByIssueDate(ByVal searchValue As String) As TB_OutwardBLSCollection
            Return FilterByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIssueDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Return FilterByIssueDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardBLSCollection
            Return FilterByOnBoardDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOnBoardDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.OnBoardDate, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByOnBoardDate(ByVal searchValue As String) As TB_OutwardBLSCollection
            Return FilterByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByOnBoardDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Return FilterByOnBoardDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPOR(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByPOR(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOR(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POR, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOL(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByPOL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POL, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOT(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POT, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOD(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.POD, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFPOD(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FPOD, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPreVoyageID(ByVal searchValue As System.Guid) As TB_OutwardBLSCollection
            Return FilterByPreVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPreVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.PreVoyageID, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVoyageID(ByVal searchValue As System.Guid) As TB_OutwardBLSCollection
            Return FilterByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.VoyageID, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_OutwardBLSCollection
            Return FilterByNoOfBls(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOfBls(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.NoOfBls, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByNoOfBls(ByVal searchValue As String) As TB_OutwardBLSCollection
            Return FilterByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOfBls(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Return FilterByNoOfBls(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTermsOfPayment(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByTermsOfPayment(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTermsOfPayment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.TermsOfPayment, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByClientID(ByVal searchValue As System.Guid) As TB_OutwardBLSCollection
            Return FilterByClientID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByClientID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.ClientID, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFCLType(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByFCLType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFCLType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FCLType, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Remarks, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardBLSCollection
            Return FilterByReference(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReference(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Reference, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByReference(ByVal searchValue As String) As TB_OutwardBLSCollection
            Return FilterByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByReference(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Return FilterByReference(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardBLSCollection
            Return FilterByMailRelease(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailRelease(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.MailRelease, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByMailRelease(ByVal searchValue As String) As TB_OutwardBLSCollection
            Return FilterByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMailRelease(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Return FilterByMailRelease(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMailReleaseRem(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByMailReleaseRem(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMailReleaseRem(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.MailReleaseRem, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFrtCoverdCarr(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByFrtCoverdCarr(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFrtCoverdCarr(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FrtCoverdCarr, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFrtCoverdBlNo(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByFrtCoverdBlNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFrtCoverdBlNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FrtCoverdBlNo, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.Status, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLcNo(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByLcNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLcNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.LcNo, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBlStatus(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByBlStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBlStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BlStatus, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingID(ByVal searchValue As System.Guid) As TB_OutwardBLSCollection
            Return FilterByBookingID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BookingID, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBookingNo(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByBookingNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BookingNo, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMBL(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByMBL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMBL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.MBL, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFwdLine(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByFwdLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFwdLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FwdLine, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFwAgent(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByFwAgent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFwAgent(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.FwAgent, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByJobNumber(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByJobNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJobNumber(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.JobNumber, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTFCCode(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByTFCCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTFCCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.TFCCode, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBarCode(ByVal searchValue As System.String) As TB_OutwardBLSCollection
            Return FilterByBarCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBarCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBLSCollection
            Dim retCollection = New TB_OutwardBLSCollection()
            Dim _TB_OutwardBLS As TB_OutwardBLS

            For Each _TB_OutwardBLS In Me.List
                If Match(comparer, _TB_OutwardBLS.BarCode, searchValue) Then
                    retCollection.Add(_TB_OutwardBLS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByService(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Service"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBlNo(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BlNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssuePlace(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssuePlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueDate(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOnBoardDate(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OnBoardDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOR(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POR"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOL(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOT(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POT"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOD(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFPOD(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FPOD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPreVoyageID(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PreVoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVoyageID(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOfBls(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOfBls"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTermsOfPayment(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TermsOfPayment"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByClientID(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ClientID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFCLType(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FCLType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReference(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Reference"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailRelease(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailRelease"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMailReleaseRem(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MailReleaseRem"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFrtCoverdCarr(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FrtCoverdCarr"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFrtCoverdBlNo(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FrtCoverdBlNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLcNo(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LcNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBlStatus(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BlStatus"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingID(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingNo(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMBL(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MBL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFwdLine(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FwdLine"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFwAgent(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FwAgent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJobNumber(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("JobNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTFCCode(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TFCCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBarCode(ByVal sortDirection As SortDirection) As TB_OutwardBLSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BarCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardBlsComments))>public MustInherit class TB_OutwardBlsCommentsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardBlsComments))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardBlsComments
            Get
                return CType(Me.List(index),TB_OutwardBlsComments)
            End Get
            Set(ByVal Value As TB_OutwardBlsComments)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsCommentsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsCommentsCollection
            Dim retCollection = New TB_OutwardBlsCommentsCollection()
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments

            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardBlsComments)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardBlsCommentsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsComments
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsComments
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments

            For Each _TB_OutwardBlsComments In Me.List
                if  Match(comparer,_TB_OutwardBlsComments(propertyName) , searchValue) then Return _TB_OutwardBlsComments
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardBlsComments As TB_OutwardBlsComments) As System.Int32
            Return Me.List.Add(newTB_OutwardBlsComments)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardBlsComments
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsComments
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments
            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.ID, searchValue) Then Return _TB_OutwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsComments
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsComments
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments
            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.BLID, searchValue) Then Return _TB_OutwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByCommentType(ByVal searchValue As System.String) As TB_OutwardBlsComments
            Return FindByCommentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCommentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsComments
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments
            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.CommentType, searchValue) Then Return _TB_OutwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByComment(ByVal searchValue As System.String) As TB_OutwardBlsComments
            Return FindByComment(searchValue, CompareType.Exact)
        End Function


        Public Function FindByComment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsComments
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments
            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.Comment, searchValue) Then Return _TB_OutwardBlsComments
            Next

            Return Nothing
        End Function

        Public Function FindByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardBlsComments
            Return FindByCommentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardBlsComments
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments
            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.CommentDate, searchValue) Then Return _TB_OutwardBlsComments
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByCommentDate(ByVal searchValue As String) As TB_OutwardBlsComments
            Return FindByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCommentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsComments
            Return FindByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardBlsCommentsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsCommentsCollection
            Dim retCollection = New TB_OutwardBlsCommentsCollection()
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments

            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsCommentsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsCommentsCollection
            Dim retCollection = New TB_OutwardBlsCommentsCollection()
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments

            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.BLID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCommentType(ByVal searchValue As System.String) As TB_OutwardBlsCommentsCollection
            Return FilterByCommentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCommentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsCommentsCollection
            Dim retCollection = New TB_OutwardBlsCommentsCollection()
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments

            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.CommentType, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByComment(ByVal searchValue As System.String) As TB_OutwardBlsCommentsCollection
            Return FilterByComment(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByComment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsCommentsCollection
            Dim retCollection = New TB_OutwardBlsCommentsCollection()
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments

            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.Comment, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardBlsCommentsCollection
            Return FilterByCommentDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCommentDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardBlsCommentsCollection
            Dim retCollection = New TB_OutwardBlsCommentsCollection()
            Dim _TB_OutwardBlsComments As TB_OutwardBlsComments

            For Each _TB_OutwardBlsComments In Me.List
                If Match(comparer, _TB_OutwardBlsComments.CommentDate, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsComments)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByCommentDate(ByVal searchValue As String) As TB_OutwardBlsCommentsCollection
            Return FilterByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCommentDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsCommentsCollection
            Return FilterByCommentDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_OutwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCommentType(ByVal sortDirection As SortDirection) As TB_OutwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CommentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByComment(ByVal sortDirection As SortDirection) As TB_OutwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Comment"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCommentDate(ByVal sortDirection As SortDirection) As TB_OutwardBlsCommentsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CommentDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(Tb_OutwardBlsFrs))>public MustInherit class Tb_OutwardBlsFrsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(Tb_OutwardBlsFrs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As Tb_OutwardBlsFrs
            Get
                return CType(Me.List(index),Tb_OutwardBlsFrs)
            End Get
            Set(ByVal Value As Tb_OutwardBlsFrs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As Tb_OutwardBlsFrsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As Tb_OutwardBlsFrsCollection
            Dim retCollection = New Tb_OutwardBlsFrsCollection()
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs

            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs(propertyName), searchValue) Then
                    retCollection.Add(_Tb_OutwardBlsFrs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As Tb_OutwardBlsFrsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As Tb_OutwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As Tb_OutwardBlsFrs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As Tb_OutwardBlsFrs
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs

            For Each _Tb_OutwardBlsFrs In Me.List
                if  Match(comparer,_Tb_OutwardBlsFrs(propertyName) , searchValue) then Return _Tb_OutwardBlsFrs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTb_OutwardBlsFrs As Tb_OutwardBlsFrs) As System.Int32
            Return Me.List.Add(newTb_OutwardBlsFrs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As Tb_OutwardBlsFrs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_OutwardBlsFrs
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs
            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.ID, searchValue) Then Return _Tb_OutwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As Tb_OutwardBlsFrs
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_OutwardBlsFrs
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs
            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.BLID, searchValue) Then Return _Tb_OutwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByFCnee(ByVal searchValue As System.String) As Tb_OutwardBlsFrs
            Return FindByFCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_OutwardBlsFrs
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs
            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.FCnee, searchValue) Then Return _Tb_OutwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByFGoods(ByVal searchValue As System.String) As Tb_OutwardBlsFrs
            Return FindByFGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_OutwardBlsFrs
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs
            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.FGoods, searchValue) Then Return _Tb_OutwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FindByFPkgs(ByVal searchValue As System.String) As Tb_OutwardBlsFrs
            Return FindByFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFPkgs(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_OutwardBlsFrs
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs
            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.FPkgs, searchValue) Then Return _Tb_OutwardBlsFrs
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As Tb_OutwardBlsFrsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_OutwardBlsFrsCollection
            Dim retCollection = New Tb_OutwardBlsFrsCollection()
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs

            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.ID, searchValue) Then
                    retCollection.Add(_Tb_OutwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As Tb_OutwardBlsFrsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As Tb_OutwardBlsFrsCollection
            Dim retCollection = New Tb_OutwardBlsFrsCollection()
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs

            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.BLID, searchValue) Then
                    retCollection.Add(_Tb_OutwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFCnee(ByVal searchValue As System.String) As Tb_OutwardBlsFrsCollection
            Return FilterByFCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_OutwardBlsFrsCollection
            Dim retCollection = New Tb_OutwardBlsFrsCollection()
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs

            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.FCnee, searchValue) Then
                    retCollection.Add(_Tb_OutwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFGoods(ByVal searchValue As System.String) As Tb_OutwardBlsFrsCollection
            Return FilterByFGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_OutwardBlsFrsCollection
            Dim retCollection = New Tb_OutwardBlsFrsCollection()
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs

            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.FGoods, searchValue) Then
                    retCollection.Add(_Tb_OutwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFPkgs(ByVal searchValue As System.String) As Tb_OutwardBlsFrsCollection
            Return FilterByFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFPkgs(ByVal searchValue As System.String, ByVal comparer As CompareType) As Tb_OutwardBlsFrsCollection
            Dim retCollection = New Tb_OutwardBlsFrsCollection()
            Dim _Tb_OutwardBlsFrs As Tb_OutwardBlsFrs

            For Each _Tb_OutwardBlsFrs In Me.List
                If Match(comparer, _Tb_OutwardBlsFrs.FPkgs, searchValue) Then
                    retCollection.Add(_Tb_OutwardBlsFrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As Tb_OutwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As Tb_OutwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFCnee(ByVal sortDirection As SortDirection) As Tb_OutwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FCnee"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFGoods(ByVal sortDirection As SortDirection) As Tb_OutwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FGoods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFPkgs(ByVal sortDirection As SortDirection) As Tb_OutwardBlsFrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardBlsGoods))>public MustInherit class TB_OutwardBlsGoodsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardBlsGoods))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardBlsGoods
            Get
                return CType(Me.List(index),TB_OutwardBlsGoods)
            End Get
            Set(ByVal Value As TB_OutwardBlsGoods)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsGoodsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardBlsGoodsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsGoods
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                if  Match(comparer,_TB_OutwardBlsGoods(propertyName) , searchValue) then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardBlsGoods As TB_OutwardBlsGoods) As System.Int32
            Return Me.List.Add(newTB_OutwardBlsGoods)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardBlsGoods
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.ID, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsGoods
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.BLID, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByGoods(ByVal searchValue As System.String) As TB_OutwardBlsGoods
            Return FindByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.Goods, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByMarks(ByVal searchValue As System.String) As TB_OutwardBlsGoods
            Return FindByMarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.Marks, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByMainCom(ByVal searchValue As System.String) As TB_OutwardBlsGoods
            Return FindByMainCom(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMainCom(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.MainCom, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

        Public Function FindByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardBlsGoods
            Return FindByTTW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTW, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByTTW(ByVal searchValue As String) As TB_OutwardBlsGoods
            Return FindByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Return FindByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardBlsGoods
            Return FindByTGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TGW, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByTGW(ByVal searchValue As String) As TB_OutwardBlsGoods
            Return FindByTGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Return FindByTGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardBlsGoods
            Return FindByTTLPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTLPkgs, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByTTLPkgs(ByVal searchValue As String) As TB_OutwardBlsGoods
            Return FindByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTLPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Return FindByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardBlsGoods
            Return FindByTTLCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTLCBM, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByTTLCBM(ByVal searchValue As String) As TB_OutwardBlsGoods
            Return FindByTTLCBM(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTLCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Return FindByTTLCBM(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardBlsGoods
            Return FindByTTLNET(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods
            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTLNET, searchValue) Then Return _TB_OutwardBlsGoods
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByTTLNET(ByVal searchValue As String) As TB_OutwardBlsGoods
            Return FindByTTLNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTTLNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoods
            Return FindByTTLNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardBlsGoodsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsGoodsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.BLID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGoods(ByVal searchValue As System.String) As TB_OutwardBlsGoodsCollection
            Return FilterByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.Goods, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMarks(ByVal searchValue As System.String) As TB_OutwardBlsGoodsCollection
            Return FilterByMarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.Marks, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMainCom(ByVal searchValue As System.String) As TB_OutwardBlsGoodsCollection
            Return FilterByMainCom(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMainCom(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.MainCom, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardBlsGoodsCollection
            Return FilterByTTW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTW, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByTTW(ByVal searchValue As String) As TB_OutwardBlsGoodsCollection
            Return FilterByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Return FilterByTTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardBlsGoodsCollection
            Return FilterByTGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TGW, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByTGW(ByVal searchValue As String) As TB_OutwardBlsGoodsCollection
            Return FilterByTGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Return FilterByTGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTLPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTLPkgs, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByTTLPkgs(ByVal searchValue As String) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTLPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTLCBM(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTLCBM, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByTTLCBM(ByVal searchValue As String) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLCBM(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTLCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLCBM(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLNET(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTTLNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Dim retCollection = New TB_OutwardBlsGoodsCollection()
            Dim _TB_OutwardBlsGoods As TB_OutwardBlsGoods

            For Each _TB_OutwardBlsGoods In Me.List
                If Match(comparer, _TB_OutwardBlsGoods.TTLNET, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsGoods)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByTTLNET(ByVal searchValue As String) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTTLNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardBlsGoodsCollection
            Return FilterByTTLNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGoods(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Goods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMarks(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Marks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMainCom(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MainCom"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTW(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTGW(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TGW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTLPkgs(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTLPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTLCBM(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTLCBM"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTTLNET(ByVal sortDirection As SortDirection) As TB_OutwardBlsGoodsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TTLNET"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardBlsNames))>public MustInherit class TB_OutwardBlsNamesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardBlsNames))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardBlsNames
            Get
                return CType(Me.List(index),TB_OutwardBlsNames)
            End Get
            Set(ByVal Value As TB_OutwardBlsNames)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsNamesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardBlsNamesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsNames
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                if  Match(comparer,_TB_OutwardBlsNames(propertyName) , searchValue) then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardBlsNames As TB_OutwardBlsNames) As System.Int32
            Return Me.List.Add(newTB_OutwardBlsNames)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardBlsNames
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.ID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsNames
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.BLID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByShipper(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByShipper(searchValue, CompareType.Exact)
        End Function


        Public Function FindByShipper(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Shipper, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByCnee(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Cnee, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify1(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByNotify1(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify1, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify2(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByNotify2(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify2, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify3(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByNotify3(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify3, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByMessers(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByMessers(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMessers(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Messers, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByShipperID(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByShipperID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByShipperID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.ShipperID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByCneeID(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByCneeID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCneeID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.CneeID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify1ID(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByNotify1ID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify1ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify1ID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify2ID(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByNotify2ID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify2ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify2ID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByNotify3ID(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByNotify3ID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNotify3ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify3ID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByForwarder(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByForwarder(searchValue, CompareType.Exact)
        End Function


        Public Function FindByForwarder(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Forwarder, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FindByForwarderID(ByVal searchValue As System.String) As TB_OutwardBlsNames
            Return FindByForwarderID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByForwarderID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNames
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames
            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.ForwarderID, searchValue) Then Return _TB_OutwardBlsNames
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardBlsNamesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsNamesCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.BLID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByShipper(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByShipper(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByShipper(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Shipper, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnee(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByCnee(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnee(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Cnee, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify1(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByNotify1(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify1(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify1, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify2(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByNotify2(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify2(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify2, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify3(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByNotify3(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify3(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify3, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMessers(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByMessers(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMessers(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Messers, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByShipperID(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByShipperID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByShipperID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.ShipperID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCneeID(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByCneeID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCneeID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.CneeID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify1ID(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByNotify1ID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify1ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify1ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify2ID(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByNotify2ID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify2ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify2ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNotify3ID(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByNotify3ID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNotify3ID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Notify3ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByForwarder(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByForwarder(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByForwarder(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.Forwarder, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByForwarderID(ByVal searchValue As System.String) As TB_OutwardBlsNamesCollection
            Return FilterByForwarderID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByForwarderID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsNamesCollection
            Dim retCollection = New TB_OutwardBlsNamesCollection()
            Dim _TB_OutwardBlsNames As TB_OutwardBlsNames

            For Each _TB_OutwardBlsNames In Me.List
                If Match(comparer, _TB_OutwardBlsNames.ForwarderID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsNames)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByShipper(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Shipper"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnee(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Cnee"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify1(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify1"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify2(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify2"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify3(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify3"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMessers(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Messers"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByShipperID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ShipperID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCneeID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CneeID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify1ID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify1ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify2ID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify2ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNotify3ID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Notify3ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByForwarder(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Forwarder"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByForwarderID(ByVal sortDirection As SortDirection) As TB_OutwardBlsNamesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ForwarderID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardBlsTemplate))>public MustInherit class TB_OutwardBlsTemplateCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardBlsTemplate))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardBlsTemplate
            Get
                return CType(Me.List(index),TB_OutwardBlsTemplate)
            End Get
            Set(ByVal Value As TB_OutwardBlsTemplate)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsTemplateCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsTemplateCollection
            Dim retCollection = New TB_OutwardBlsTemplateCollection()
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate

            For Each _TB_OutwardBlsTemplate In Me.List
                If Match(comparer, _TB_OutwardBlsTemplate(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardBlsTemplate)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardBlsTemplateCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardBlsTemplateCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardBlsTemplate
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardBlsTemplate
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate

            For Each _TB_OutwardBlsTemplate In Me.List
                if  Match(comparer,_TB_OutwardBlsTemplate(propertyName) , searchValue) then Return _TB_OutwardBlsTemplate
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardBlsTemplate As TB_OutwardBlsTemplate) As System.Int32
            Return Me.List.Add(newTB_OutwardBlsTemplate)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardBlsTemplate
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsTemplate
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate
            For Each _TB_OutwardBlsTemplate In Me.List
                If Match(comparer, _TB_OutwardBlsTemplate.ID, searchValue) Then Return _TB_OutwardBlsTemplate
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsTemplate
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsTemplate
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate
            For Each _TB_OutwardBlsTemplate In Me.List
                If Match(comparer, _TB_OutwardBlsTemplate.BLID, searchValue) Then Return _TB_OutwardBlsTemplate
            Next

            Return Nothing
        End Function

        Public Function FindByXML(ByVal searchValue As System.String) As TB_OutwardBlsTemplate
            Return FindByXML(searchValue, CompareType.Exact)
        End Function


        Public Function FindByXML(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsTemplate
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate
            For Each _TB_OutwardBlsTemplate In Me.List
                If Match(comparer, _TB_OutwardBlsTemplate.XML, searchValue) Then Return _TB_OutwardBlsTemplate
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardBlsTemplateCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsTemplateCollection
            Dim retCollection = New TB_OutwardBlsTemplateCollection()
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate

            For Each _TB_OutwardBlsTemplate In Me.List
                If Match(comparer, _TB_OutwardBlsTemplate.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsTemplate)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_OutwardBlsTemplateCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardBlsTemplateCollection
            Dim retCollection = New TB_OutwardBlsTemplateCollection()
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate

            For Each _TB_OutwardBlsTemplate In Me.List
                If Match(comparer, _TB_OutwardBlsTemplate.BLID, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsTemplate)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByXML(ByVal searchValue As System.String) As TB_OutwardBlsTemplateCollection
            Return FilterByXML(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByXML(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardBlsTemplateCollection
            Dim retCollection = New TB_OutwardBlsTemplateCollection()
            Dim _TB_OutwardBlsTemplate As TB_OutwardBlsTemplate

            For Each _TB_OutwardBlsTemplate In Me.List
                If Match(comparer, _TB_OutwardBlsTemplate.XML, searchValue) Then
                    retCollection.Add(_TB_OutwardBlsTemplate)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardBlsTemplateCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_OutwardBlsTemplateCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByXML(ByVal sortDirection As SortDirection) As TB_OutwardBlsTemplateCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("XML"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardCharges))>public MustInherit class TB_OutwardChargesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardCharges))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardCharges
            Get
                return CType(Me.List(index),TB_OutwardCharges)
            End Get
            Set(ByVal Value As TB_OutwardCharges)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardChargesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardChargesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCharges
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                if  Match(comparer,_TB_OutwardCharges(propertyName) , searchValue) then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardCharges As TB_OutwardCharges) As System.Int32
            Return Me.List.Add(newTB_OutwardCharges)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardCharges
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ID, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_OutwardCharges
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.BLID, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_OutwardCharges
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Seq, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_OutwardCharges
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ChargesCode, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Currency, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_OutwardCharges
            Return FindByQty(searchValue, CompareType.Exact)
        End Function


        Public Function FindByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Qty, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindByQty(ByVal searchValue As String) As TB_OutwardCharges
            Return FindByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByQty(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCharges
            Return FindByRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Rate, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByRate(ByVal searchValue As String) As TB_OutwardCharges
            Return FindByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCharges
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Amount, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_OutwardCharges
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPayAt(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByPayAt(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAt(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAt, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByChargesBase(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByChargesBase(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ChargesBase, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByTerms(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Terms, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByTariffClass(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByTariffClass(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTariffClass(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.TariffClass, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCharges
            Return FindByActPlaceExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ActPlaceExRate, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByActPlaceExRate(ByVal searchValue As String) As TB_OutwardCharges
            Return FindByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByActPlaceExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMeaUnitOfCharge(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByMeaUnitOfCharge(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMeaUnitOfCharge(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.MeaUnitOfCharge, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByFromPlace(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.FromPlace, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByToPlace(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ToPlace, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByPayAtBranch(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByPayAtBranch(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAtBranch(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAtBranch, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCharges
            Return FindByPayAtExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAtExRate, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByPayAtExRate(ByVal searchValue As String) As TB_OutwardCharges
            Return FindByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPayAtExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPayAtPc(ByVal searchValue As System.String) As TB_OutwardCharges
            Return FindByPayAtPc(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPayAtPc(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAtPc, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCharges
            Return FindByInvoiceAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.InvoiceAmount, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByInvoiceAmount(ByVal searchValue As String) As TB_OutwardCharges
            Return FindByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByInvoiceAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCharges
            Return FindByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCharges
            Dim _TB_OutwardCharges As TB_OutwardCharges
            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.RealAmount, searchValue) Then Return _TB_OutwardCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByRealAmount(ByVal searchValue As String) As TB_OutwardCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardChargesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_OutwardChargesCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.BLID, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_OutwardChargesCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Seq, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Currency, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_OutwardChargesCollection
            Return FilterByQty(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByQty(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Qty, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterByQty(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByQty(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterByQty(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardChargesCollection
            Return FilterByRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRate(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Rate, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByRate(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterByRate(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardChargesCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Amount, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPayAt(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByPayAt(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAt(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAt, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesBase(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByChargesBase(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ChargesBase, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTerms(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.Terms, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTariffClass(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByTariffClass(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTariffClass(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.TariffClass, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardChargesCollection
            Return FilterByActPlaceExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByActPlaceExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ActPlaceExRate, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByActPlaceExRate(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByActPlaceExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterByActPlaceExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMeaUnitOfCharge(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByMeaUnitOfCharge(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMeaUnitOfCharge(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.MeaUnitOfCharge, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFromPlace(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.FromPlace, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByToPlace(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.ToPlace, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPayAtBranch(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByPayAtBranch(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAtBranch(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAtBranch, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardChargesCollection
            Return FilterByPayAtExRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAtExRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAtExRate, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByPayAtExRate(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPayAtExRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterByPayAtExRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPayAtPc(ByVal searchValue As System.String) As TB_OutwardChargesCollection
            Return FilterByPayAtPc(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPayAtPc(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.PayAtPc, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardChargesCollection
            Return FilterByInvoiceAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.InvoiceAmount, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByInvoiceAmount(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByInvoiceAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterByInvoiceAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardChargesCollection
            Return FilterByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Dim retCollection = New TB_OutwardChargesCollection()
            Dim _TB_OutwardCharges As TB_OutwardCharges

            For Each _TB_OutwardCharges In Me.List
                If Match(comparer, _TB_OutwardCharges.RealAmount, searchValue) Then
                    retCollection.Add(_TB_OutwardCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByRealAmount(ByVal searchValue As String) As TB_OutwardChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByQty(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Qty"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRate(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Rate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAt(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAt"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesBase(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesBase"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTerms(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Terms"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTariffClass(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TariffClass"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByActPlaceExRate(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ActPlaceExRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMeaUnitOfCharge(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MeaUnitOfCharge"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFromPlace(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FromPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByToPlace(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ToPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAtBranch(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAtBranch"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAtExRate(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAtExRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPayAtPc(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PayAtPc"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceAmount(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRealAmount(ByVal sortDirection As SortDirection) As TB_OutwardChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RealAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardCnsImco))>public MustInherit class TB_OutwardCnsImcoCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardCnsImco))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardCnsImco
            Get
                return CType(Me.List(index),TB_OutwardCnsImco)
            End Get
            Set(ByVal Value As TB_OutwardCnsImco)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCnsImcoCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardCnsImcoCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCnsImco
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                if  Match(comparer,_TB_OutwardCnsImco(propertyName) , searchValue) then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardCnsImco As TB_OutwardCnsImco) As System.Int32
            Return Me.List.Add(newTB_OutwardCnsImco)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardCnsImco
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.ID, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCnsImco
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.CntrID, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByUNNO(ByVal searchValue As System.String) As TB_OutwardCnsImco
            Return FindByUNNO(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUNNO(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.UNNO, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByIMDGCode(ByVal searchValue As System.String) As TB_OutwardCnsImco
            Return FindByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.IMDGCode, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCnsImco
            Return FindByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.FlashPoint, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFlashPoint(ByVal searchValue As String) As TB_OutwardCnsImco
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPakingGroup(ByVal searchValue As System.String) As TB_OutwardCnsImco
            Return FindByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPakingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.PakingGroup, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsImco
            Return FindByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.PageNumber, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByPageNumber(ByVal searchValue As String) As TB_OutwardCnsImco
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsImco
            Return FindByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco
            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.EMSNumber, searchValue) Then Return _TB_OutwardCnsImco
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByEMSNumber(ByVal searchValue As String) As TB_OutwardCnsImco
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsImco
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardCnsImcoCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCnsImcoCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.CntrID, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUNNO(ByVal searchValue As System.String) As TB_OutwardCnsImcoCollection
            Return FilterByUNNO(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUNNO(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.UNNO, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIMDGCode(ByVal searchValue As System.String) As TB_OutwardCnsImcoCollection
            Return FilterByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.IMDGCode, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCnsImcoCollection
            Return FilterByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.FlashPoint, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFlashPoint(ByVal searchValue As String) As TB_OutwardCnsImcoCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPakingGroup(ByVal searchValue As System.String) As TB_OutwardCnsImcoCollection
            Return FilterByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPakingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.PakingGroup, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsImcoCollection
            Return FilterByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.PageNumber, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByPageNumber(ByVal searchValue As String) As TB_OutwardCnsImcoCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsImcoCollection
            Return FilterByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Dim retCollection = New TB_OutwardCnsImcoCollection()
            Dim _TB_OutwardCnsImco As TB_OutwardCnsImco

            For Each _TB_OutwardCnsImco In Me.List
                If Match(comparer, _TB_OutwardCnsImco.EMSNumber, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsImco)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByEMSNumber(ByVal searchValue As String) As TB_OutwardCnsImcoCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsImcoCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUNNO(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UNNO"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIMDGCode(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IMDGCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFlashPoint(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FlashPoint"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPakingGroup(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PakingGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPageNumber(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PageNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEMSNumber(ByVal sortDirection As SortDirection) As TB_OutwardCnsImcoCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EMSNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardCnsPkgs))>public MustInherit class TB_OutwardCnsPkgsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardCnsPkgs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardCnsPkgs
            Get
                return CType(Me.List(index),TB_OutwardCnsPkgs)
            End Get
            Set(ByVal Value As TB_OutwardCnsPkgs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCnsPkgsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardCnsPkgsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCnsPkgs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                if  Match(comparer,_TB_OutwardCnsPkgs(propertyName) , searchValue) then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardCnsPkgs As TB_OutwardCnsPkgs) As System.Int32
            Return Me.List.Add(newTB_OutwardCnsPkgs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardCnsPkgs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.ID, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCnsPkgs
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.CntrID, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByPackageType(ByVal searchValue As System.String) As TB_OutwardCnsPkgs
            Return FindByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.PackageType, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgs
            Return FindByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.NoOFPkgs, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByNoOFPkgs(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsPkgs
            Return FindByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.GW, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByGW(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsPkgs
            Return FindByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.CBM, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByCBM(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCnsPkgs
            Return FindByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.NET, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByNET(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCnsPkgs
            Return FindByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.FlashPoint, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFlashPoint(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIMDGCode(ByVal searchValue As System.String) As TB_OutwardCnsPkgs
            Return FindByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.IMDGCode, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

        Public Function FindByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgs
            Return FindByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.PakingGroup, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByPakingGroup(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPakingGroup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgs
            Return FindByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.PageNumber, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByPageNumber(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgs
            Return FindByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs
            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.EMSNumber, searchValue) Then Return _TB_OutwardCnsPkgs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByEMSNumber(ByVal searchValue As String) As TB_OutwardCnsPkgs
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgs
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardCnsPkgsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCnsPkgsCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.CntrID, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPackageType(ByVal searchValue As System.String) As TB_OutwardCnsPkgsCollection
            Return FilterByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.PackageType, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgsCollection
            Return FilterByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.NoOFPkgs, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByNoOFPkgs(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsPkgsCollection
            Return FilterByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.GW, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByGW(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsPkgsCollection
            Return FilterByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.CBM, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByCBM(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCnsPkgsCollection
            Return FilterByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.NET, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByNET(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCnsPkgsCollection
            Return FilterByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.FlashPoint, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFlashPoint(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIMDGCode(ByVal searchValue As System.String) As TB_OutwardCnsPkgsCollection
            Return FilterByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.IMDGCode, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgsCollection
            Return FilterByPakingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPakingGroup(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.PakingGroup, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByPakingGroup(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPakingGroup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByPakingGroup(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgsCollection
            Return FilterByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.PageNumber, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByPageNumber(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCnsPkgsCollection
            Return FilterByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Dim retCollection = New TB_OutwardCnsPkgsCollection()
            Dim _TB_OutwardCnsPkgs As TB_OutwardCnsPkgs

            For Each _TB_OutwardCnsPkgs In Me.List
                If Match(comparer, _TB_OutwardCnsPkgs.EMSNumber, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsPkgs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByEMSNumber(ByVal searchValue As String) As TB_OutwardCnsPkgsCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsPkgsCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackageType(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PackageType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOFPkgs(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOFPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGW(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCBM(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CBM"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNET(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NET"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFlashPoint(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FlashPoint"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIMDGCode(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IMDGCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPakingGroup(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PakingGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPageNumber(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PageNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEMSNumber(ByVal sortDirection As SortDirection) As TB_OutwardCnsPkgsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EMSNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardCnsTemprature))>public MustInherit class TB_OutwardCnsTempratureCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardCnsTemprature))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardCnsTemprature
            Get
                return CType(Me.List(index),TB_OutwardCnsTemprature)
            End Get
            Set(ByVal Value As TB_OutwardCnsTemprature)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCnsTempratureCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Dim retCollection = New TB_OutwardCnsTempratureCollection()
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature

            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardCnsTemprature)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardCnsTempratureCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCnsTemprature
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature

            For Each _TB_OutwardCnsTemprature In Me.List
                if  Match(comparer,_TB_OutwardCnsTemprature(propertyName) , searchValue) then Return _TB_OutwardCnsTemprature
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardCnsTemprature As TB_OutwardCnsTemprature) As System.Int32
            Return Me.List.Add(newTB_OutwardCnsTemprature)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardCnsTemprature
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature
            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.ID, searchValue) Then Return _TB_OutwardCnsTemprature
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCnsTemprature
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature
            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.CntrID, searchValue) Then Return _TB_OutwardCnsTemprature
            Next

            Return Nothing
        End Function

        Public Function FindByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsTemprature
            Return FindByTempMin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature
            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.TempMin, searchValue) Then Return _TB_OutwardCnsTemprature
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByTempMin(ByVal searchValue As String) As TB_OutwardCnsTemprature
            Return FindByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTempMin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Return FindByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsTemprature
            Return FindByTempMax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature
            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.TempMax, searchValue) Then Return _TB_OutwardCnsTemprature
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByTempMax(ByVal searchValue As String) As TB_OutwardCnsTemprature
            Return FindByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTempMax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Return FindByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTemperatureBase(ByVal searchValue As System.String) As TB_OutwardCnsTemprature
            Return FindByTemperatureBase(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTemperatureBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsTemprature
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature
            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.TemperatureBase, searchValue) Then Return _TB_OutwardCnsTemprature
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardCnsTempratureCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Dim retCollection = New TB_OutwardCnsTempratureCollection()
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature

            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCnsTempratureCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Dim retCollection = New TB_OutwardCnsTempratureCollection()
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature

            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.CntrID, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsTempratureCollection
            Return FilterByTempMin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Dim retCollection = New TB_OutwardCnsTempratureCollection()
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature

            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.TempMin, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByTempMin(ByVal searchValue As String) As TB_OutwardCnsTempratureCollection
            Return FilterByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTempMin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Return FilterByTempMin(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCnsTempratureCollection
            Return FilterByTempMax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Dim retCollection = New TB_OutwardCnsTempratureCollection()
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature

            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.TempMax, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByTempMax(ByVal searchValue As String) As TB_OutwardCnsTempratureCollection
            Return FilterByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTempMax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Return FilterByTempMax(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTemperatureBase(ByVal searchValue As System.String) As TB_OutwardCnsTempratureCollection
            Return FilterByTemperatureBase(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTemperatureBase(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCnsTempratureCollection
            Dim retCollection = New TB_OutwardCnsTempratureCollection()
            Dim _TB_OutwardCnsTemprature As TB_OutwardCnsTemprature

            For Each _TB_OutwardCnsTemprature In Me.List
                If Match(comparer, _TB_OutwardCnsTemprature.TemperatureBase, searchValue) Then
                    retCollection.Add(_TB_OutwardCnsTemprature)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_OutwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTempMin(ByVal sortDirection As SortDirection) As TB_OutwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TempMin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTempMax(ByVal sortDirection As SortDirection) As TB_OutwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TempMax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTemperatureBase(ByVal sortDirection As SortDirection) As TB_OutwardCnsTempratureCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TemperatureBase"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardCntrs))>public MustInherit class TB_OutwardCntrsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardCntrs))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardCntrs
            Get
                return CType(Me.List(index),TB_OutwardCntrs)
            End Get
            Set(ByVal Value As TB_OutwardCntrs)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCntrsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardCntrsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCntrs
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                if  Match(comparer,_TB_OutwardCntrs(propertyName) , searchValue) then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardCntrs As TB_OutwardCntrs) As System.Int32
            Return Me.List.Add(newTB_OutwardCntrs)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardCntrs
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.ID, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_OutwardCntrs
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.BLID, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCntrNo(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CntrNo, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCnSize(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CnSize, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByCnType(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CnType, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindBySealNo(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindBySealNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySealNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.SealNo, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCntrs
            Return FindByTW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.TW, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByTW(ByVal searchValue As String) As TB_OutwardCntrs
            Return FindByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Return FindByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCntrs
            Return FindByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.GW, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByGW(ByVal searchValue As String) As TB_OutwardCntrs
            Return FindByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Return FindByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCntrs
            Return FindByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CBM, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlSingle 
        Public Function FindByCBM(ByVal searchValue As String) As TB_OutwardCntrs
            Return FindByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Return FindByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCntrs
            Return FindByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.NET, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByNET(ByVal searchValue As String) As TB_OutwardCntrs
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFLE(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByFLE(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFLE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.FLE, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindBySOC(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.SOC, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByPackageType(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.PackageType, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCntrs
            Return FindByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.NoOFPkgs, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByNoOFPkgs(ByVal searchValue As String) As TB_OutwardCntrs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGoods(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.Goods, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardCntrs
            Return FindByIsOOG(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.IsOOG, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsOOG(ByVal searchValue As String) As TB_OutwardCntrs
            Return FindByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsOOG(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Return FindByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPOLTerm(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByPOLTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOLTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.POLTerm, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FindByPODTerm(ByVal searchValue As System.String) As TB_OutwardCntrs
            Return FindByPODTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPODTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrs
            Dim _TB_OutwardCntrs As TB_OutwardCntrs
            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.PODTerm, searchValue) Then Return _TB_OutwardCntrs
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardCntrsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_OutwardCntrsCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.BLID, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrNo(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByCntrNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CntrNo, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnSize(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByCnSize(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnSize(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CnSize, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCnType(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByCnType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCnType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CnType, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySealNo(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterBySealNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySealNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.SealNo, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCntrsCollection
            Return FilterByTW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTW(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.TW, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByTW(ByVal searchValue As String) As TB_OutwardCntrsCollection
            Return FilterByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Return FilterByTW(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCntrsCollection
            Return FilterByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.GW, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByGW(ByVal searchValue As String) As TB_OutwardCntrsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle) As TB_OutwardCntrsCollection
            Return FilterByCBM(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCBM(ByVal searchValue As System.Data.SqlTypes.SqlSingle, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.CBM, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlSingle
        Public Function FilterByCBM(ByVal searchValue As String) As TB_OutwardCntrsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCBM(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Return FilterByCBM(System.Data.SqlTypes.SqlSingle.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardCntrsCollection
            Return FilterByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.NET, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByNET(ByVal searchValue As String) As TB_OutwardCntrsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFLE(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByFLE(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFLE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.FLE, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySOC(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterBySOC(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySOC(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.SOC, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPackageType(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.PackageType, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardCntrsCollection
            Return FilterByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.NoOFPkgs, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByNoOFPkgs(ByVal searchValue As String) As TB_OutwardCntrsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGoods(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.Goods, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardCntrsCollection
            Return FilterByIsOOG(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsOOG(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.IsOOG, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsOOG(ByVal searchValue As String) As TB_OutwardCntrsCollection
            Return FilterByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsOOG(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Return FilterByIsOOG(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPOLTerm(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByPOLTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOLTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.POLTerm, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPODTerm(ByVal searchValue As System.String) As TB_OutwardCntrsCollection
            Return FilterByPODTerm(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPODTerm(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCollection
            Dim retCollection = New TB_OutwardCntrsCollection()
            Dim _TB_OutwardCntrs As TB_OutwardCntrs

            For Each _TB_OutwardCntrs In Me.List
                If Match(comparer, _TB_OutwardCntrs.PODTerm, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrs)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrNo(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnSize(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnSize"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCnType(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CnType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySealNo(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SealNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTW(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGW(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCBM(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CBM"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNET(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NET"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFLE(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FLE"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySOC(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SOC"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackageType(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PackageType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOFPkgs(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOFPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGoods(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Goods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsOOG(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsOOG"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOLTerm(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POLTerm"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPODTerm(ByVal sortDirection As SortDirection) As TB_OutwardCntrsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PODTerm"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardCntrsCharges))>public MustInherit class TB_OutwardCntrsChargesCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardCntrsCharges))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardCntrsCharges
            Get
                return CType(Me.List(index),TB_OutwardCntrsCharges)
            End Get
            Set(ByVal Value As TB_OutwardCntrsCharges)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCntrsChargesCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardCntrsChargesCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardCntrsCharges
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                if  Match(comparer,_TB_OutwardCntrsCharges(propertyName) , searchValue) then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardCntrsCharges As TB_OutwardCntrsCharges) As System.Int32
            Return Me.List.Add(newTB_OutwardCntrsCharges)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardCntrsCharges
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.ID, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCntrsCharges
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.CntrID, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_OutwardCntrsCharges
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.ChargesCode, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_OutwardCntrsCharges
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.Currency, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsCharges
            Return FindByUnitRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.UnitRate, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByUnitRate(ByVal searchValue As String) As TB_OutwardCntrsCharges
            Return FindByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByUnitRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Return FindByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsCharges
            Return FindByMEARate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.MEARate, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByMEARate(ByVal searchValue As String) As TB_OutwardCntrsCharges
            Return FindByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMEARate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Return FindByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsCharges
            Return FindByWGTrate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.WGTrate, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByWGTrate(ByVal searchValue As String) As TB_OutwardCntrsCharges
            Return FindByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByWGTrate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Return FindByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFromPlace(ByVal searchValue As System.String) As TB_OutwardCntrsCharges
            Return FindByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.FromPlace, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByToPlace(ByVal searchValue As System.String) As TB_OutwardCntrsCharges
            Return FindByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FindByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.ToPlace, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsCharges
            Return FindByMinRate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.MinRate, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByMinRate(ByVal searchValue As String) As TB_OutwardCntrsCharges
            Return FindByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMinRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Return FindByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTerms(ByVal searchValue As System.String) As TB_OutwardCntrsCharges
            Return FindByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.Terms, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsCharges
            Return FindByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges
            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.RealAmount, searchValue) Then Return _TB_OutwardCntrsCharges
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByRealAmount(ByVal searchValue As String) As TB_OutwardCntrsCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsCharges
            Return FindByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardCntrsChargesCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_OutwardCntrsChargesCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.CntrID, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_OutwardCntrsChargesCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_OutwardCntrsChargesCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.Currency, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsChargesCollection
            Return FilterByUnitRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUnitRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.UnitRate, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByUnitRate(ByVal searchValue As String) As TB_OutwardCntrsChargesCollection
            Return FilterByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByUnitRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Return FilterByUnitRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsChargesCollection
            Return FilterByMEARate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMEARate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.MEARate, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByMEARate(ByVal searchValue As String) As TB_OutwardCntrsChargesCollection
            Return FilterByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMEARate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Return FilterByMEARate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsChargesCollection
            Return FilterByWGTrate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByWGTrate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.WGTrate, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByWGTrate(ByVal searchValue As String) As TB_OutwardCntrsChargesCollection
            Return FilterByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByWGTrate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Return FilterByWGTrate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFromPlace(ByVal searchValue As System.String) As TB_OutwardCntrsChargesCollection
            Return FilterByFromPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFromPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.FromPlace, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByToPlace(ByVal searchValue As System.String) As TB_OutwardCntrsChargesCollection
            Return FilterByToPlace(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByToPlace(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.ToPlace, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsChargesCollection
            Return FilterByMinRate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMinRate(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.MinRate, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByMinRate(ByVal searchValue As String) As TB_OutwardCntrsChargesCollection
            Return FilterByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMinRate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Return FilterByMinRate(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTerms(ByVal searchValue As System.String) As TB_OutwardCntrsChargesCollection
            Return FilterByTerms(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTerms(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.Terms, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_OutwardCntrsChargesCollection
            Return FilterByRealAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRealAmount(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Dim retCollection = New TB_OutwardCntrsChargesCollection()
            Dim _TB_OutwardCntrsCharges As TB_OutwardCntrsCharges

            For Each _TB_OutwardCntrsCharges In Me.List
                If Match(comparer, _TB_OutwardCntrsCharges.RealAmount, searchValue) Then
                    retCollection.Add(_TB_OutwardCntrsCharges)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByRealAmount(ByVal searchValue As String) As TB_OutwardCntrsChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByRealAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardCntrsChargesCollection
            Return FilterByRealAmount(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUnitRate(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UnitRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMEARate(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MEARate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByWGTrate(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("WGTrate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFromPlace(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FromPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByToPlace(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ToPlace"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMinRate(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MinRate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTerms(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Terms"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRealAmount(ByVal sortDirection As SortDirection) As TB_OutwardCntrsChargesCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("RealAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_OutwardDiscount))>public MustInherit class TB_OutwardDiscountCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_OutwardDiscount))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_OutwardDiscount
            Get
                return CType(Me.List(index),TB_OutwardDiscount)
            End Get
            Set(ByVal Value As TB_OutwardDiscount)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardDiscountCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount(propertyName), searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_OutwardDiscountCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_OutwardDiscount
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                if  Match(comparer,_TB_OutwardDiscount(propertyName) , searchValue) then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_OutwardDiscount As TB_OutwardDiscount) As System.Int32
            Return Me.List.Add(newTB_OutwardDiscount)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_OutwardDiscount
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.ID, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_OutwardDiscount
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.BLID, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FindBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_OutwardDiscount
            Return FindBydFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.dFreeDays, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt32 
        Public Function FindBydFreeDays(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBydFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_OutwardDiscount
            Return FindBydPercent(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.dPercent, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt32 
        Public Function FindBydPercent(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBydPercent(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardDiscount
            Return FindBydAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.dAmount, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindBydAmount(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBydAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardDiscount
            Return FindByLineSetel(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.LineSetel, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByLineSetel(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByLineSetel(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardDiscount
            Return FindByIsFDaysAsDiscount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.IsFDaysAsDiscount, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsFDaysAsDiscount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardDiscount
            Return FindBySpecialCalculate(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.SpecialCalculate, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindBySpecialCalculate(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySpecialCalculate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardDiscount
            Return FindByPerDay20(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.PerDay20, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByPerDay20(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPerDay20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardDiscount
            Return FindByPerDay40(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.PerDay40, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByPerDay40(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPerDay40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardDiscount
            Return FindByPerDay45(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.PerDay45, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByPerDay45(ByVal searchValue As String) As TB_OutwardDiscount
            Return FindByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPerDay45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Return FindByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDetentionID(ByVal searchValue As System.Guid) As TB_OutwardDiscount
            Return FindByDetentionID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDetentionID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.DetentionID, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FindByNoTax(ByVal searchValue As System.String) As TB_OutwardDiscount
            Return FindByNoTax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoTax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardDiscount
            Dim _TB_OutwardDiscount As TB_OutwardDiscount
            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.NoTax, searchValue) Then Return _TB_OutwardDiscount
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_OutwardDiscountCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.ID, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_OutwardDiscountCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.BLID, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_OutwardDiscountCollection
            Return FilterBydFreeDays(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydFreeDays(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.dFreeDays, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt32
        Public Function FilterBydFreeDays(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBydFreeDays(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterBydFreeDays(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function

        Public Function FilterBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32) As TB_OutwardDiscountCollection
            Return FilterBydPercent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydPercent(ByVal searchValue As System.Data.SqlTypes.SqlInt32, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.dPercent, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt32
        Public Function FilterBydPercent(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBydPercent(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterBydPercent(System.Data.SqlTypes.SqlInt32.Parse(searchValue), comparer)
        End Function

        Public Function FilterBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_OutwardDiscountCollection
            Return FilterBydAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBydAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.dAmount, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterBydAmount(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBydAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterBydAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_OutwardDiscountCollection
            Return FilterByLineSetel(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLineSetel(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.LineSetel, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByLineSetel(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByLineSetel(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterByLineSetel(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardDiscountCollection
            Return FilterByIsFDaysAsDiscount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsFDaysAsDiscount(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.IsFDaysAsDiscount, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsFDaysAsDiscount(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsFDaysAsDiscount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterByIsFDaysAsDiscount(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_OutwardDiscountCollection
            Return FilterBySpecialCalculate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySpecialCalculate(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.SpecialCalculate, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterBySpecialCalculate(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySpecialCalculate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterBySpecialCalculate(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardDiscountCollection
            Return FilterByPerDay20(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPerDay20(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.PerDay20, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByPerDay20(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPerDay20(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterByPerDay20(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardDiscountCollection
            Return FilterByPerDay40(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPerDay40(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.PerDay40, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByPerDay40(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPerDay40(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterByPerDay40(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_OutwardDiscountCollection
            Return FilterByPerDay45(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPerDay45(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.PerDay45, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByPerDay45(ByVal searchValue As String) As TB_OutwardDiscountCollection
            Return FilterByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPerDay45(ByVal searchValue As String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Return FilterByPerDay45(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDetentionID(ByVal searchValue As System.Guid) As TB_OutwardDiscountCollection
            Return FilterByDetentionID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDetentionID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.DetentionID, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoTax(ByVal searchValue As System.String) As TB_OutwardDiscountCollection
            Return FilterByNoTax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoTax(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_OutwardDiscountCollection
            Dim retCollection = New TB_OutwardDiscountCollection()
            Dim _TB_OutwardDiscount As TB_OutwardDiscount

            For Each _TB_OutwardDiscount In Me.List
                If Match(comparer, _TB_OutwardDiscount.NoTax, searchValue) Then
                    retCollection.Add(_TB_OutwardDiscount)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydFreeDays(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("dFreeDays"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydPercent(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("dPercent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBydAmount(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("dAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLineSetel(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LineSetel"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsFDaysAsDiscount(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsFDaysAsDiscount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySpecialCalculate(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SpecialCalculate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPerDay20(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PerDay20"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPerDay40(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PerDay40"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPerDay45(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PerDay45"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDetentionID(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DetentionID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoTax(ByVal sortDirection As SortDirection) As TB_OutwardDiscountCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoTax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_PermitDetails))>public MustInherit class TB_PermitDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_PermitDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_PermitDetails
            Get
                return CType(Me.List(index),TB_PermitDetails)
            End Get
            Set(ByVal Value As TB_PermitDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PermitDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_PermitDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PermitDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                if  Match(comparer,_TB_PermitDetails(propertyName) , searchValue) then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_PermitDetails As TB_PermitDetails) As System.Int32
            Return Me.List.Add(newTB_PermitDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_PermitDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.ID, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

        Public Function FindByPermitID(ByVal searchValue As System.Guid) As TB_PermitDetails
            Return FindByPermitID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPermitID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.PermitID, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCntrID(ByVal searchValue As System.Guid) As TB_PermitDetails
            Return FindByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.CntrID, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

        Public Function FindByFLE(ByVal searchValue As System.String) As TB_PermitDetails
            Return FindByFLE(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFLE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.FLE, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_PermitDetails
            Return FindByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.GW, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByGW(ByVal searchValue As String) As TB_PermitDetails
            Return FindByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetails
            Return FindByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPackageType(ByVal searchValue As System.String) As TB_PermitDetails
            Return FindByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.PackageType, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_PermitDetails
            Return FindByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.NoOFPkgs, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByNoOFPkgs(ByVal searchValue As String) As TB_PermitDetails
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetails
            Return FindByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySealNo(ByVal searchValue As System.String) As TB_PermitDetails
            Return FindBySealNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySealNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.SealNo, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

        Public Function FindByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_PermitDetails
            Return FindByTempMin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.TempMin, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTempMin(ByVal searchValue As String) As TB_PermitDetails
            Return FindByTempMin(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTempMin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetails
            Return FindByTempMin(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_PermitDetails
            Return FindByTempMax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_PermitDetails
            Dim _TB_PermitDetails As TB_PermitDetails
            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.TempMax, searchValue) Then Return _TB_PermitDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTempMax(ByVal searchValue As String) As TB_PermitDetails
            Return FindByTempMax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTempMax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetails
            Return FindByTempMax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_PermitDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.ID, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPermitID(ByVal searchValue As System.Guid) As TB_PermitDetailsCollection
            Return FilterByPermitID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPermitID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.PermitID, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCntrID(ByVal searchValue As System.Guid) As TB_PermitDetailsCollection
            Return FilterByCntrID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCntrID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.CntrID, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFLE(ByVal searchValue As System.String) As TB_PermitDetailsCollection
            Return FilterByFLE(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFLE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.FLE, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_PermitDetailsCollection
            Return FilterByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.GW, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByGW(ByVal searchValue As String) As TB_PermitDetailsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPackageType(ByVal searchValue As System.String) As TB_PermitDetailsCollection
            Return FilterByPackageType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackageType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.PackageType, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_PermitDetailsCollection
            Return FilterByNoOFPkgs(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNoOFPkgs(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.NoOFPkgs, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByNoOFPkgs(ByVal searchValue As String) As TB_PermitDetailsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNoOFPkgs(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Return FilterByNoOFPkgs(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySealNo(ByVal searchValue As System.String) As TB_PermitDetailsCollection
            Return FilterBySealNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySealNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.SealNo, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_PermitDetailsCollection
            Return FilterByTempMin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTempMin(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.TempMin, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTempMin(ByVal searchValue As String) As TB_PermitDetailsCollection
            Return FilterByTempMin(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTempMin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Return FilterByTempMin(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_PermitDetailsCollection
            Return FilterByTempMax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTempMax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Dim retCollection = New TB_PermitDetailsCollection()
            Dim _TB_PermitDetails As TB_PermitDetails

            For Each _TB_PermitDetails In Me.List
                If Match(comparer, _TB_PermitDetails.TempMax, searchValue) Then
                    retCollection.Add(_TB_PermitDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTempMax(ByVal searchValue As String) As TB_PermitDetailsCollection
            Return FilterByTempMax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTempMax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitDetailsCollection
            Return FilterByTempMax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPermitID(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PermitID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCntrID(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CntrID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFLE(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FLE"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGW(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackageType(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PackageType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNoOFPkgs(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NoOFPkgs"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySealNo(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SealNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTempMin(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TempMin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTempMax(ByVal sortDirection As SortDirection) As TB_PermitDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TempMax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Permits))>public MustInherit class TB_PermitsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Permits))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Permits
            Get
                return CType(Me.List(index),TB_Permits)
            End Get
            Set(ByVal Value As TB_Permits)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PermitsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits(propertyName), searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_PermitsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Permits
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                if  Match(comparer,_TB_Permits(propertyName) , searchValue) then Return _TB_Permits
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Permits As TB_Permits) As System.Int32
            Return Me.List.Add(newTB_Permits)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Permits
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.ID, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByPermitNo(ByVal searchValue As System.String) As TB_Permits
            Return FindByPermitNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPermitNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.PermitNo, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByStatus(ByVal searchValue As System.String) As TB_Permits
            Return FindByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.Status, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByGoods(ByVal searchValue As System.String) As TB_Permits
            Return FindByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.Goods, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByFPOD(ByVal searchValue As System.String) As TB_Permits
            Return FindByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.FPOD, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByPOT(ByVal searchValue As System.String) As TB_Permits
            Return FindByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.POT, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByIMDGCode(ByVal searchValue As System.String) As TB_Permits
            Return FindByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.IMDGCode, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByUNNumber(ByVal searchValue As System.String) As TB_Permits
            Return FindByUNNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUNNumber(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.UNNumber, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Permits
            Return FindByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.FlashPoint, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFlashPoint(ByVal searchValue As String) As TB_Permits
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Permits
            Return FindByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPackingGroup(ByVal searchValue As System.String) As TB_Permits
            Return FindByPackingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPackingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.PackingGroup, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_Permits
            Return FindByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.PageNumber, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByPageNumber(ByVal searchValue As String) As TB_Permits
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Permits
            Return FindByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_Permits
            Return FindByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_Permits
            Dim _TB_Permits As TB_Permits
            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.EMSNumber, searchValue) Then Return _TB_Permits
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByEMSNumber(ByVal searchValue As String) As TB_Permits
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Permits
            Return FindByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_PermitsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.ID, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPermitNo(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByPermitNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPermitNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.PermitNo, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStatus(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByStatus(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStatus(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.Status, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByGoods(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByGoods(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGoods(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.Goods, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFPOD(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByFPOD(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFPOD(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.FPOD, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPOT(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByPOT(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.POT, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIMDGCode(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByIMDGCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIMDGCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.IMDGCode, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUNNumber(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByUNNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUNNumber(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.UNNumber, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_PermitsCollection
            Return FilterByFlashPoint(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFlashPoint(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.FlashPoint, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFlashPoint(ByVal searchValue As String) As TB_PermitsCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFlashPoint(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitsCollection
            Return FilterByFlashPoint(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPackingGroup(ByVal searchValue As System.String) As TB_PermitsCollection
            Return FilterByPackingGroup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPackingGroup(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.PackingGroup, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_PermitsCollection
            Return FilterByPageNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPageNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.PageNumber, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByPageNumber(ByVal searchValue As String) As TB_PermitsCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPageNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitsCollection
            Return FilterByPageNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_PermitsCollection
            Return FilterByEMSNumber(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEMSNumber(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_PermitsCollection
            Dim retCollection = New TB_PermitsCollection()
            Dim _TB_Permits As TB_Permits

            For Each _TB_Permits In Me.List
                If Match(comparer, _TB_Permits.EMSNumber, searchValue) Then
                    retCollection.Add(_TB_Permits)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByEMSNumber(ByVal searchValue As String) As TB_PermitsCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByEMSNumber(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PermitsCollection
            Return FilterByEMSNumber(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPermitNo(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PermitNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStatus(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Status"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGoods(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Goods"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFPOD(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FPOD"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPOT(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("POT"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIMDGCode(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IMDGCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUNNumber(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UNNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFlashPoint(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FlashPoint"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPackingGroup(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PackingGroup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPageNumber(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PageNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEMSNumber(ByVal sortDirection As SortDirection) As TB_PermitsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EMSNumber"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_PInvoice))>public MustInherit class TB_PInvoiceCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_PInvoice))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_PInvoice
            Get
                return CType(Me.List(index),TB_PInvoice)
            End Get
            Set(ByVal Value As TB_PInvoice)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PInvoiceCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Dim retCollection = New TB_PInvoiceCollection()
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice(propertyName), searchValue) Then
                    retCollection.Add(_TB_PInvoice)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_PInvoiceCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_PInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PInvoice
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PInvoice
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                if  Match(comparer,_TB_PInvoice(propertyName) , searchValue) then Return _TB_PInvoice
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_PInvoice As TB_PInvoice) As System.Int32
            Return Me.List.Add(newTB_PInvoice)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_PInvoice
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoice
            Dim _TB_PInvoice As TB_PInvoice
            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.ID, searchValue) Then Return _TB_PInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByBLID(ByVal searchValue As System.Guid) As TB_PInvoice
            Return FindByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoice
            Dim _TB_PInvoice As TB_PInvoice
            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.BLID, searchValue) Then Return _TB_PInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceNo(ByVal searchValue As System.String) As TB_PInvoice
            Return FindByInvoiceNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoice
            Dim _TB_PInvoice As TB_PInvoice
            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.InvoiceNo, searchValue) Then Return _TB_PInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByDescription(ByVal searchValue As System.String) As TB_PInvoice
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoice
            Dim _TB_PInvoice As TB_PInvoice
            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.Description, searchValue) Then Return _TB_PInvoice
            Next

            Return Nothing
        End Function

        Public Function FindByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_PInvoice
            Return FindByIssueTime(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_PInvoice
            Dim _TB_PInvoice As TB_PInvoice
            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.IssueTime, searchValue) Then Return _TB_PInvoice
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByIssueTime(ByVal searchValue As String) As TB_PInvoice
            Return FindByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIssueTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PInvoice
            Return FindByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIssueBy(ByVal searchValue As System.Guid) As TB_PInvoice
            Return FindByIssueBy(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIssueBy(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoice
            Dim _TB_PInvoice As TB_PInvoice
            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.IssueBy, searchValue) Then Return _TB_PInvoice
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_PInvoiceCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Dim retCollection = New TB_PInvoiceCollection()
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.ID, searchValue) Then
                    retCollection.Add(_TB_PInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBLID(ByVal searchValue As System.Guid) As TB_PInvoiceCollection
            Return FilterByBLID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBLID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Dim retCollection = New TB_PInvoiceCollection()
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.BLID, searchValue) Then
                    retCollection.Add(_TB_PInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceNo(ByVal searchValue As System.String) As TB_PInvoiceCollection
            Return FilterByInvoiceNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Dim retCollection = New TB_PInvoiceCollection()
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.InvoiceNo, searchValue) Then
                    retCollection.Add(_TB_PInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_PInvoiceCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Dim retCollection = New TB_PInvoiceCollection()
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.Description, searchValue) Then
                    retCollection.Add(_TB_PInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_PInvoiceCollection
            Return FilterByIssueTime(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueTime(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Dim retCollection = New TB_PInvoiceCollection()
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.IssueTime, searchValue) Then
                    retCollection.Add(_TB_PInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByIssueTime(ByVal searchValue As String) As TB_PInvoiceCollection
            Return FilterByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIssueTime(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Return FilterByIssueTime(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIssueBy(ByVal searchValue As System.Guid) As TB_PInvoiceCollection
            Return FilterByIssueBy(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIssueBy(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoiceCollection
            Dim retCollection = New TB_PInvoiceCollection()
            Dim _TB_PInvoice As TB_PInvoice

            For Each _TB_PInvoice In Me.List
                If Match(comparer, _TB_PInvoice.IssueBy, searchValue) Then
                    retCollection.Add(_TB_PInvoice)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_PInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBLID(ByVal sortDirection As SortDirection) As TB_PInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BLID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceNo(ByVal sortDirection As SortDirection) As TB_PInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_PInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueTime(ByVal sortDirection As SortDirection) As TB_PInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueTime"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIssueBy(ByVal sortDirection As SortDirection) As TB_PInvoiceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IssueBy"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_PInvoiceDetails))>public MustInherit class TB_PInvoiceDetailsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_PInvoiceDetails))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_PInvoiceDetails
            Get
                return CType(Me.List(index),TB_PInvoiceDetails)
            End Get
            Set(ByVal Value As TB_PInvoiceDetails)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PInvoiceDetailsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails(propertyName), searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_PInvoiceDetailsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PInvoiceDetails
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                if  Match(comparer,_TB_PInvoiceDetails(propertyName) , searchValue) then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_PInvoiceDetails As TB_PInvoiceDetails) As System.Int32
            Return Me.List.Add(newTB_PInvoiceDetails)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_PInvoiceDetails
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails
            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.ID, searchValue) Then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceID(ByVal searchValue As System.Guid) As TB_PInvoiceDetails
            Return FindByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails
            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.InvoiceID, searchValue) Then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_PInvoiceDetails
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails
            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Seq, searchValue) Then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_PInvoiceDetails
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_PInvoiceDetails
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails
            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.ChargesCode, searchValue) Then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByRemarks(ByVal searchValue As System.String) As TB_PInvoiceDetails
            Return FindByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FindByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails
            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Remarks, searchValue) Then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_PInvoiceDetails
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails
            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Currency, searchValue) Then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function

        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_PInvoiceDetails
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails
            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Amount, searchValue) Then Return _TB_PInvoiceDetails
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_PInvoiceDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PInvoiceDetails
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_PInvoiceDetailsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.ID, searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid) As TB_PInvoiceDetailsCollection
            Return FilterByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.InvoiceID, searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_PInvoiceDetailsCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Seq, searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_PInvoiceDetailsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_PInvoiceDetailsCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByRemarks(ByVal searchValue As System.String) As TB_PInvoiceDetailsCollection
            Return FilterByRemarks(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByRemarks(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Remarks, searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_PInvoiceDetailsCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Currency, searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_PInvoiceDetailsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Dim retCollection = New TB_PInvoiceDetailsCollection()
            Dim _TB_PInvoiceDetails As TB_PInvoiceDetails

            For Each _TB_PInvoiceDetails In Me.List
                If Match(comparer, _TB_PInvoiceDetails.Amount, searchValue) Then
                    retCollection.Add(_TB_PInvoiceDetails)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_PInvoiceDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_PInvoiceDetailsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceID(ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByRemarks(ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Remarks"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_PInvoiceDetailsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Ports))>public MustInherit class TB_PortsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Ports))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Ports
            Get
                return CType(Me.List(index),TB_Ports)
            End Get
            Set(ByVal Value As TB_Ports)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_PortsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_PortsCollection
            Dim retCollection = New TB_PortsCollection()
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports(propertyName), searchValue) Then
                    retCollection.Add(_TB_Ports)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_PortsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_PortsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Ports
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Ports
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                if  Match(comparer,_TB_Ports(propertyName) , searchValue) then Return _TB_Ports
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Ports As TB_Ports) As System.Int32
            Return Me.List.Add(newTB_Ports)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Ports
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Ports
            Dim _TB_Ports As TB_Ports
            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.ID, searchValue) Then Return _TB_Ports
            Next

            Return Nothing
        End Function

        Public Function FindByPortCode(ByVal searchValue As System.String) As TB_Ports
            Return FindByPortCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPortCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Ports
            Dim _TB_Ports As TB_Ports
            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.PortCode, searchValue) Then Return _TB_Ports
            Next

            Return Nothing
        End Function

        Public Function FindByPortName(ByVal searchValue As System.String) As TB_Ports
            Return FindByPortName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPortName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Ports
            Dim _TB_Ports As TB_Ports
            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.PortName, searchValue) Then Return _TB_Ports
            Next

            Return Nothing
        End Function

        Public Function FindByFPortName(ByVal searchValue As System.String) As TB_Ports
            Return FindByFPortName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFPortName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Ports
            Dim _TB_Ports As TB_Ports
            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.FPortName, searchValue) Then Return _TB_Ports
            Next

            Return Nothing
        End Function

        Public Function FindByCountry(ByVal searchValue As System.String) As TB_Ports
            Return FindByCountry(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCountry(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Ports
            Dim _TB_Ports As TB_Ports
            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.Country, searchValue) Then Return _TB_Ports
            Next

            Return Nothing
        End Function

        Public Function FindByEDIIPCODE(ByVal searchValue As System.String) As TB_Ports
            Return FindByEDIIPCODE(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEDIIPCODE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Ports
            Dim _TB_Ports As TB_Ports
            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.EDIIPCODE, searchValue) Then Return _TB_Ports
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_PortsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_PortsCollection
            Dim retCollection = New TB_PortsCollection()
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.ID, searchValue) Then
                    retCollection.Add(_TB_Ports)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPortCode(ByVal searchValue As System.String) As TB_PortsCollection
            Return FilterByPortCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPortCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PortsCollection
            Dim retCollection = New TB_PortsCollection()
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.PortCode, searchValue) Then
                    retCollection.Add(_TB_Ports)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPortName(ByVal searchValue As System.String) As TB_PortsCollection
            Return FilterByPortName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPortName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PortsCollection
            Dim retCollection = New TB_PortsCollection()
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.PortName, searchValue) Then
                    retCollection.Add(_TB_Ports)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFPortName(ByVal searchValue As System.String) As TB_PortsCollection
            Return FilterByFPortName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFPortName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PortsCollection
            Dim retCollection = New TB_PortsCollection()
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.FPortName, searchValue) Then
                    retCollection.Add(_TB_Ports)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCountry(ByVal searchValue As System.String) As TB_PortsCollection
            Return FilterByCountry(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCountry(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PortsCollection
            Dim retCollection = New TB_PortsCollection()
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.Country, searchValue) Then
                    retCollection.Add(_TB_Ports)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEDIIPCODE(ByVal searchValue As System.String) As TB_PortsCollection
            Return FilterByEDIIPCODE(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEDIIPCODE(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_PortsCollection
            Dim retCollection = New TB_PortsCollection()
            Dim _TB_Ports As TB_Ports

            For Each _TB_Ports In Me.List
                If Match(comparer, _TB_Ports.EDIIPCODE, searchValue) Then
                    retCollection.Add(_TB_Ports)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_PortsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPortCode(ByVal sortDirection As SortDirection) As TB_PortsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PortCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPortName(ByVal sortDirection As SortDirection) As TB_PortsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PortName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFPortName(ByVal sortDirection As SortDirection) As TB_PortsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FPortName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCountry(ByVal sortDirection As SortDirection) As TB_PortsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Country"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEDIIPCODE(ByVal sortDirection As SortDirection) As TB_PortsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EDIIPCODE"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_RecivedItems))>public MustInherit class TB_RecivedItemsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_RecivedItems))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_RecivedItems
            Get
                return CType(Me.List(index),TB_RecivedItems)
            End Get
            Set(ByVal Value As TB_RecivedItems)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_RecivedItemsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems(propertyName), searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_RecivedItemsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_RecivedItems
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                if  Match(comparer,_TB_RecivedItems(propertyName) , searchValue) then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_RecivedItems As TB_RecivedItems) As System.Int32
            Return Me.List.Add(newTB_RecivedItems)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_RecivedItems
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.ID, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByInvoiceID(ByVal searchValue As System.Guid) As TB_RecivedItems
            Return FindByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.InvoiceID, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_RecivedItems
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Seq, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt16 
        Public Function FindBySeq(ByVal searchValue As String) As TB_RecivedItems
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_RecivedItems
            Return FindBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDescription(ByVal searchValue As System.String) As TB_RecivedItems
            Return FindByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Description, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByPaymentType(ByVal searchValue As System.String) As TB_RecivedItems
            Return FindByPaymentType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaymentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.PaymentType, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByBank(ByVal searchValue As System.String) As TB_RecivedItems
            Return FindByBank(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBank(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Bank, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByCurrency(ByVal searchValue As System.String) As TB_RecivedItems
            Return FindByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Currency, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_RecivedItems
            Return FindByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Amount, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByAmount(ByVal searchValue As String) As TB_RecivedItems
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_RecivedItems
            Return FindByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_RecivedItems
            Return FindByIrrAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.IrrAmount, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByIrrAmount(ByVal searchValue As String) As TB_RecivedItems
            Return FindByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIrrAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_RecivedItems
            Return FindByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPaidDate(ByVal searchValue As System.String) As TB_RecivedItems
            Return FindByPaidDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaidDate(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.PaidDate, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByPaidRef(ByVal searchValue As System.String) As TB_RecivedItems
            Return FindByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.PaidRef, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FindByReceivedType(ByVal searchValue As System.String) As TB_RecivedItems
            Return FindByReceivedType(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReceivedType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItems
            Dim _TB_RecivedItems As TB_RecivedItems
            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.ReceivedType, searchValue) Then Return _TB_RecivedItems
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_RecivedItemsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.ID, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid) As TB_RecivedItemsCollection
            Return FilterByInvoiceID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInvoiceID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.InvoiceID, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16) As TB_RecivedItemsCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt16, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Seq, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt16
        Public Function FilterBySeq(ByVal searchValue As String) As TB_RecivedItemsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt16.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDescription(ByVal searchValue As System.String) As TB_RecivedItemsCollection
            Return FilterByDescription(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDescription(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Description, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaymentType(ByVal searchValue As System.String) As TB_RecivedItemsCollection
            Return FilterByPaymentType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaymentType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.PaymentType, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBank(ByVal searchValue As System.String) As TB_RecivedItemsCollection
            Return FilterByBank(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBank(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Bank, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCurrency(ByVal searchValue As System.String) As TB_RecivedItemsCollection
            Return FilterByCurrency(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCurrency(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Currency, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_RecivedItemsCollection
            Return FilterByAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByAmount(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.Amount, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByAmount(ByVal searchValue As String) As TB_RecivedItemsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Return FilterByAmount(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_RecivedItemsCollection
            Return FilterByIrrAmount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIrrAmount(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.IrrAmount, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByIrrAmount(ByVal searchValue As String) As TB_RecivedItemsCollection
            Return FilterByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIrrAmount(ByVal searchValue As String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Return FilterByIrrAmount(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPaidDate(ByVal searchValue As System.String) As TB_RecivedItemsCollection
            Return FilterByPaidDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaidDate(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.PaidDate, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPaidRef(ByVal searchValue As System.String) As TB_RecivedItemsCollection
            Return FilterByPaidRef(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPaidRef(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.PaidRef, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReceivedType(ByVal searchValue As System.String) As TB_RecivedItemsCollection
            Return FilterByReceivedType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReceivedType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_RecivedItemsCollection
            Dim retCollection = New TB_RecivedItemsCollection()
            Dim _TB_RecivedItems As TB_RecivedItems

            For Each _TB_RecivedItems In Me.List
                If Match(comparer, _TB_RecivedItems.ReceivedType, searchValue) Then
                    retCollection.Add(_TB_RecivedItems)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInvoiceID(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InvoiceID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDescription(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Description"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaymentType(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaymentType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBank(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Bank"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCurrency(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Currency"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByAmount(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Amount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIrrAmount(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IrrAmount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaidDate(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaidDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPaidRef(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PaidRef"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReceivedType(ByVal sortDirection As SortDirection) As TB_RecivedItemsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReceivedType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Reference))>public MustInherit class TB_ReferenceCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Reference))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Reference
            Get
                return CType(Me.List(index),TB_Reference)
            End Get
            Set(ByVal Value As TB_Reference)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ReferenceCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ReferenceCollection
            Dim retCollection = New TB_ReferenceCollection()
            Dim _TB_Reference As TB_Reference

            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference(propertyName), searchValue) Then
                    retCollection.Add(_TB_Reference)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ReferenceCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ReferenceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Reference
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Reference
            Dim _TB_Reference As TB_Reference

            For Each _TB_Reference In Me.List
                if  Match(comparer,_TB_Reference(propertyName) , searchValue) then Return _TB_Reference
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Reference As TB_Reference) As System.Int32
            Return Me.List.Add(newTB_Reference)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Reference
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Reference
            Dim _TB_Reference As TB_Reference
            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.ID, searchValue) Then Return _TB_Reference
            Next

            Return Nothing
        End Function

        Public Function FindByCode(ByVal searchValue As System.String) As TB_Reference
            Return FindByCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Reference
            Dim _TB_Reference As TB_Reference
            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.Code, searchValue) Then Return _TB_Reference
            Next

            Return Nothing
        End Function

        Public Function FindBySection(ByVal searchValue As System.String) As TB_Reference
            Return FindBySection(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySection(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Reference
            Dim _TB_Reference As TB_Reference
            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.Section, searchValue) Then Return _TB_Reference
            Next

            Return Nothing
        End Function

        Public Function FindByInternalCode(ByVal searchValue As System.String) As TB_Reference
            Return FindByInternalCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByInternalCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Reference
            Dim _TB_Reference As TB_Reference
            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.InternalCode, searchValue) Then Return _TB_Reference
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ReferenceCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ReferenceCollection
            Dim retCollection = New TB_ReferenceCollection()
            Dim _TB_Reference As TB_Reference

            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.ID, searchValue) Then
                    retCollection.Add(_TB_Reference)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCode(ByVal searchValue As System.String) As TB_ReferenceCollection
            Return FilterByCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReferenceCollection
            Dim retCollection = New TB_ReferenceCollection()
            Dim _TB_Reference As TB_Reference

            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.Code, searchValue) Then
                    retCollection.Add(_TB_Reference)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySection(ByVal searchValue As System.String) As TB_ReferenceCollection
            Return FilterBySection(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySection(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReferenceCollection
            Dim retCollection = New TB_ReferenceCollection()
            Dim _TB_Reference As TB_Reference

            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.Section, searchValue) Then
                    retCollection.Add(_TB_Reference)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByInternalCode(ByVal searchValue As System.String) As TB_ReferenceCollection
            Return FilterByInternalCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByInternalCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReferenceCollection
            Dim retCollection = New TB_ReferenceCollection()
            Dim _TB_Reference As TB_Reference

            For Each _TB_Reference In Me.List
                If Match(comparer, _TB_Reference.InternalCode, searchValue) Then
                    retCollection.Add(_TB_Reference)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ReferenceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCode(ByVal sortDirection As SortDirection) As TB_ReferenceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Code"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySection(ByVal sortDirection As SortDirection) As TB_ReferenceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Section"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByInternalCode(ByVal sortDirection As SortDirection) As TB_ReferenceCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("InternalCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ReleaseLetterSeq))>public MustInherit class TB_ReleaseLetterSeqCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ReleaseLetterSeq))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ReleaseLetterSeq
            Get
                return CType(Me.List(index),TB_ReleaseLetterSeq)
            End Get
            Set(ByVal Value As TB_ReleaseLetterSeq)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ReleaseLetterSeqCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ReleaseLetterSeqCollection
            Dim retCollection = New TB_ReleaseLetterSeqCollection()
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq

            For Each _TB_ReleaseLetterSeq In Me.List
                If Match(comparer, _TB_ReleaseLetterSeq(propertyName), searchValue) Then
                    retCollection.Add(_TB_ReleaseLetterSeq)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ReleaseLetterSeqCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ReleaseLetterSeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ReleaseLetterSeq
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ReleaseLetterSeq
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq

            For Each _TB_ReleaseLetterSeq In Me.List
                if  Match(comparer,_TB_ReleaseLetterSeq(propertyName) , searchValue) then Return _TB_ReleaseLetterSeq
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ReleaseLetterSeq As TB_ReleaseLetterSeq) As System.Int32
            Return Me.List.Add(newTB_ReleaseLetterSeq)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ReleaseLetterSeq
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ReleaseLetterSeq
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq
            For Each _TB_ReleaseLetterSeq In Me.List
                If Match(comparer, _TB_ReleaseLetterSeq.ID, searchValue) Then Return _TB_ReleaseLetterSeq
            Next

            Return Nothing
        End Function

        Public Function FindByLastSeq(ByVal searchValue As System.String) As TB_ReleaseLetterSeq
            Return FindByLastSeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLastSeq(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReleaseLetterSeq
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq
            For Each _TB_ReleaseLetterSeq In Me.List
                If Match(comparer, _TB_ReleaseLetterSeq.LastSeq, searchValue) Then Return _TB_ReleaseLetterSeq
            Next

            Return Nothing
        End Function

        Public Function FindByMaxSeq(ByVal searchValue As System.String) As TB_ReleaseLetterSeq
            Return FindByMaxSeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMaxSeq(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReleaseLetterSeq
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq
            For Each _TB_ReleaseLetterSeq In Me.List
                If Match(comparer, _TB_ReleaseLetterSeq.MaxSeq, searchValue) Then Return _TB_ReleaseLetterSeq
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ReleaseLetterSeqCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ReleaseLetterSeqCollection
            Dim retCollection = New TB_ReleaseLetterSeqCollection()
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq

            For Each _TB_ReleaseLetterSeq In Me.List
                If Match(comparer, _TB_ReleaseLetterSeq.ID, searchValue) Then
                    retCollection.Add(_TB_ReleaseLetterSeq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLastSeq(ByVal searchValue As System.String) As TB_ReleaseLetterSeqCollection
            Return FilterByLastSeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLastSeq(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReleaseLetterSeqCollection
            Dim retCollection = New TB_ReleaseLetterSeqCollection()
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq

            For Each _TB_ReleaseLetterSeq In Me.List
                If Match(comparer, _TB_ReleaseLetterSeq.LastSeq, searchValue) Then
                    retCollection.Add(_TB_ReleaseLetterSeq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMaxSeq(ByVal searchValue As System.String) As TB_ReleaseLetterSeqCollection
            Return FilterByMaxSeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMaxSeq(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReleaseLetterSeqCollection
            Dim retCollection = New TB_ReleaseLetterSeqCollection()
            Dim _TB_ReleaseLetterSeq As TB_ReleaseLetterSeq

            For Each _TB_ReleaseLetterSeq In Me.List
                If Match(comparer, _TB_ReleaseLetterSeq.MaxSeq, searchValue) Then
                    retCollection.Add(_TB_ReleaseLetterSeq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ReleaseLetterSeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLastSeq(ByVal sortDirection As SortDirection) As TB_ReleaseLetterSeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LastSeq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMaxSeq(ByVal sortDirection As SortDirection) As TB_ReleaseLetterSeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MaxSeq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_ReportCustomFields))>public MustInherit class TB_ReportCustomFieldsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_ReportCustomFields))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_ReportCustomFields
            Get
                return CType(Me.List(index),TB_ReportCustomFields)
            End Get
            Set(ByVal Value As TB_ReportCustomFields)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ReportCustomFieldsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ReportCustomFieldsCollection
            Dim retCollection = New TB_ReportCustomFieldsCollection()
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields(propertyName), searchValue) Then
                    retCollection.Add(_TB_ReportCustomFields)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_ReportCustomFieldsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_ReportCustomFieldsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_ReportCustomFields
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_ReportCustomFields
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                if  Match(comparer,_TB_ReportCustomFields(propertyName) , searchValue) then Return _TB_ReportCustomFields
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_ReportCustomFields As TB_ReportCustomFields) As System.Int32
            Return Me.List.Add(newTB_ReportCustomFields)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_ReportCustomFields
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ReportCustomFields
            Dim _TB_ReportCustomFields As TB_ReportCustomFields
            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.ID, searchValue) Then Return _TB_ReportCustomFields
            Next

            Return Nothing
        End Function

        Public Function FindByReportName(ByVal searchValue As System.String) As TB_ReportCustomFields
            Return FindByReportName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReportName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFields
            Dim _TB_ReportCustomFields As TB_ReportCustomFields
            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.ReportName, searchValue) Then Return _TB_ReportCustomFields
            Next

            Return Nothing
        End Function

        Public Function FindByReportFrindlyName(ByVal searchValue As System.String) As TB_ReportCustomFields
            Return FindByReportFrindlyName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByReportFrindlyName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFields
            Dim _TB_ReportCustomFields As TB_ReportCustomFields
            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.ReportFrindlyName, searchValue) Then Return _TB_ReportCustomFields
            Next

            Return Nothing
        End Function

        Public Function FindByFieldName(ByVal searchValue As System.String) As TB_ReportCustomFields
            Return FindByFieldName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFieldName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFields
            Dim _TB_ReportCustomFields As TB_ReportCustomFields
            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.FieldName, searchValue) Then Return _TB_ReportCustomFields
            Next

            Return Nothing
        End Function

        Public Function FindByFieldFriendlyName(ByVal searchValue As System.String) As TB_ReportCustomFields
            Return FindByFieldFriendlyName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFieldFriendlyName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFields
            Dim _TB_ReportCustomFields As TB_ReportCustomFields
            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.FieldFriendlyName, searchValue) Then Return _TB_ReportCustomFields
            Next

            Return Nothing
        End Function

        Public Function FindByDataContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As TB_ReportCustomFields
            Return FindByDataContent(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDataContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As TB_ReportCustomFields
            Dim _TB_ReportCustomFields As TB_ReportCustomFields
            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.DataContent, searchValue) Then Return _TB_ReportCustomFields
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_ReportCustomFieldsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_ReportCustomFieldsCollection
            Dim retCollection = New TB_ReportCustomFieldsCollection()
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.ID, searchValue) Then
                    retCollection.Add(_TB_ReportCustomFields)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReportName(ByVal searchValue As System.String) As TB_ReportCustomFieldsCollection
            Return FilterByReportName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReportName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFieldsCollection
            Dim retCollection = New TB_ReportCustomFieldsCollection()
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.ReportName, searchValue) Then
                    retCollection.Add(_TB_ReportCustomFields)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByReportFrindlyName(ByVal searchValue As System.String) As TB_ReportCustomFieldsCollection
            Return FilterByReportFrindlyName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByReportFrindlyName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFieldsCollection
            Dim retCollection = New TB_ReportCustomFieldsCollection()
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.ReportFrindlyName, searchValue) Then
                    retCollection.Add(_TB_ReportCustomFields)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFieldName(ByVal searchValue As System.String) As TB_ReportCustomFieldsCollection
            Return FilterByFieldName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFieldName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFieldsCollection
            Dim retCollection = New TB_ReportCustomFieldsCollection()
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.FieldName, searchValue) Then
                    retCollection.Add(_TB_ReportCustomFields)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByFieldFriendlyName(ByVal searchValue As System.String) As TB_ReportCustomFieldsCollection
            Return FilterByFieldFriendlyName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFieldFriendlyName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_ReportCustomFieldsCollection
            Dim retCollection = New TB_ReportCustomFieldsCollection()
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.FieldFriendlyName, searchValue) Then
                    retCollection.Add(_TB_ReportCustomFields)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDataContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary) As TB_ReportCustomFieldsCollection
            Return FilterByDataContent(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDataContent(ByVal searchValue As System.Data.SqlTypes.SqlBinary, ByVal comparer As CompareType) As TB_ReportCustomFieldsCollection
            Dim retCollection = New TB_ReportCustomFieldsCollection()
            Dim _TB_ReportCustomFields As TB_ReportCustomFields

            For Each _TB_ReportCustomFields In Me.List
                If Match(comparer, _TB_ReportCustomFields.DataContent, searchValue) Then
                    retCollection.Add(_TB_ReportCustomFields)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_ReportCustomFieldsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReportName(ByVal sortDirection As SortDirection) As TB_ReportCustomFieldsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReportName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByReportFrindlyName(ByVal sortDirection As SortDirection) As TB_ReportCustomFieldsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ReportFrindlyName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFieldName(ByVal sortDirection As SortDirection) As TB_ReportCustomFieldsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FieldName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFieldFriendlyName(ByVal sortDirection As SortDirection) As TB_ReportCustomFieldsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FieldFriendlyName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDataContent(ByVal sortDirection As SortDirection) As TB_ReportCustomFieldsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DataContent"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_SCNIDS))>public MustInherit class TB_SCNIDSCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_SCNIDS))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_SCNIDS
            Get
                return CType(Me.List(index),TB_SCNIDS)
            End Get
            Set(ByVal Value As TB_SCNIDS)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_SCNIDSCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_SCNIDSCollection
            Dim retCollection = New TB_SCNIDSCollection()
            Dim _TB_SCNIDS As TB_SCNIDS

            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS(propertyName), searchValue) Then
                    retCollection.Add(_TB_SCNIDS)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_SCNIDSCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_SCNIDSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_SCNIDS
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_SCNIDS
            Dim _TB_SCNIDS As TB_SCNIDS

            For Each _TB_SCNIDS In Me.List
                if  Match(comparer,_TB_SCNIDS(propertyName) , searchValue) then Return _TB_SCNIDS
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_SCNIDS As TB_SCNIDS) As System.Int32
            Return Me.List.Add(newTB_SCNIDS)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_SCNIDS
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_SCNIDS
            Dim _TB_SCNIDS As TB_SCNIDS
            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.ID, searchValue) Then Return _TB_SCNIDS
            Next

            Return Nothing
        End Function

        Public Function FindBySCNID(ByVal searchValue As System.String) As TB_SCNIDS
            Return FindBySCNID(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySCNID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SCNIDS
            Dim _TB_SCNIDS As TB_SCNIDS
            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.SCNID, searchValue) Then Return _TB_SCNIDS
            Next

            Return Nothing
        End Function

        Public Function FindByName(ByVal searchValue As System.String) As TB_SCNIDS
            Return FindByName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SCNIDS
            Dim _TB_SCNIDS As TB_SCNIDS
            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.Name, searchValue) Then Return _TB_SCNIDS
            Next

            Return Nothing
        End Function

        Public Function FindByTEL(ByVal searchValue As System.String) As TB_SCNIDS
            Return FindByTEL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTEL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SCNIDS
            Dim _TB_SCNIDS As TB_SCNIDS
            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.TEL, searchValue) Then Return _TB_SCNIDS
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_SCNIDSCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_SCNIDSCollection
            Dim retCollection = New TB_SCNIDSCollection()
            Dim _TB_SCNIDS As TB_SCNIDS

            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.ID, searchValue) Then
                    retCollection.Add(_TB_SCNIDS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySCNID(ByVal searchValue As System.String) As TB_SCNIDSCollection
            Return FilterBySCNID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySCNID(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SCNIDSCollection
            Dim retCollection = New TB_SCNIDSCollection()
            Dim _TB_SCNIDS As TB_SCNIDS

            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.SCNID, searchValue) Then
                    retCollection.Add(_TB_SCNIDS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByName(ByVal searchValue As System.String) As TB_SCNIDSCollection
            Return FilterByName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SCNIDSCollection
            Dim retCollection = New TB_SCNIDSCollection()
            Dim _TB_SCNIDS As TB_SCNIDS

            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.Name, searchValue) Then
                    retCollection.Add(_TB_SCNIDS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTEL(ByVal searchValue As System.String) As TB_SCNIDSCollection
            Return FilterByTEL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTEL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SCNIDSCollection
            Dim retCollection = New TB_SCNIDSCollection()
            Dim _TB_SCNIDS As TB_SCNIDS

            For Each _TB_SCNIDS In Me.List
                If Match(comparer, _TB_SCNIDS.TEL, searchValue) Then
                    retCollection.Add(_TB_SCNIDS)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_SCNIDSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySCNID(ByVal sortDirection As SortDirection) As TB_SCNIDSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SCNID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByName(ByVal sortDirection As SortDirection) As TB_SCNIDSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Name"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTEL(ByVal sortDirection As SortDirection) As TB_SCNIDSCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TEL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Seq))>public MustInherit class TB_SeqCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Seq))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Seq
            Get
                return CType(Me.List(index),TB_Seq)
            End Get
            Set(ByVal Value As TB_Seq)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_SeqCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_SeqCollection
            Dim retCollection = New TB_SeqCollection()
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq(propertyName), searchValue) Then
                    retCollection.Add(_TB_Seq)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_SeqCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_SeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Seq
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Seq
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                if  Match(comparer,_TB_Seq(propertyName) , searchValue) then Return _TB_Seq
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Seq As TB_Seq) As System.Int32
            Return Me.List.Add(newTB_Seq)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Seq
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Seq
            Dim _TB_Seq As TB_Seq
            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.ID, searchValue) Then Return _TB_Seq
            Next

            Return Nothing
        End Function

        Public Function FindBySeqType(ByVal searchValue As System.String) As TB_Seq
            Return FindBySeqType(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeqType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Seq
            Dim _TB_Seq As TB_Seq
            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.SeqType, searchValue) Then Return _TB_Seq
            Next

            Return Nothing
        End Function

        Public Function FindByOffice(ByVal searchValue As System.String) As TB_Seq
            Return FindByOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Seq
            Dim _TB_Seq As TB_Seq
            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.Office, searchValue) Then Return _TB_Seq
            Next

            Return Nothing
        End Function

        Public Function FindBySeqYear(ByVal searchValue As System.String) As TB_Seq
            Return FindBySeqYear(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeqYear(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Seq
            Dim _TB_Seq As TB_Seq
            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.SeqYear, searchValue) Then Return _TB_Seq
            Next

            Return Nothing
        End Function

        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_Seq
            Return FindBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_Seq
            Dim _TB_Seq As TB_Seq
            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.Seq, searchValue) Then Return _TB_Seq
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindBySeq(ByVal searchValue As String) As TB_Seq
            Return FindBySeq(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Seq
            Return FindBySeq(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLine(ByVal searchValue As System.String) As TB_Seq
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Seq
            Dim _TB_Seq As TB_Seq
            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.Line, searchValue) Then Return _TB_Seq
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_SeqCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_SeqCollection
            Dim retCollection = New TB_SeqCollection()
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.ID, searchValue) Then
                    retCollection.Add(_TB_Seq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeqType(ByVal searchValue As System.String) As TB_SeqCollection
            Return FilterBySeqType(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeqType(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SeqCollection
            Dim retCollection = New TB_SeqCollection()
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.SeqType, searchValue) Then
                    retCollection.Add(_TB_Seq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByOffice(ByVal searchValue As System.String) As TB_SeqCollection
            Return FilterByOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SeqCollection
            Dim retCollection = New TB_SeqCollection()
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.Office, searchValue) Then
                    retCollection.Add(_TB_Seq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeqYear(ByVal searchValue As System.String) As TB_SeqCollection
            Return FilterBySeqYear(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeqYear(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SeqCollection
            Dim retCollection = New TB_SeqCollection()
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.SeqYear, searchValue) Then
                    retCollection.Add(_TB_Seq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_SeqCollection
            Return FilterBySeq(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySeq(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_SeqCollection
            Dim retCollection = New TB_SeqCollection()
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.Seq, searchValue) Then
                    retCollection.Add(_TB_Seq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterBySeq(ByVal searchValue As String) As TB_SeqCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySeq(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SeqCollection
            Return FilterBySeq(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_SeqCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SeqCollection
            Dim retCollection = New TB_SeqCollection()
            Dim _TB_Seq As TB_Seq

            For Each _TB_Seq In Me.List
                If Match(comparer, _TB_Seq.Line, searchValue) Then
                    retCollection.Add(_TB_Seq)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_SeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeqType(ByVal sortDirection As SortDirection) As TB_SeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SeqType"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOffice(ByVal sortDirection As SortDirection) As TB_SeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Office"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeqYear(ByVal sortDirection As SortDirection) As TB_SeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SeqYear"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySeq(ByVal sortDirection As SortDirection) As TB_SeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Seq"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_SeqCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_SOF))>public MustInherit class TB_SOFCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_SOF))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_SOF
            Get
                return CType(Me.List(index),TB_SOF)
            End Get
            Set(ByVal Value As TB_SOF)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_SOFCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF(propertyName), searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_SOFCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_SOF
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                if  Match(comparer,_TB_SOF(propertyName) , searchValue) then Return _TB_SOF
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_SOF As TB_SOF) As System.Int32
            Return Me.List.Add(newTB_SOF)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_SOF
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ID, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

        Public Function FindByVoyageID(ByVal searchValue As System.Guid) As TB_SOF
            Return FindByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.VoyageID, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

        Public Function FindByPort(ByVal searchValue As System.String) As TB_SOF
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Port, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

        Public Function FindByArrivalAnchorage(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByArrivalAnchorage(searchValue, CompareType.Exact)
        End Function


        Public Function FindByArrivalAnchorage(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ArrivalAnchorage, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByArrivalAnchorage(ByVal searchValue As String) As TB_SOF
            Return FindByArrivalAnchorage(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByArrivalAnchorage(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByArrivalAnchorage(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPilot(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByPilot(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPilot(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Pilot, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByPilot(ByVal searchValue As String) As TB_SOF
            Return FindByPilot(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPilot(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByPilot(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByArrival(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FindByArrival(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Arrival, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByArrival(ByVal searchValue As String) As TB_SOF
            Return FindByArrival(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByArrival(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByBerthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByBerthed(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBerthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Berthed, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByBerthed(ByVal searchValue As String) As TB_SOF
            Return FindByBerthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByBerthed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByBerthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByJetty(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_SOF
            Return FindByJetty(searchValue, CompareType.Exact)
        End Function


        Public Function FindByJetty(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Jetty, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlByte 
        Public Function FindByJetty(ByVal searchValue As String) As TB_SOF
            Return FindByJetty(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByJetty(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByJetty(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFreePraGrnt(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByFreePraGrnt(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFreePraGrnt(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FreePraGrnt, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByFreePraGrnt(ByVal searchValue As String) As TB_SOF
            Return FindByFreePraGrnt(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFreePraGrnt(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByFreePraGrnt(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCustomInspect(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByCustomInspect(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCustomInspect(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.CustomInspect, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByCustomInspect(ByVal searchValue As String) As TB_SOF
            Return FindByCustomInspect(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCustomInspect(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByCustomInspect(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGangOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByGangOnBoard(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGangOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.GangOnBoard, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByGangOnBoard(ByVal searchValue As String) As TB_SOF
            Return FindByGangOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGangOnBoard(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByGangOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDschCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByDschCmnc(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDschCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DschCmnc, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByDschCmnc(ByVal searchValue As String) As TB_SOF
            Return FindByDschCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDschCmnc(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByDschCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDschCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByDschCmpl(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDschCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DschCmpl, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByDschCmpl(ByVal searchValue As String) As TB_SOF
            Return FindByDschCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDschCmpl(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByDschCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLoadCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByLoadCmnc(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLoadCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.LoadCmnc, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByLoadCmnc(ByVal searchValue As String) As TB_SOF
            Return FindByLoadCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByLoadCmnc(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByLoadCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByLoadCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByLoadCmpl(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLoadCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.LoadCmpl, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByLoadCmpl(ByVal searchValue As String) As TB_SOF
            Return FindByLoadCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByLoadCmpl(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByLoadCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDocOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByDocOnBoard(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDocOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DocOnBoard, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByDocOnBoard(ByVal searchValue As String) As TB_SOF
            Return FindByDocOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDocOnBoard(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByDocOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPClear(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByPClear(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPClear(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.PClear, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByPClear(ByVal searchValue As String) As TB_SOF
            Return FindByPClear(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByPClear(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByPClear(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByUnberthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByUnberthed(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUnberthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Unberthed, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByUnberthed(ByVal searchValue As String) As TB_SOF
            Return FindByUnberthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByUnberthed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByUnberthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySailed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindBySailed(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySailed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Sailed, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindBySailed(ByVal searchValue As String) As TB_SOF
            Return FindBySailed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySailed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindBySailed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNextPort(ByVal searchValue As System.String) As TB_SOF
            Return FindByNextPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNextPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.NextPort, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

        Public Function FindByETANextPort(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByETANextPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByETANextPort(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ETANextPort, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByETANextPort(ByVal searchValue As String) As TB_SOF
            Return FindByETANextPort(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByETANextPort(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByETANextPort(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIFOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByIFOArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIFOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.IFOArrival, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByIFOArrival(ByVal searchValue As String) As TB_SOF
            Return FindByIFOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIFOArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByIFOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMDOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByMDOArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMDOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.MDOArrival, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByMDOArrival(ByVal searchValue As String) As TB_SOF
            Return FindByMDOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMDOArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByMDOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFWaterArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByFWaterArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFWaterArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FWaterArrival, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFWaterArrival(ByVal searchValue As String) As TB_SOF
            Return FindByFWaterArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFWaterArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByFWaterArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIFOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByIFOSup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIFOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.IFOSup, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByIFOSup(ByVal searchValue As String) As TB_SOF
            Return FindByIFOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIFOSup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByIFOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMDOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByMDOSup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMDOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.MDOSup, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByMDOSup(ByVal searchValue As String) As TB_SOF
            Return FindByMDOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMDOSup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByMDOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFWaterSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByFWaterSup(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFWaterSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FWaterSup, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFWaterSup(ByVal searchValue As String) As TB_SOF
            Return FindByFWaterSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFWaterSup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByFWaterSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIFODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByIFODep(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIFODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.IFODep, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByIFODep(ByVal searchValue As String) As TB_SOF
            Return FindByIFODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIFODep(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByIFODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByMDODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByMDODep(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMDODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.MDODep, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByMDODep(ByVal searchValue As String) As TB_SOF
            Return FindByMDODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByMDODep(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByMDODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByFWaterDep(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByFWaterDep(searchValue, CompareType.Exact)
        End Function


        Public Function FindByFWaterDep(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FWaterDep, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByFWaterDep(ByVal searchValue As String) As TB_SOF
            Return FindByFWaterDep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByFWaterDep(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByFWaterDep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDrftArvlFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByDrftArvlFor(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDrftArvlFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftArvlFor, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByDrftArvlFor(ByVal searchValue As String) As TB_SOF
            Return FindByDrftArvlFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDrftArvlFor(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByDrftArvlFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDrftArvlAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByDrftArvlAft(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDrftArvlAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftArvlAft, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByDrftArvlAft(ByVal searchValue As String) As TB_SOF
            Return FindByDrftArvlAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDrftArvlAft(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByDrftArvlAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDrftDepFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByDrftDepFor(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDrftDepFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftDepFor, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByDrftDepFor(ByVal searchValue As String) As TB_SOF
            Return FindByDrftDepFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDrftDepFor(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByDrftDepFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDrftDepAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOF
            Return FindByDrftDepAft(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDrftDepAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftDepAft, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByDrftDepAft(ByVal searchValue As String) As TB_SOF
            Return FindByDrftDepAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDrftDepAft(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByDrftDepAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDjwazNo(ByVal searchValue As System.String) As TB_SOF
            Return FindByDjwazNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDjwazNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DjwazNo, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

        Public Function FindByETA(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOF
            Return FindByETA(searchValue, CompareType.Exact)
        End Function


        Public Function FindByETA(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOF
            Dim _TB_SOF As TB_SOF
            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ETA, searchValue) Then Return _TB_SOF
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByETA(ByVal searchValue As String) As TB_SOF
            Return FindByETA(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByETA(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOF
            Return FindByETA(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_SOFCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ID, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVoyageID(ByVal searchValue As System.Guid) As TB_SOFCollection
            Return FilterByVoyageID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVoyageID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.VoyageID, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_SOFCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Port, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByArrivalAnchorage(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByArrivalAnchorage(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByArrivalAnchorage(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ArrivalAnchorage, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByArrivalAnchorage(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByArrivalAnchorage(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByArrivalAnchorage(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByArrivalAnchorage(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPilot(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByPilot(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPilot(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Pilot, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByPilot(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByPilot(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPilot(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByPilot(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByArrival(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByArrival(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Arrival, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByArrival(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByArrival(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByArrival(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByBerthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByBerthed(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBerthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Berthed, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByBerthed(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByBerthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByBerthed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByBerthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByJetty(ByVal searchValue As System.Data.SqlTypes.SqlByte) As TB_SOFCollection
            Return FilterByJetty(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByJetty(ByVal searchValue As System.Data.SqlTypes.SqlByte, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Jetty, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlByte
        Public Function FilterByJetty(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByJetty(System.Data.SqlTypes.SqlByte.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByJetty(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByJetty(System.Data.SqlTypes.SqlByte.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFreePraGrnt(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByFreePraGrnt(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFreePraGrnt(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FreePraGrnt, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByFreePraGrnt(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByFreePraGrnt(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFreePraGrnt(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByFreePraGrnt(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCustomInspect(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByCustomInspect(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCustomInspect(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.CustomInspect, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByCustomInspect(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByCustomInspect(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCustomInspect(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByCustomInspect(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGangOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByGangOnBoard(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGangOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.GangOnBoard, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByGangOnBoard(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByGangOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGangOnBoard(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByGangOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDschCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByDschCmnc(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDschCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DschCmnc, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByDschCmnc(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByDschCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDschCmnc(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByDschCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDschCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByDschCmpl(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDschCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DschCmpl, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByDschCmpl(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByDschCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDschCmpl(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByDschCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLoadCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByLoadCmnc(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLoadCmnc(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.LoadCmnc, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByLoadCmnc(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByLoadCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByLoadCmnc(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByLoadCmnc(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByLoadCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByLoadCmpl(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLoadCmpl(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.LoadCmpl, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByLoadCmpl(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByLoadCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByLoadCmpl(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByLoadCmpl(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDocOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByDocOnBoard(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDocOnBoard(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DocOnBoard, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByDocOnBoard(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByDocOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDocOnBoard(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByDocOnBoard(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPClear(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByPClear(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPClear(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.PClear, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByPClear(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByPClear(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByPClear(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByPClear(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByUnberthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByUnberthed(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUnberthed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Unberthed, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByUnberthed(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByUnberthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByUnberthed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByUnberthed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySailed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterBySailed(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySailed(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.Sailed, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterBySailed(ByVal searchValue As String) As TB_SOFCollection
            Return FilterBySailed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySailed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterBySailed(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNextPort(ByVal searchValue As System.String) As TB_SOFCollection
            Return FilterByNextPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNextPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.NextPort, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByETANextPort(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByETANextPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByETANextPort(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ETANextPort, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByETANextPort(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByETANextPort(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByETANextPort(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByETANextPort(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIFOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByIFOArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIFOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.IFOArrival, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByIFOArrival(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByIFOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIFOArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByIFOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMDOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByMDOArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMDOArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.MDOArrival, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByMDOArrival(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByMDOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMDOArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByMDOArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFWaterArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByFWaterArrival(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFWaterArrival(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FWaterArrival, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFWaterArrival(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByFWaterArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFWaterArrival(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByFWaterArrival(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIFOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByIFOSup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIFOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.IFOSup, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByIFOSup(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByIFOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIFOSup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByIFOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMDOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByMDOSup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMDOSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.MDOSup, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByMDOSup(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByMDOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMDOSup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByMDOSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFWaterSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByFWaterSup(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFWaterSup(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FWaterSup, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFWaterSup(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByFWaterSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFWaterSup(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByFWaterSup(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIFODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByIFODep(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIFODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.IFODep, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByIFODep(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByIFODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIFODep(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByIFODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByMDODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByMDODep(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMDODep(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.MDODep, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByMDODep(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByMDODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByMDODep(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByMDODep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByFWaterDep(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByFWaterDep(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByFWaterDep(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.FWaterDep, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByFWaterDep(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByFWaterDep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByFWaterDep(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByFWaterDep(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDrftArvlFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByDrftArvlFor(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDrftArvlFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftArvlFor, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByDrftArvlFor(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByDrftArvlFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDrftArvlFor(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByDrftArvlFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDrftArvlAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByDrftArvlAft(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDrftArvlAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftArvlAft, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByDrftArvlAft(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByDrftArvlAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDrftArvlAft(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByDrftArvlAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDrftDepFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByDrftDepFor(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDrftDepFor(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftDepFor, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByDrftDepFor(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByDrftDepFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDrftDepFor(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByDrftDepFor(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDrftDepAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_SOFCollection
            Return FilterByDrftDepAft(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDrftDepAft(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DrftDepAft, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByDrftDepAft(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByDrftDepAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDrftDepAft(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByDrftDepAft(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDjwazNo(ByVal searchValue As System.String) As TB_SOFCollection
            Return FilterByDjwazNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDjwazNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.DjwazNo, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByETA(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_SOFCollection
            Return FilterByETA(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByETA(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_SOFCollection
            Dim retCollection = New TB_SOFCollection()
            Dim _TB_SOF As TB_SOF

            For Each _TB_SOF In Me.List
                If Match(comparer, _TB_SOF.ETA, searchValue) Then
                    retCollection.Add(_TB_SOF)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByETA(ByVal searchValue As String) As TB_SOFCollection
            Return FilterByETA(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByETA(ByVal searchValue As String, ByVal comparer As CompareType) As TB_SOFCollection
            Return FilterByETA(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVoyageID(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VoyageID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByArrivalAnchorage(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ArrivalAnchorage"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPilot(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Pilot"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByArrival(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Arrival"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBerthed(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Berthed"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByJetty(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Jetty"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFreePraGrnt(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FreePraGrnt"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCustomInspect(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CustomInspect"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGangOnBoard(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GangOnBoard"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDschCmnc(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DschCmnc"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDschCmpl(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DschCmpl"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLoadCmnc(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LoadCmnc"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLoadCmpl(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("LoadCmpl"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDocOnBoard(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DocOnBoard"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPClear(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("PClear"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUnberthed(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Unberthed"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySailed(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Sailed"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNextPort(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NextPort"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByETANextPort(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ETANextPort"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIFOArrival(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IFOArrival"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMDOArrival(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MDOArrival"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFWaterArrival(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FWaterArrival"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIFOSup(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IFOSup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMDOSup(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MDOSup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFWaterSup(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FWaterSup"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIFODep(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IFODep"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMDODep(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("MDODep"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByFWaterDep(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("FWaterDep"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDrftArvlFor(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DrftArvlFor"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDrftArvlAft(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DrftArvlAft"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDrftDepFor(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DrftDepFor"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDrftDepAft(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DrftDepAft"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDjwazNo(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DjwazNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByETA(ByVal sortDirection As SortDirection) As TB_SOFCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ETA"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_TaxBase))>public MustInherit class TB_TaxBaseCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_TaxBase))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_TaxBase
            Get
                return CType(Me.List(index),TB_TaxBase)
            End Get
            Set(ByVal Value As TB_TaxBase)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_TaxBaseCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase(propertyName), searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_TaxBaseCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_TaxBase
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                if  Match(comparer,_TB_TaxBase(propertyName) , searchValue) then Return _TB_TaxBase
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_TaxBase As TB_TaxBase) As System.Int32
            Return Me.List.Add(newTB_TaxBase)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_TaxBase
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase
            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.ID, searchValue) Then Return _TB_TaxBase
            Next

            Return Nothing
        End Function

        Public Function FindByChargesCode(ByVal searchValue As System.String) As TB_TaxBase
            Return FindByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase
            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.ChargesCode, searchValue) Then Return _TB_TaxBase
            Next

            Return Nothing
        End Function

        Public Function FindByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_TaxBase
            Return FindByApplyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase
            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.ApplyDate, searchValue) Then Return _TB_TaxBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByApplyDate(ByVal searchValue As String) As TB_TaxBase
            Return FindByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByApplyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBase
            Return FindByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByvalidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_TaxBase
            Return FindByvalidity(searchValue, CompareType.Exact)
        End Function


        Public Function FindByvalidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase
            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.validity, searchValue) Then Return _TB_TaxBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByvalidity(ByVal searchValue As String) As TB_TaxBase
            Return FindByvalidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByvalidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBase
            Return FindByvalidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByPort(ByVal searchValue As System.String) As TB_TaxBase
            Return FindByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase
            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.Port, searchValue) Then Return _TB_TaxBase
            Next

            Return Nothing
        End Function

        Public Function FindByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_TaxBase
            Return FindByTax(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase
            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.Tax, searchValue) Then Return _TB_TaxBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTax(ByVal searchValue As String) As TB_TaxBase
            Return FindByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBase
            Return FindByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByTOLL(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_TaxBase
            Return FindByTOLL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTOLL(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_TaxBase
            Dim _TB_TaxBase As TB_TaxBase
            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.TOLL, searchValue) Then Return _TB_TaxBase
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDecimal 
        Public Function FindByTOLL(ByVal searchValue As String) As TB_TaxBase
            Return FindByTOLL(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByTOLL(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBase
            Return FindByTOLL(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_TaxBaseCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.ID, searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByChargesCode(ByVal searchValue As System.String) As TB_TaxBaseCollection
            Return FilterByChargesCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByChargesCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.ChargesCode, searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_TaxBaseCollection
            Return FilterByApplyDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByApplyDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.ApplyDate, searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByApplyDate(ByVal searchValue As String) As TB_TaxBaseCollection
            Return FilterByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByApplyDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Return FilterByApplyDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByvalidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_TaxBaseCollection
            Return FilterByvalidity(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByvalidity(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.validity, searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByvalidity(ByVal searchValue As String) As TB_TaxBaseCollection
            Return FilterByvalidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByvalidity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Return FilterByvalidity(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByPort(ByVal searchValue As System.String) As TB_TaxBaseCollection
            Return FilterByPort(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPort(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.Port, searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_TaxBaseCollection
            Return FilterByTax(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTax(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.Tax, searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTax(ByVal searchValue As String) As TB_TaxBaseCollection
            Return FilterByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTax(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Return FilterByTax(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function

        Public Function FilterByTOLL(ByVal searchValue As System.Data.SqlTypes.SqlDecimal) As TB_TaxBaseCollection
            Return FilterByTOLL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTOLL(ByVal searchValue As System.Data.SqlTypes.SqlDecimal, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Dim retCollection = New TB_TaxBaseCollection()
            Dim _TB_TaxBase As TB_TaxBase

            For Each _TB_TaxBase In Me.List
                If Match(comparer, _TB_TaxBase.TOLL, searchValue) Then
                    retCollection.Add(_TB_TaxBase)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDecimal
        Public Function FilterByTOLL(ByVal searchValue As String) As TB_TaxBaseCollection
            Return FilterByTOLL(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByTOLL(ByVal searchValue As String, ByVal comparer As CompareType) As TB_TaxBaseCollection
            Return FilterByTOLL(System.Data.SqlTypes.SqlDecimal.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByChargesCode(ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ChargesCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByApplyDate(ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ApplyDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByvalidity(ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("validity"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPort(ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Port"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTax(ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Tax"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTOLL(ByVal sortDirection As SortDirection) As TB_TaxBaseCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TOLL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Users))>public MustInherit class TB_UsersCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Users))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Users
            Get
                return CType(Me.List(index),TB_Users)
            End Get
            Set(ByVal Value As TB_Users)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_UsersCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users(propertyName), searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_UsersCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Users
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                if  Match(comparer,_TB_Users(propertyName) , searchValue) then Return _TB_Users
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Users As TB_Users) As System.Int32
            Return Me.List.Add(newTB_Users)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Users
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.ID, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByUserFirstName(ByVal searchValue As System.String) As TB_Users
            Return FindByUserFirstName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUserFirstName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserFirstName, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByUserLastName(ByVal searchValue As System.String) As TB_Users
            Return FindByUserLastName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUserLastName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserLastName, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByUserAccount(ByVal searchValue As System.String) As TB_Users
            Return FindByUserAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUserAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserAccount, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByUserCode(ByVal searchValue As System.String) As TB_Users
            Return FindByUserCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUserCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserCode, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByPassword(ByVal searchValue As System.String) As TB_Users
            Return FindByPassword(searchValue, CompareType.Exact)
        End Function


        Public Function FindByPassword(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.Password, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByEmailOffice(ByVal searchValue As System.String) As TB_Users
            Return FindByEmailOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEmailOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.EmailOffice, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByEmailHome(ByVal searchValue As System.String) As TB_Users
            Return FindByEmailHome(searchValue, CompareType.Exact)
        End Function


        Public Function FindByEmailHome(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.EmailHome, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByTEL(ByVal searchValue As System.String) As TB_Users
            Return FindByTEL(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTEL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.TEL, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

        Public Function FindByIsSalesAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Users
            Return FindByIsSalesAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsSalesAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsSalesAdmin, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsSalesAdmin(ByVal searchValue As String) As TB_Users
            Return FindByIsSalesAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsSalesAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Users
            Return FindByIsSalesAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIsAccountAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Users
            Return FindByIsAccountAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsAccountAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsAccountAdmin, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsAccountAdmin(ByVal searchValue As String) As TB_Users
            Return FindByIsAccountAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsAccountAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Users
            Return FindByIsAccountAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIsDocAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Users
            Return FindByIsDocAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsDocAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsDocAdmin, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsDocAdmin(ByVal searchValue As String) As TB_Users
            Return FindByIsDocAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsDocAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Users
            Return FindByIsDocAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByIsEcsAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Users
            Return FindByIsEcsAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FindByIsEcsAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsEcsAdmin, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByIsEcsAdmin(ByVal searchValue As String) As TB_Users
            Return FindByIsEcsAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByIsEcsAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Users
            Return FindByIsEcsAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByBookingViewer(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_Users
            Return FindByBookingViewer(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBookingViewer(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_Users
            Dim _TB_Users As TB_Users
            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.BookingViewer, searchValue) Then Return _TB_Users
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlBoolean 
        Public Function FindByBookingViewer(ByVal searchValue As String) As TB_Users
            Return FindByBookingViewer(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByBookingViewer(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Users
            Return FindByBookingViewer(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function
        
        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_UsersCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.ID, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUserFirstName(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByUserFirstName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUserFirstName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserFirstName, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUserLastName(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByUserLastName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUserLastName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserLastName, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUserAccount(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByUserAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUserAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserAccount, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUserCode(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByUserCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUserCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.UserCode, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByPassword(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByPassword(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByPassword(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.Password, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEmailOffice(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByEmailOffice(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEmailOffice(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.EmailOffice, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByEmailHome(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByEmailHome(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByEmailHome(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.EmailHome, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTEL(ByVal searchValue As System.String) As TB_UsersCollection
            Return FilterByTEL(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTEL(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.TEL, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByIsSalesAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_UsersCollection
            Return FilterByIsSalesAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsSalesAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsSalesAdmin, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsSalesAdmin(ByVal searchValue As String) As TB_UsersCollection
            Return FilterByIsSalesAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsSalesAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_UsersCollection
            Return FilterByIsSalesAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIsAccountAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_UsersCollection
            Return FilterByIsAccountAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsAccountAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsAccountAdmin, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsAccountAdmin(ByVal searchValue As String) As TB_UsersCollection
            Return FilterByIsAccountAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsAccountAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_UsersCollection
            Return FilterByIsAccountAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIsDocAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_UsersCollection
            Return FilterByIsDocAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsDocAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsDocAdmin, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsDocAdmin(ByVal searchValue As String) As TB_UsersCollection
            Return FilterByIsDocAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsDocAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_UsersCollection
            Return FilterByIsDocAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByIsEcsAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_UsersCollection
            Return FilterByIsEcsAdmin(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByIsEcsAdmin(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.IsEcsAdmin, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByIsEcsAdmin(ByVal searchValue As String) As TB_UsersCollection
            Return FilterByIsEcsAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByIsEcsAdmin(ByVal searchValue As String, ByVal comparer As CompareType) As TB_UsersCollection
            Return FilterByIsEcsAdmin(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function

        Public Function FilterByBookingViewer(ByVal searchValue As System.Data.SqlTypes.SqlBoolean) As TB_UsersCollection
            Return FilterByBookingViewer(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBookingViewer(ByVal searchValue As System.Data.SqlTypes.SqlBoolean, ByVal comparer As CompareType) As TB_UsersCollection
            Dim retCollection = New TB_UsersCollection()
            Dim _TB_Users As TB_Users

            For Each _TB_Users In Me.List
                If Match(comparer, _TB_Users.BookingViewer, searchValue) Then
                    retCollection.Add(_TB_Users)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlBoolean
        Public Function FilterByBookingViewer(ByVal searchValue As String) As TB_UsersCollection
            Return FilterByBookingViewer(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByBookingViewer(ByVal searchValue As String, ByVal comparer As CompareType) As TB_UsersCollection
            Return FilterByBookingViewer(System.Data.SqlTypes.SqlBoolean.Parse(searchValue), comparer)
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUserFirstName(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UserFirstName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUserLastName(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UserLastName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUserAccount(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UserAccount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUserCode(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UserCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByPassword(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Password"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEmailOffice(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EmailOffice"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByEmailHome(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("EmailHome"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTEL(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TEL"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsSalesAdmin(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsSalesAdmin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsAccountAdmin(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsAccountAdmin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsDocAdmin(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsDocAdmin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByIsEcsAdmin(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("IsEcsAdmin"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBookingViewer(ByVal sortDirection As SortDirection) As TB_UsersCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BookingViewer"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_UsersDept))>public MustInherit class TB_UsersDeptCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_UsersDept))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_UsersDept
            Get
                return CType(Me.List(index),TB_UsersDept)
            End Get
            Set(ByVal Value As TB_UsersDept)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_UsersDeptCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_UsersDeptCollection
            Dim retCollection = New TB_UsersDeptCollection()
            Dim _TB_UsersDept As TB_UsersDept

            For Each _TB_UsersDept In Me.List
                If Match(comparer, _TB_UsersDept(propertyName), searchValue) Then
                    retCollection.Add(_TB_UsersDept)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_UsersDeptCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_UsersDeptCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_UsersDept
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_UsersDept
            Dim _TB_UsersDept As TB_UsersDept

            For Each _TB_UsersDept In Me.List
                if  Match(comparer,_TB_UsersDept(propertyName) , searchValue) then Return _TB_UsersDept
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_UsersDept As TB_UsersDept) As System.Int32
            Return Me.List.Add(newTB_UsersDept)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_UsersDept
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersDept
            Dim _TB_UsersDept As TB_UsersDept
            For Each _TB_UsersDept In Me.List
                If Match(comparer, _TB_UsersDept.ID, searchValue) Then Return _TB_UsersDept
            Next

            Return Nothing
        End Function

        Public Function FindByUserID(ByVal searchValue As System.Guid) As TB_UsersDept
            Return FindByUserID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUserID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersDept
            Dim _TB_UsersDept As TB_UsersDept
            For Each _TB_UsersDept In Me.List
                If Match(comparer, _TB_UsersDept.UserID, searchValue) Then Return _TB_UsersDept
            Next

            Return Nothing
        End Function

        Public Function FindByDepartment(ByVal searchValue As System.String) As TB_UsersDept
            Return FindByDepartment(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDepartment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersDept
            Dim _TB_UsersDept As TB_UsersDept
            For Each _TB_UsersDept In Me.List
                If Match(comparer, _TB_UsersDept.Department, searchValue) Then Return _TB_UsersDept
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_UsersDeptCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersDeptCollection
            Dim retCollection = New TB_UsersDeptCollection()
            Dim _TB_UsersDept As TB_UsersDept

            For Each _TB_UsersDept In Me.List
                If Match(comparer, _TB_UsersDept.ID, searchValue) Then
                    retCollection.Add(_TB_UsersDept)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUserID(ByVal searchValue As System.Guid) As TB_UsersDeptCollection
            Return FilterByUserID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUserID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersDeptCollection
            Dim retCollection = New TB_UsersDeptCollection()
            Dim _TB_UsersDept As TB_UsersDept

            For Each _TB_UsersDept In Me.List
                If Match(comparer, _TB_UsersDept.UserID, searchValue) Then
                    retCollection.Add(_TB_UsersDept)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDepartment(ByVal searchValue As System.String) As TB_UsersDeptCollection
            Return FilterByDepartment(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDepartment(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersDeptCollection
            Dim retCollection = New TB_UsersDeptCollection()
            Dim _TB_UsersDept As TB_UsersDept

            For Each _TB_UsersDept In Me.List
                If Match(comparer, _TB_UsersDept.Department, searchValue) Then
                    retCollection.Add(_TB_UsersDept)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_UsersDeptCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUserID(ByVal sortDirection As SortDirection) As TB_UsersDeptCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UserID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDepartment(ByVal sortDirection As SortDirection) As TB_UsersDeptCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Department"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_UsersLine))>public MustInherit class TB_UsersLineCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_UsersLine))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_UsersLine
            Get
                return CType(Me.List(index),TB_UsersLine)
            End Get
            Set(ByVal Value As TB_UsersLine)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_UsersLineCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_UsersLineCollection
            Dim retCollection = New TB_UsersLineCollection()
            Dim _TB_UsersLine As TB_UsersLine

            For Each _TB_UsersLine In Me.List
                If Match(comparer, _TB_UsersLine(propertyName), searchValue) Then
                    retCollection.Add(_TB_UsersLine)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_UsersLineCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_UsersLineCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_UsersLine
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_UsersLine
            Dim _TB_UsersLine As TB_UsersLine

            For Each _TB_UsersLine In Me.List
                if  Match(comparer,_TB_UsersLine(propertyName) , searchValue) then Return _TB_UsersLine
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_UsersLine As TB_UsersLine) As System.Int32
            Return Me.List.Add(newTB_UsersLine)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_UsersLine
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersLine
            Dim _TB_UsersLine As TB_UsersLine
            For Each _TB_UsersLine In Me.List
                If Match(comparer, _TB_UsersLine.ID, searchValue) Then Return _TB_UsersLine
            Next

            Return Nothing
        End Function

        Public Function FindByUserID(ByVal searchValue As System.Guid) As TB_UsersLine
            Return FindByUserID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByUserID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersLine
            Dim _TB_UsersLine As TB_UsersLine
            For Each _TB_UsersLine In Me.List
                If Match(comparer, _TB_UsersLine.UserID, searchValue) Then Return _TB_UsersLine
            Next

            Return Nothing
        End Function

        Public Function FindByLine(ByVal searchValue As System.String) As TB_UsersLine
            Return FindByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FindByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersLine
            Dim _TB_UsersLine As TB_UsersLine
            For Each _TB_UsersLine In Me.List
                If Match(comparer, _TB_UsersLine.Line, searchValue) Then Return _TB_UsersLine
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_UsersLineCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersLineCollection
            Dim retCollection = New TB_UsersLineCollection()
            Dim _TB_UsersLine As TB_UsersLine

            For Each _TB_UsersLine In Me.List
                If Match(comparer, _TB_UsersLine.ID, searchValue) Then
                    retCollection.Add(_TB_UsersLine)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByUserID(ByVal searchValue As System.Guid) As TB_UsersLineCollection
            Return FilterByUserID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByUserID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_UsersLineCollection
            Dim retCollection = New TB_UsersLineCollection()
            Dim _TB_UsersLine As TB_UsersLine

            For Each _TB_UsersLine In Me.List
                If Match(comparer, _TB_UsersLine.UserID, searchValue) Then
                    retCollection.Add(_TB_UsersLine)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByLine(ByVal searchValue As System.String) As TB_UsersLineCollection
            Return FilterByLine(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByLine(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_UsersLineCollection
            Dim retCollection = New TB_UsersLineCollection()
            Dim _TB_UsersLine As TB_UsersLine

            For Each _TB_UsersLine In Me.List
                If Match(comparer, _TB_UsersLine.Line, searchValue) Then
                    retCollection.Add(_TB_UsersLine)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_UsersLineCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByUserID(ByVal sortDirection As SortDirection) As TB_UsersLineCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("UserID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByLine(ByVal sortDirection As SortDirection) As TB_UsersLineCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Line"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Vessels))>public MustInherit class TB_VesselsCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Vessels))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Vessels
            Get
                return CType(Me.List(index),TB_Vessels)
            End Get
            Set(ByVal Value As TB_Vessels)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_VesselsCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels(propertyName), searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_VesselsCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Vessels
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                if  Match(comparer,_TB_Vessels(propertyName) , searchValue) then Return _TB_Vessels
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Vessels As TB_Vessels) As System.Int32
            Return Me.List.Add(newTB_Vessels)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Vessels
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.ID, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

        Public Function FindByVesselCode(ByVal searchValue As System.String) As TB_Vessels
            Return FindByVesselCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVesselCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.VesselCode, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

        Public Function FindByVesselName(ByVal searchValue As System.String) As TB_Vessels
            Return FindByVesselName(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVesselName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.VesselName, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

        Public Function FindByDeadWeight(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Vessels
            Return FindByDeadWeight(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDeadWeight(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.DeadWeight, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByDeadWeight(ByVal searchValue As String) As TB_Vessels
            Return FindByDeadWeight(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByDeadWeight(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Vessels
            Return FindByDeadWeight(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByCapacity(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_Vessels
            Return FindByCapacity(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCapacity(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.Capacity, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlInt64 
        Public Function FindByCapacity(ByVal searchValue As String) As TB_Vessels
            Return FindByCapacity(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByCapacity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Vessels
            Return FindByCapacity(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Vessels
            Return FindByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.GW, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByGW(ByVal searchValue As String) As TB_Vessels
            Return FindByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Vessels
            Return FindByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Vessels
            Return FindByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.NET, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByNET(ByVal searchValue As String) As TB_Vessels
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Vessels
            Return FindByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindBySpeed(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Vessels
            Return FindBySpeed(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySpeed(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.Speed, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindBySpeed(ByVal searchValue As String) As TB_Vessels
            Return FindBySpeed(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindBySpeed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Vessels
            Return FindBySpeed(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByOfficalNo(ByVal searchValue As System.String) As TB_Vessels
            Return FindByOfficalNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByOfficalNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.OfficalNo, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

        Public Function FindByCallLetter(ByVal searchValue As System.String) As TB_Vessels
            Return FindByCallLetter(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCallLetter(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.CallLetter, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

        Public Function FindByBuiltDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Vessels
            Return FindByBuiltDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByBuiltDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.BuiltDate, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByBuiltDate(ByVal searchValue As String) As TB_Vessels
            Return FindByBuiltDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByBuiltDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Vessels
            Return FindByBuiltDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByNationality(ByVal searchValue As System.String) As TB_Vessels
            Return FindByNationality(searchValue, CompareType.Exact)
        End Function


        Public Function FindByNationality(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.Nationality, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

        Public Function FindByVesselAccount(ByVal searchValue As System.String) As TB_Vessels
            Return FindByVesselAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVesselAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Vessels
            Dim _TB_Vessels As TB_Vessels
            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.VesselAccount, searchValue) Then Return _TB_Vessels
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_VesselsCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.ID, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVesselCode(ByVal searchValue As System.String) As TB_VesselsCollection
            Return FilterByVesselCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVesselCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.VesselCode, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVesselName(ByVal searchValue As System.String) As TB_VesselsCollection
            Return FilterByVesselName(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVesselName(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.VesselName, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByDeadWeight(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_VesselsCollection
            Return FilterByDeadWeight(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDeadWeight(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.DeadWeight, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByDeadWeight(ByVal searchValue As String) As TB_VesselsCollection
            Return FilterByDeadWeight(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByDeadWeight(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VesselsCollection
            Return FilterByDeadWeight(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByCapacity(ByVal searchValue As System.Data.SqlTypes.SqlInt64) As TB_VesselsCollection
            Return FilterByCapacity(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCapacity(ByVal searchValue As System.Data.SqlTypes.SqlInt64, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.Capacity, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlInt64
        Public Function FilterByCapacity(ByVal searchValue As String) As TB_VesselsCollection
            Return FilterByCapacity(System.Data.SqlTypes.SqlInt64.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByCapacity(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VesselsCollection
            Return FilterByCapacity(System.Data.SqlTypes.SqlInt64.Parse(searchValue), comparer)
        End Function

        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_VesselsCollection
            Return FilterByGW(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByGW(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.GW, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByGW(ByVal searchValue As String) As TB_VesselsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByGW(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VesselsCollection
            Return FilterByGW(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_VesselsCollection
            Return FilterByNET(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNET(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.NET, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByNET(ByVal searchValue As String) As TB_VesselsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByNET(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VesselsCollection
            Return FilterByNET(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterBySpeed(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_VesselsCollection
            Return FilterBySpeed(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySpeed(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.Speed, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterBySpeed(ByVal searchValue As String) As TB_VesselsCollection
            Return FilterBySpeed(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterBySpeed(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VesselsCollection
            Return FilterBySpeed(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByOfficalNo(ByVal searchValue As System.String) As TB_VesselsCollection
            Return FilterByOfficalNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByOfficalNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.OfficalNo, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCallLetter(ByVal searchValue As System.String) As TB_VesselsCollection
            Return FilterByCallLetter(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCallLetter(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.CallLetter, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByBuiltDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_VesselsCollection
            Return FilterByBuiltDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByBuiltDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.BuiltDate, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByBuiltDate(ByVal searchValue As String) As TB_VesselsCollection
            Return FilterByBuiltDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByBuiltDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VesselsCollection
            Return FilterByBuiltDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByNationality(ByVal searchValue As System.String) As TB_VesselsCollection
            Return FilterByNationality(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByNationality(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.Nationality, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVesselAccount(ByVal searchValue As System.String) As TB_VesselsCollection
            Return FilterByVesselAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVesselAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VesselsCollection
            Dim retCollection = New TB_VesselsCollection()
            Dim _TB_Vessels As TB_Vessels

            For Each _TB_Vessels In Me.List
                If Match(comparer, _TB_Vessels.VesselAccount, searchValue) Then
                    retCollection.Add(_TB_Vessels)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVesselCode(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VesselCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVesselName(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VesselName"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDeadWeight(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DeadWeight"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCapacity(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Capacity"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByGW(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("GW"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNET(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("NET"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySpeed(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Speed"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByOfficalNo(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("OfficalNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCallLetter(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("CallLetter"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByBuiltDate(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("BuiltDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByNationality(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Nationality"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVesselAccount(ByVal sortDirection As SortDirection) As TB_VesselsCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VesselAccount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class


		<OrmLib.TypedCollectionAttribute(GetType(TB_Voyage))>public MustInherit class TB_VoyageCollectionOrmTemplate : Inherits CollectionTemplate


        Public Sub New()
            MyBase.New(GetType(TB_Voyage))
        End Sub

        Default Public Property MyProperty(ByVal Index As Integer) As TB_Voyage
            Get
                return CType(Me.List(index),TB_Voyage)
            End Get
            Set(ByVal Value As TB_Voyage)
                Throw New NotSupportedException("Please use the Add() method.")
            End Set
        End Property




        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_VoyageCollection
            Return FilterBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FilterBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage(propertyName), searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            Return retCollection
        End Function


        Public Function SortBy(ByVal propertyName As String) As TB_VoyageCollection
            Return SortBy(propertyName, SortDirection.Ascending)
        End Function


        Public Function SortBy(ByVal propertyName As String, ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer(propertyName))
			if sortDirection = SortDirection.Descending then Me.InnerList.Reverse()
            Return Me
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object) As TB_Voyage
				return FindBy(propertyName, searchValue, CompareType.Exact)
        End Function


        Public Function FindBy(ByVal propertyName As String, ByVal searchValue As Object, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                if  Match(comparer,_TB_Voyage(propertyName) , searchValue) then Return _TB_Voyage
            Next

            Return Nothing
        End Function


        Public Overloads Function Add(ByVal newTB_Voyage As TB_Voyage) As System.Int32
            Return Me.List.Add(newTB_Voyage)
        End Function
			
		

        Public Function FindByID(ByVal searchValue As System.Guid) As TB_Voyage
            Return FindByID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.ID, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByVesselID(ByVal searchValue As System.Guid) As TB_Voyage
            Return FindByVesselID(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVesselID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.VesselID, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByVoyageNo(ByVal searchValue As System.String) As TB_Voyage
            Return FindByVoyageNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVoyageNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.VoyageNo, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByCarrier(ByVal searchValue As System.String) As TB_Voyage
            Return FindByCarrier(searchValue, CompareType.Exact)
        End Function


        Public Function FindByCarrier(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.Carrier, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByService(ByVal searchValue As System.String) As TB_Voyage
            Return FindByService(searchValue, CompareType.Exact)
        End Function


        Public Function FindByService(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.Service, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByStartDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_Voyage
            Return FindByStartDate(searchValue, CompareType.Exact)
        End Function


        Public Function FindByStartDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.StartDate, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDateTime 
        Public Function FindByStartDate(ByVal searchValue As String) As TB_Voyage
            Return FindByStartDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByStartDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Voyage
            Return FindByStartDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Voyage
            Return FindByExchangeFrt(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.ExchangeFrt, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByExchangeFrt(ByVal searchValue As String) As TB_Voyage
            Return FindByExchangeFrt(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByExchangeFrt(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Voyage
            Return FindByExchangeFrt(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByExchangeThc(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_Voyage
            Return FindByExchangeThc(searchValue, CompareType.Exact)
        End Function


        Public Function FindByExchangeThc(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.ExchangeThc, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

		' System.Data.SqlTypes.SqlDouble 
        Public Function FindByExchangeThc(ByVal searchValue As String) As TB_Voyage
            Return FindByExchangeThc(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function


        Public Function FindByExchangeThc(ByVal searchValue As String, ByVal comparer As CompareType) As TB_Voyage
            Return FindByExchangeThc(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function
        
        Public Function FindByDjwazNo(ByVal searchValue As System.String) As TB_Voyage
            Return FindByDjwazNo(searchValue, CompareType.Exact)
        End Function


        Public Function FindByDjwazNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.DjwazNo, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByMaster(ByVal searchValue As System.String) As TB_Voyage
            Return FindByMaster(searchValue, CompareType.Exact)
        End Function


        Public Function FindByMaster(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.Master, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindBySLOT(ByVal searchValue As System.String) As TB_Voyage
            Return FindBySLOT(searchValue, CompareType.Exact)
        End Function


        Public Function FindBySLOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.SLOT, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByVoyageAccount(ByVal searchValue As System.String) As TB_Voyage
            Return FindByVoyageAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FindByVoyageAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.VoyageAccount, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FindByTFCCode(ByVal searchValue As System.String) As TB_Voyage
            Return FindByTFCCode(searchValue, CompareType.Exact)
        End Function


        Public Function FindByTFCCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_Voyage
            Dim _TB_Voyage As TB_Voyage
            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.TFCCode, searchValue) Then Return _TB_Voyage
            Next

            Return Nothing
        End Function

        Public Function FilterByID(ByVal searchValue As System.Guid) As TB_VoyageCollection
            Return FilterByID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.ID, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVesselID(ByVal searchValue As System.Guid) As TB_VoyageCollection
            Return FilterByVesselID(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVesselID(ByVal searchValue As System.Guid, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.VesselID, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVoyageNo(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterByVoyageNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVoyageNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.VoyageNo, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByCarrier(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterByCarrier(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByCarrier(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.Carrier, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByService(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterByService(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByService(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.Service, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByStartDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime) As TB_VoyageCollection
            Return FilterByStartDate(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByStartDate(ByVal searchValue As System.Data.SqlTypes.SqlDateTime, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.StartDate, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDateTime
        Public Function FilterByStartDate(ByVal searchValue As String) As TB_VoyageCollection
            Return FilterByStartDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByStartDate(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VoyageCollection
            Return FilterByStartDate(System.Data.SqlTypes.SqlDateTime.Parse(searchValue), comparer)
        End Function

        Public Function FilterByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_VoyageCollection
            Return FilterByExchangeFrt(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExchangeFrt(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.ExchangeFrt, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByExchangeFrt(ByVal searchValue As String) As TB_VoyageCollection
            Return FilterByExchangeFrt(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByExchangeFrt(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VoyageCollection
            Return FilterByExchangeFrt(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByExchangeThc(ByVal searchValue As System.Data.SqlTypes.SqlDouble) As TB_VoyageCollection
            Return FilterByExchangeThc(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByExchangeThc(ByVal searchValue As System.Data.SqlTypes.SqlDouble, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.ExchangeThc, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

		' System.Data.SqlTypes.SqlDouble
        Public Function FilterByExchangeThc(ByVal searchValue As String) As TB_VoyageCollection
            Return FilterByExchangeThc(System.Data.SqlTypes.SqlDouble.Parse(searchValue), CompareType.Exact)
        End Function

        Private Function FilterByExchangeThc(ByVal searchValue As String, ByVal comparer As CompareType) As TB_VoyageCollection
            Return FilterByExchangeThc(System.Data.SqlTypes.SqlDouble.Parse(searchValue), comparer)
        End Function

        Public Function FilterByDjwazNo(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterByDjwazNo(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByDjwazNo(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.DjwazNo, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByMaster(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterByMaster(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByMaster(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.Master, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterBySLOT(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterBySLOT(searchValue, CompareType.Exact)
        End Function


        Public Function FilterBySLOT(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.SLOT, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByVoyageAccount(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterByVoyageAccount(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByVoyageAccount(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.VoyageAccount, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function

        Public Function FilterByTFCCode(ByVal searchValue As System.String) As TB_VoyageCollection
            Return FilterByTFCCode(searchValue, CompareType.Exact)
        End Function


        Public Function FilterByTFCCode(ByVal searchValue As System.String, ByVal comparer As CompareType) As TB_VoyageCollection
            Dim retCollection = New TB_VoyageCollection()
            Dim _TB_Voyage As TB_Voyage

            For Each _TB_Voyage In Me.List
                If Match(comparer, _TB_Voyage.TFCCode, searchValue) Then
                    retCollection.Add(_TB_Voyage)
                End If
            Next
            		
			retCollection.Parent = Me.Parent

            Return retCollection
        End Function



        Public Function SortByID(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVesselID(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VesselID"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVoyageNo(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VoyageNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByCarrier(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Carrier"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByService(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Service"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByStartDate(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("StartDate"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExchangeFrt(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExchangeFrt"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByExchangeThc(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("ExchangeThc"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByDjwazNo(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("DjwazNo"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByMaster(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("Master"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortBySLOT(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("SLOT"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByVoyageAccount(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("VoyageAccount"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function



        Public Function SortByTFCCode(ByVal sortDirection As SortDirection) As TB_VoyageCollection
            Me.InnerList.Sort(New OrmLib.ObjectPropertyComparer("TFCCode"))
            If sortDirection = sortDirection.Descending Then Me.InnerList.Reverse()
            Return Me
        End Function

		
	End Class



End Namespace