Imports System
Imports System.Data
Imports System.Data.SqlTypes
Imports System.Collections
Imports System.ComponentModel
Imports OrmLib

Namespace ShippingBiz

 
	Public MustInherit Class sysdiagramsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property name() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("name")) Then
                        Return vbNullString
                    Else
                        Return CType(row("name"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("name"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("name", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("name") = value
 
			End Set
		End Property

		public Overridable Property principal_id() As System.Data.SqlTypes.SqlInt32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("principal_id") Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("principal_id"),System.Int32))
					End If
				Else
					if row.IsNull(row.Table.Columns("principal_id"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("principal_id", DataRowVersion.Original),System.Int32))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt32) 
				If value.IsNull Then
					row("principal_id") = DBNull.Value
				Else
					row("principal_id") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property diagram_id() As System.Int32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("diagram_id"),System.Int32)
				Else
					return CType( row("diagram_id", DataRowVersion.Original), System.Int32)
				End If
				
				'System.Int32
			End Get
			Set (ByVal Value As System.Int32) 
				row("diagram_id") = value
 
			End Set
		End Property

		public Overridable Property version() As System.Data.SqlTypes.SqlInt32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("version") Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("version"),System.Int32))
					End If
				Else
					if row.IsNull(row.Table.Columns("version"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("version", DataRowVersion.Original),System.Int32))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt32) 
				If value.IsNull Then
					row("version") = DBNull.Value
				Else
					row("version") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property definition() As System.Data.SqlTypes.SqlBinary
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("definition") Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("definition"),System.Byte()))
					End If
				Else
					if row.IsNull(row.Table.Columns("definition"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("definition", DataRowVersion.Original),System.Byte()))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBinary) 
				If value.IsNull Then
					row("definition") = DBNull.Value
				Else
					row("definition") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AccessLevelOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property UserID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("UserID"),System.Guid)
				Else
					return CType( row("UserID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("UserID") = value
 
			End Set
		End Property

		public Overridable Property MenuItemID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("MenuItemID"),System.Guid)
				Else
					return CType( row("MenuItemID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("MenuItemID") = value
 
			End Set
		End Property

		public Overridable Property Accessble() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Accessble") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Accessble"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Accessble"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Accessble", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Accessble") = DBNull.Value
				Else
					row("Accessble") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_MenuItems() as ShippingBiz.TB_MenuItems 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("MenuItemIDTB_AccessLevel")) is nothing
					return new ShippingBiz.TB_MenuItems( DataContext, row.GetParentRow("MenuItemIDTB_AccessLevel"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_MenuItems )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("MenuItemIDTB_AccessLevel") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("MenuItemIDTB_AccessLevel") )		
				End If
			end set
		end property
	

		
		public Overridable Property TB_Users() as ShippingBiz.TB_Users 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("UserIDTB_AccessLevel")) is nothing
					return new ShippingBiz.TB_Users( DataContext, row.GetParentRow("UserIDTB_AccessLevel"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Users )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("UserIDTB_AccessLevel") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("UserIDTB_AccessLevel") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_AccountOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property ChargeCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargeCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargeCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargeCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargeCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargeCode") = value
 
			End Set
		End Property

		public Overridable Property Level1() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Level1")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level1"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Level1"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level1", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Level1") = value
 
			End Set
		End Property

		public Overridable Property Level2() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Level2")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level2"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Level2"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level2", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Level2") = value
 
			End Set
		End Property

		public Overridable Property Level3() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Level3")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level3"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Level3"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level3", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Level3") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property Level4() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Level4")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level4"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Level4"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Level4", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Level4") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AgentsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property AgentName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("AgentName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("AgentName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("AgentName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("AgentName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("AgentName") = value
 
			End Set
		End Property

		public Overridable Property Address() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Address")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Address"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Address"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Address", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Address") = value
 
			End Set
		End Property

		public Overridable Property Tel() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Tel")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Tel"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Tel"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Tel", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Tel") = value
 
			End Set
		End Property

		public Overridable Property Fax() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Fax")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Fax"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Fax"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Fax", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Fax") = value
 
			End Set
		End Property

		public Overridable Property Code() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Code")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Code"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Code"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Code", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Code") = value
 
			End Set
		End Property

		public Overridable Property DetentionClause() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DetentionClause")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DetentionClause"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DetentionClause"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DetentionClause", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DetentionClause") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AUTAdditionalDocsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property JobCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobCode") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlByte
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("Seq"),System.Byte))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("Seq", DataRowVersion.Original),System.Byte))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlByte) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property HtmlContent() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("HtmlContent")) Then
                        Return vbNullString
                    Else
                        Return CType(row("HtmlContent"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("HtmlContent"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("HtmlContent", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("HtmlContent") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AUTDummyOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property JobCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobCode") = value
 
			End Set
		End Property

		public Overridable Property RequestBy() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RequestBy")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RequestBy"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RequestBy"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RequestBy", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RequestBy") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Result() As System.Data.SqlTypes.SqlInt32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Result") Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("Result"),System.Int32))
					End If
				Else
					if row.IsNull(row.Table.Columns("Result"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("Result", DataRowVersion.Original),System.Int32))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt32) 
				If value.IsNull Then
					row("Result") = DBNull.Value
				Else
					row("Result") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ErrMsg() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ErrMsg")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ErrMsg"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ErrMsg"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ErrMsg", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ErrMsg") = value
 
			End Set
		End Property

		public Overridable Property VoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("VoyageID"),System.Guid)
				Else
					return CType( row("VoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("VoyageID") = value
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property Priority() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Priority")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Priority"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Priority"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Priority", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Priority") = value
 
			End Set
		End Property

		public Overridable Property IsResend() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IsResend")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsResend"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IsResend"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsResend", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IsResend") = value
 
			End Set
		End Property

		public Overridable Property DateTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DateTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DateTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("DateTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DateTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("DateTime") = DBNull.Value
				Else
					row("DateTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property LogID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("LogID"),System.Guid)
				Else
					return CType( row("LogID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("LogID") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AUTDummyLogOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BlNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BlNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BlNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BlNo") = value
 
			End Set
		End Property

		public Overridable Property JobCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobCode") = value
 
			End Set
		End Property

		public Overridable Property PropertyError() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Error")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Error"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Error"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Error", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Error") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AUTJobLogsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property JobCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobCode") = value
 
			End Set
		End Property

		public Overridable Property RequestBy() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RequestBy")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RequestBy"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RequestBy"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RequestBy", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RequestBy") = value
 
			End Set
		End Property

		public Overridable Property CreateTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CreateTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CreateTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("CreateTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CreateTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("CreateTime") = DBNull.Value
				Else
					row("CreateTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FinishedTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FinishedTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FinishedTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("FinishedTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FinishedTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("FinishedTime") = DBNull.Value
				Else
					row("FinishedTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property CancelJob() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CancelJob")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CancelJob"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CancelJob"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CancelJob", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CancelJob") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property VoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("VoyageID"),System.Guid)
				Else
					return CType( row("VoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("VoyageID") = value
 
			End Set
		End Property

		public Overridable Property Priority() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Priority")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Priority"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Priority"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Priority", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Priority") = value
 
			End Set
		End Property

		public Overridable Property CancelBy() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CancelBy")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CancelBy"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CancelBy"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CancelBy", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CancelBy") = value
 
			End Set
		End Property

		public Overridable Property CancelTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CancelTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CancelTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("CancelTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CancelTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("CancelTime") = DBNull.Value
				Else
					row("CancelTime") = value.Value
				End If
 
			End Set
		End Property




	    Private _TB_AUTJobLogsDetails As ShippingBiz.TB_AUTJobLogsDetailCollection = Nothing
	
		Friend Sub refreshTB_AUTJobLogsDetails()
			If _TB_AUTJobLogsDetails Is Nothing Then _TB_AUTJobLogsDetails = New ShippingBiz.TB_AUTJobLogsDetailCollection()
			
			Dim tmp as IList = _TB_AUTJobLogsDetails
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("JobIDTB_AUTJobLogsDetail")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_AUTJobLogsDetail(MyBase.DataContext, chld)
				_TB_AUTJobLogsDetails.Add(obj)
			Next

			_TB_AUTJobLogsDetails.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_AUTJobLogsDetails() As ShippingBiz.TB_AUTJobLogsDetailCollection
			Get 
				If _TB_AUTJobLogsDetails Is Nothing Then
					 refreshTB_AUTJobLogsDetails()
				End If
 
				Return _TB_AUTJobLogsDetails
			End Get
		End Property


			public Overridable Function AddTB_AUTJobLogsDetail(ByVal NewTB_AUTJobLogsDetail As ShippingBiz.TB_AUTJobLogsDetail) As Integer
				If _TB_AUTJobLogsDetails Is Nothing Then
					 refreshTB_AUTJobLogsDetails()
				End If
 
				NewTB_AUTJobLogsDetail.row.SetParentRow(row,MyBase.DataSet.Relations("JobIDTB_AUTJobLogsDetail"))
 
				 _TB_AUTJobLogsDetails.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_AUTJobLogsDetails.Add(NewTB_AUTJobLogsDetail) 
 
				 _TB_AUTJobLogsDetails.Parent = Me
 
				_TB_AUTJobLogsDetails.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_AUTJobLogsDetail() As ShippingBiz.TB_AUTJobLogsDetail
				If _TB_AUTJobLogsDetails Is Nothing Then
					 refreshTB_AUTJobLogsDetails()
				End If
 
				Dim _TB_AUTJobLogsDetail As New ShippingBiz.TB_AUTJobLogsDetail(MyBase.DataContext,MyBase.DataSet.Tables("TB_AUTJobLogsDetail").NewRow()) 
				MyBase.DataSet.Tables("TB_AUTJobLogsDetail").Rows.Add(_TB_AUTJobLogsDetail.row)
 
				Me.AddTB_AUTJobLogsDetail(_TB_AUTJobLogsDetail)
 
				Return _TB_AUTJobLogsDetail
			End Function


	End Class

 
	Public MustInherit Class TB_AUTJobLogsDetailOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property JobID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("JobID"),System.Guid)
				Else
					return CType( row("JobID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("JobID") = value
 
			End Set
		End Property

		public Overridable Property DocumentID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("DocumentID"),System.Guid)
				Else
					return CType( row("DocumentID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("DocumentID") = value
 
			End Set
		End Property

		public Overridable Property Document() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Document")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Document"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Document"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Document", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Document") = value
 
			End Set
		End Property

		public Overridable Property DocumentStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DocumentStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DocumentStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DocumentStatus") = value
 
			End Set
		End Property

		public Overridable Property GenerateTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GenerateTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GenerateTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("GenerateTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GenerateTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("GenerateTime") = DBNull.Value
				Else
					row("GenerateTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SentTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SentTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SentTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("SentTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SentTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("SentTime") = DBNull.Value
				Else
					row("SentTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Result() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Result")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Result"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Result"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Result", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Result") = value
 
			End Set
		End Property

		public Overridable Property sKey() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("sKey")) Then
                        Return vbNullString
                    Else
                        Return CType(row("sKey"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("sKey"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("sKey", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("sKey") = value
 
			End Set
		End Property


		
		public Overridable Property TB_AUTJobLogs() as ShippingBiz.TB_AUTJobLogs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("JobIDTB_AUTJobLogsDetail")) is nothing
					return new ShippingBiz.TB_AUTJobLogs( DataContext, row.GetParentRow("JobIDTB_AUTJobLogsDetail"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_AUTJobLogs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("JobIDTB_AUTJobLogsDetail") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("JobIDTB_AUTJobLogsDetail") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_AUTJobsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property JobCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobCode") = value
 
			End Set
		End Property

		public Overridable Property JobName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobName") = value
 
			End Set
		End Property

		public Overridable Property RecipiantAsTo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RecipiantAsTo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsTo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RecipiantAsTo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsTo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RecipiantAsTo") = value
 
			End Set
		End Property

		public Overridable Property RecipiantAsCC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RecipiantAsCC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsCC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RecipiantAsCC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsCC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RecipiantAsCC") = value
 
			End Set
		End Property

		public Overridable Property HTMLContent() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("HTMLContent")) Then
                        Return vbNullString
                    Else
                        Return CType(row("HTMLContent"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("HTMLContent"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("HTMLContent", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("HTMLContent") = value
 
			End Set
		End Property

		public Overridable Property PIC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PIC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PIC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PIC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PIC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PIC") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_autoLogOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property FaxNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FaxNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FaxNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FaxNo") = value
 
			End Set
		End Property

		public Overridable Property DocumentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DocumentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DocumentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DocumentType") = value
 
			End Set
		End Property

		public Overridable Property DocumentStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DocumentStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DocumentStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DocumentStatus") = value
 
			End Set
		End Property

		public Overridable Property Subject() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Subject")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Subject"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Subject"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Subject", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Subject") = value
 
			End Set
		End Property

		public Overridable Property GenerateTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GenerateTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GenerateTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("GenerateTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GenerateTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("GenerateTime") = DBNull.Value
				Else
					row("GenerateTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SentTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SentTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SentTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("SentTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SentTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("SentTime") = DBNull.Value
				Else
					row("SentTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FaxLog() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FaxLog")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxLog"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FaxLog"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxLog", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FaxLog") = value
 
			End Set
		End Property

		public Overridable Property IsReportedGenerate() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IsReportedGenerate")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsReportedGenerate"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IsReportedGenerate"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsReportedGenerate", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IsReportedGenerate") = value
 
			End Set
		End Property

		public Overridable Property IsreportedFailed() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IsreportedFailed")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsreportedFailed"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IsreportedFailed"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsreportedFailed", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IsreportedFailed") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AUTScheduleOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property JobCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobCode") = value
 
			End Set
		End Property

		public Overridable Property Saturday() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Saturday") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Saturday"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Saturday"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Saturday", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Saturday") = DBNull.Value
				Else
					row("Saturday") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Sunday() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Sunday") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Sunday"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Sunday"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Sunday", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Sunday") = DBNull.Value
				Else
					row("Sunday") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Monday() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Monday") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Monday"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Monday"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Monday", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Monday") = DBNull.Value
				Else
					row("Monday") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Tuesday() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Tuesday") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Tuesday"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Tuesday"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Tuesday", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Tuesday") = DBNull.Value
				Else
					row("Tuesday") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Wednesday() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Wednesday") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Wednesday"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Wednesday"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Wednesday", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Wednesday") = DBNull.Value
				Else
					row("Wednesday") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Thursday() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Thursday") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Thursday"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Thursday"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Thursday", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Thursday") = DBNull.Value
				Else
					row("Thursday") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Friday() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Friday") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Friday"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Friday"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Friday", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Friday") = DBNull.Value
				Else
					row("Friday") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Time() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Time") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Time"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Time"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Time", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Time") = DBNull.Value
				Else
					row("Time") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_AUTSettingsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property MailServer() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailServer")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailServer"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailServer"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailServer", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailServer") = value
 
			End Set
		End Property

		public Overridable Property MailUserName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailUserName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailUserName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailUserName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailUserName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailUserName") = value
 
			End Set
		End Property

		public Overridable Property MailPassword() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailPassword")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailPassword"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailPassword"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailPassword", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailPassword") = value
 
			End Set
		End Property

		public Overridable Property FAXServer() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FAXServer")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FAXServer"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FAXServer"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FAXServer", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FAXServer") = value
 
			End Set
		End Property

		public Overridable Property FaxUserName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FaxUserName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxUserName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FaxUserName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxUserName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FaxUserName") = value
 
			End Set
		End Property

		public Overridable Property FaxPassword() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FaxPassword")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxPassword"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FaxPassword"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxPassword", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FaxPassword") = value
 
			End Set
		End Property

		public Overridable Property FaxServerMailBox() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FaxServerMailBox")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxServerMailBox"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FaxServerMailBox"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxServerMailBox", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FaxServerMailBox") = value
 
			End Set
		End Property

		public Overridable Property AutomationProfile() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("AutomationProfile")) Then
                        Return vbNullString
                    Else
                        Return CType(row("AutomationProfile"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("AutomationProfile"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("AutomationProfile", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("AutomationProfile") = value
 
			End Set
		End Property

		public Overridable Property SentDocFolder() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SentDocFolder")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SentDocFolder"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SentDocFolder"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SentDocFolder", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SentDocFolder") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_BookingOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BookingNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BookingNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BookingNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BookingNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BookingNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BookingNo") = value
 
			End Set
		End Property

		public Overridable Property BookingDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("BookingDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("BookingDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("BookingDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("BookingDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("BookingDate") = DBNull.Value
				Else
					row("BookingDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property ClientID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ClientID"),System.Guid)
				Else
					return CType( row("ClientID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ClientID") = value
 
			End Set
		End Property

		public Overridable Property ClientRepID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ClientRepID"),System.Guid)
				Else
					return CType( row("ClientRepID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ClientRepID") = value
 
			End Set
		End Property

		public Overridable Property Validity() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Validity") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Validity"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Validity"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Validity", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Validity") = DBNull.Value
				Else
					row("Validity") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property POL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POL") = value
 
			End Set
		End Property

		public Overridable Property POLFreeDays() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("POLFreeDays") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("POLFreeDays"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("POLFreeDays"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("POLFreeDays", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("POLFreeDays") = DBNull.Value
				Else
					row("POLFreeDays") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property POD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POD") = value
 
			End Set
		End Property

		public Overridable Property PODFreeDays() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PODFreeDays") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("PODFreeDays"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("PODFreeDays"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("PODFreeDays", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("PODFreeDays") = DBNull.Value
				Else
					row("PODFreeDays") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property POT() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POT")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POT"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POT") = value
 
			End Set
		End Property

		public Overridable Property FPOD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FPOD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FPOD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FPOD") = value
 
			End Set
		End Property

		public Overridable Property Goods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Goods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Goods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Goods") = value
 
			End Set
		End Property

		public Overridable Property Depot() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Depot")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Depot"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Depot"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Depot", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Depot") = value
 
			End Set
		End Property

		public Overridable Property PrincipalReference() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PrincipalReference")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PrincipalReference"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PrincipalReference"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PrincipalReference", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PrincipalReference") = value
 
			End Set
		End Property

		public Overridable Property PrincipalConfirm() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PrincipalConfirm") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("PrincipalConfirm"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("PrincipalConfirm"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("PrincipalConfirm", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("PrincipalConfirm") = DBNull.Value
				Else
					row("PrincipalConfirm") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SalesMan() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("SalesMan"),System.Guid)
				Else
					return CType( row("SalesMan", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("SalesMan") = value
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property Terms() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Terms")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Terms"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Terms") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property ExchangeFrt() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ExchangeFrt") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ExchangeFrt"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("ExchangeFrt"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ExchangeFrt", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("ExchangeFrt") = DBNull.Value
				Else
					row("ExchangeFrt") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ExchangeTHC() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ExchangeTHC") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ExchangeTHC"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("ExchangeTHC"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ExchangeTHC", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("ExchangeTHC") = DBNull.Value
				Else
					row("ExchangeTHC") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property InvoiceInIrr() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("InvoiceInIrr") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("InvoiceInIrr"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("InvoiceInIrr"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("InvoiceInIrr", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("InvoiceInIrr") = DBNull.Value
				Else
					row("InvoiceInIrr") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Package() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Package")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Package"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Package"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Package", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Package") = value
 
			End Set
		End Property

		public Overridable Property ExceptedMtyPickup() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ExceptedMtyPickup") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ExceptedMtyPickup"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ExceptedMtyPickup"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ExceptedMtyPickup", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ExceptedMtyPickup") = DBNull.Value
				Else
					row("ExceptedMtyPickup") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property BLToBeUsed() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BLToBeUsed")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BLToBeUsed"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BLToBeUsed"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BLToBeUsed", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BLToBeUsed") = value
 
			End Set
		End Property

		public Overridable Property SOC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SOC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SOC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SOC") = value
 
			End Set
		End Property

		public Overridable Property UNNO() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UNNO")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNO"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UNNO"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNO", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UNNO") = value
 
			End Set
		End Property

		public Overridable Property IMDGCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IMDGCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IMDGCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IMDGCode") = value
 
			End Set
		End Property

		public Overridable Property PakingGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PakingGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PakingGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PakingGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PakingGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PakingGroup") = value
 
			End Set
		End Property

		public Overridable Property PageNumber() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PageNumber") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("PageNumber"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("PageNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("PageNumber", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("PageNumber") = DBNull.Value
				Else
					row("PageNumber") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SwitchBLIn() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SwitchBLIn")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SwitchBLIn"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SwitchBLIn"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SwitchBLIn", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SwitchBLIn") = value
 
			End Set
		End Property

		public Overridable Property PackageType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PackageType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PackageType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PackageType") = value
 
			End Set
		End Property

		public Overridable Property Payer() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Payer")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Payer"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Payer"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Payer", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Payer") = value
 
			End Set
		End Property


		
		public Overridable Property TB_Clients() as ShippingBiz.TB_Clients 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("ClientIDTB_Booking")) is nothing
					return new ShippingBiz.TB_Clients( DataContext, row.GetParentRow("ClientIDTB_Booking"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Clients )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("ClientIDTB_Booking") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("ClientIDTB_Booking") )		
				End If
			end set
		end property
	



	    Private _TB_BookingCnss As ShippingBiz.TB_BookingCnsCollection = Nothing
	
		Friend Sub refreshTB_BookingCnss()
			If _TB_BookingCnss Is Nothing Then _TB_BookingCnss = New ShippingBiz.TB_BookingCnsCollection()
			
			Dim tmp as IList = _TB_BookingCnss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("PIDTB_BookingCns")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_BookingCns(MyBase.DataContext, chld)
				_TB_BookingCnss.Add(obj)
			Next

			_TB_BookingCnss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_BookingCnss() As ShippingBiz.TB_BookingCnsCollection
			Get 
				If _TB_BookingCnss Is Nothing Then
					 refreshTB_BookingCnss()
				End If
 
				Return _TB_BookingCnss
			End Get
		End Property


			public Overridable Function AddTB_BookingCns(ByVal NewTB_BookingCns As ShippingBiz.TB_BookingCns) As Integer
				If _TB_BookingCnss Is Nothing Then
					 refreshTB_BookingCnss()
				End If
 
				NewTB_BookingCns.row.SetParentRow(row,MyBase.DataSet.Relations("PIDTB_BookingCns"))
 
				 _TB_BookingCnss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_BookingCnss.Add(NewTB_BookingCns) 
 
				 _TB_BookingCnss.Parent = Me
 
				_TB_BookingCnss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_BookingCns() As ShippingBiz.TB_BookingCns
				If _TB_BookingCnss Is Nothing Then
					 refreshTB_BookingCnss()
				End If
 
				Dim _TB_BookingCns As New ShippingBiz.TB_BookingCns(MyBase.DataContext,MyBase.DataSet.Tables("TB_BookingCns").NewRow()) 
				MyBase.DataSet.Tables("TB_BookingCns").Rows.Add(_TB_BookingCns.row)
 
				Me.AddTB_BookingCns(_TB_BookingCns)
 
				Return _TB_BookingCns
			End Function
	    Private _TB_BookingDetailss As ShippingBiz.TB_BookingDetailsCollection = Nothing
	
		Friend Sub refreshTB_BookingDetailss()
			If _TB_BookingDetailss Is Nothing Then _TB_BookingDetailss = New ShippingBiz.TB_BookingDetailsCollection()
			
			Dim tmp as IList = _TB_BookingDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BookingIDTB_BookingDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_BookingDetails(MyBase.DataContext, chld)
				_TB_BookingDetailss.Add(obj)
			Next

			_TB_BookingDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_BookingDetailss() As ShippingBiz.TB_BookingDetailsCollection
			Get 
				If _TB_BookingDetailss Is Nothing Then
					 refreshTB_BookingDetailss()
				End If
 
				Return _TB_BookingDetailss
			End Get
		End Property


			public Overridable Function AddTB_BookingDetails(ByVal NewTB_BookingDetails As ShippingBiz.TB_BookingDetails) As Integer
				If _TB_BookingDetailss Is Nothing Then
					 refreshTB_BookingDetailss()
				End If
 
				NewTB_BookingDetails.row.SetParentRow(row,MyBase.DataSet.Relations("BookingIDTB_BookingDetails"))
 
				 _TB_BookingDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_BookingDetailss.Add(NewTB_BookingDetails) 
 
				 _TB_BookingDetailss.Parent = Me
 
				_TB_BookingDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_BookingDetails() As ShippingBiz.TB_BookingDetails
				If _TB_BookingDetailss Is Nothing Then
					 refreshTB_BookingDetailss()
				End If
 
				Dim _TB_BookingDetails As New ShippingBiz.TB_BookingDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_BookingDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_BookingDetails").Rows.Add(_TB_BookingDetails.row)
 
				Me.AddTB_BookingDetails(_TB_BookingDetails)
 
				Return _TB_BookingDetails
			End Function
	    Private _TB_BookingReleases As ShippingBiz.TB_BookingReleaseCollection = Nothing
	
		Friend Sub refreshTB_BookingReleases()
			If _TB_BookingReleases Is Nothing Then _TB_BookingReleases = New ShippingBiz.TB_BookingReleaseCollection()
			
			Dim tmp as IList = _TB_BookingReleases
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BookingIDTB_BookingRelease")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_BookingRelease(MyBase.DataContext, chld)
				_TB_BookingReleases.Add(obj)
			Next

			_TB_BookingReleases.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_BookingReleases() As ShippingBiz.TB_BookingReleaseCollection
			Get 
				If _TB_BookingReleases Is Nothing Then
					 refreshTB_BookingReleases()
				End If
 
				Return _TB_BookingReleases
			End Get
		End Property


			public Overridable Function AddTB_BookingRelease(ByVal NewTB_BookingRelease As ShippingBiz.TB_BookingRelease) As Integer
				If _TB_BookingReleases Is Nothing Then
					 refreshTB_BookingReleases()
				End If
 
				NewTB_BookingRelease.row.SetParentRow(row,MyBase.DataSet.Relations("BookingIDTB_BookingRelease"))
 
				 _TB_BookingReleases.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_BookingReleases.Add(NewTB_BookingRelease) 
 
				 _TB_BookingReleases.Parent = Me
 
				_TB_BookingReleases.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_BookingRelease() As ShippingBiz.TB_BookingRelease
				If _TB_BookingReleases Is Nothing Then
					 refreshTB_BookingReleases()
				End If
 
				Dim _TB_BookingRelease As New ShippingBiz.TB_BookingRelease(MyBase.DataContext,MyBase.DataSet.Tables("TB_BookingRelease").NewRow()) 
				MyBase.DataSet.Tables("TB_BookingRelease").Rows.Add(_TB_BookingRelease.row)
 
				Me.AddTB_BookingRelease(_TB_BookingRelease)
 
				Return _TB_BookingRelease
			End Function
	    Private _TB_EcsContainerss As ShippingBiz.TB_EcsContainersCollection = Nothing
	
		Friend Sub refreshTB_EcsContainerss()
			If _TB_EcsContainerss Is Nothing Then _TB_EcsContainerss = New ShippingBiz.TB_EcsContainersCollection()
			
			Dim tmp as IList = _TB_EcsContainerss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BookingIDTB_EcsContainers")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_EcsContainers(MyBase.DataContext, chld)
				_TB_EcsContainerss.Add(obj)
			Next

			_TB_EcsContainerss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_EcsContainerss() As ShippingBiz.TB_EcsContainersCollection
			Get 
				If _TB_EcsContainerss Is Nothing Then
					 refreshTB_EcsContainerss()
				End If
 
				Return _TB_EcsContainerss
			End Get
		End Property


			public Overridable Function AddTB_EcsContainers(ByVal NewTB_EcsContainers As ShippingBiz.TB_EcsContainers) As Integer
				If _TB_EcsContainerss Is Nothing Then
					 refreshTB_EcsContainerss()
				End If
 
				NewTB_EcsContainers.row.SetParentRow(row,MyBase.DataSet.Relations("BookingIDTB_EcsContainers"))
 
				 _TB_EcsContainerss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_EcsContainerss.Add(NewTB_EcsContainers) 
 
				 _TB_EcsContainerss.Parent = Me
 
				_TB_EcsContainerss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_EcsContainers() As ShippingBiz.TB_EcsContainers
				If _TB_EcsContainerss Is Nothing Then
					 refreshTB_EcsContainerss()
				End If
 
				Dim _TB_EcsContainers As New ShippingBiz.TB_EcsContainers(MyBase.DataContext,MyBase.DataSet.Tables("TB_EcsContainers").NewRow()) 
				MyBase.DataSet.Tables("TB_EcsContainers").Rows.Add(_TB_EcsContainers.row)
 
				Me.AddTB_EcsContainers(_TB_EcsContainers)
 
				Return _TB_EcsContainers
			End Function
	    Private _TB_OutwardBLSs As ShippingBiz.TB_OutwardBLSCollection = Nothing
	
		Friend Sub refreshTB_OutwardBLSs()
			If _TB_OutwardBLSs Is Nothing Then _TB_OutwardBLSs = New ShippingBiz.TB_OutwardBLSCollection()
			
			Dim tmp as IList = _TB_OutwardBLSs
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BookingIDTB_OutwardBLS")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardBLS(MyBase.DataContext, chld)
				_TB_OutwardBLSs.Add(obj)
			Next

			_TB_OutwardBLSs.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardBLSs() As ShippingBiz.TB_OutwardBLSCollection
			Get 
				If _TB_OutwardBLSs Is Nothing Then
					 refreshTB_OutwardBLSs()
				End If
 
				Return _TB_OutwardBLSs
			End Get
		End Property


			public Overridable Function AddTB_OutwardBLS(ByVal NewTB_OutwardBLS As ShippingBiz.TB_OutwardBLS) As Integer
				If _TB_OutwardBLSs Is Nothing Then
					 refreshTB_OutwardBLSs()
				End If
 
				NewTB_OutwardBLS.row.SetParentRow(row,MyBase.DataSet.Relations("BookingIDTB_OutwardBLS"))
 
				 _TB_OutwardBLSs.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardBLSs.Add(NewTB_OutwardBLS) 
 
				 _TB_OutwardBLSs.Parent = Me
 
				_TB_OutwardBLSs.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardBLS() As ShippingBiz.TB_OutwardBLS
				If _TB_OutwardBLSs Is Nothing Then
					 refreshTB_OutwardBLSs()
				End If
 
				Dim _TB_OutwardBLS As New ShippingBiz.TB_OutwardBLS(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardBLS").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardBLS").Rows.Add(_TB_OutwardBLS.row)
 
				Me.AddTB_OutwardBLS(_TB_OutwardBLS)
 
				Return _TB_OutwardBLS
			End Function


	End Class

 
	Public MustInherit Class TB_BookingCnsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property PID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("PID"),System.Guid)
				Else
					return CType( row("PID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("PID") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property CnSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnSize") = value
 
			End Set
		End Property

		public Overridable Property NoOfCns() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOfCns") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOfCns"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOfCns"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOfCns", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("NoOfCns") = DBNull.Value
				Else
					row("NoOfCns") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_Booking() as ShippingBiz.TB_Booking 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("PIDTB_BookingCns")) is nothing
					return new ShippingBiz.TB_Booking( DataContext, row.GetParentRow("PIDTB_BookingCns"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Booking )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("PIDTB_BookingCns") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("PIDTB_BookingCns") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_BookingDepositsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BookingID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BookingID"),System.Guid)
				Else
					return CType( row("BookingID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BookingID") = value
 
			End Set
		End Property

		public Overridable Property ChargesCodes() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCodes")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCodes"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCodes"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCodes", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCodes") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReturnBackDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ReturnBackDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ReturnBackDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ReturnBackDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ReturnBackDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ReturnBackDate") = DBNull.Value
				Else
					row("ReturnBackDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReturnBackAmount() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ReturnBackAmount") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ReturnBackAmount"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("ReturnBackAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ReturnBackAmount", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("ReturnBackAmount") = DBNull.Value
				Else
					row("ReturnBackAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReturnBackRef() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReturnBackRef")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReturnBackRef"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReturnBackRef"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReturnBackRef", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReturnBackRef") = value
 
			End Set
		End Property

		public Overridable Property PaidRef() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaidRef")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaidRef"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaidRef") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_BookingDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BookingID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BookingID"),System.Guid)
				Else
					return CType( row("BookingID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BookingID") = value
 
			End Set
		End Property

		public Overridable Property ChargeItem() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargeItem")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargeItem"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargeItem"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargeItem", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargeItem") = value
 
			End Set
		End Property

		public Overridable Property CnSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnSize") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property QTShipper() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("QTShipper") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("QTShipper"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("QTShipper"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("QTShipper", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("QTShipper") = DBNull.Value
				Else
					row("QTShipper") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property QTCarrier() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("QTCarrier") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("QTCarrier"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("QTCarrier"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("QTCarrier", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("QTCarrier") = DBNull.Value
				Else
					row("QTCarrier") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TotalCntrs() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TotalCntrs") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("TotalCntrs"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("TotalCntrs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("TotalCntrs", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("TotalCntrs") = DBNull.Value
				Else
					row("TotalCntrs") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Payebleat() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Payebleat")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Payebleat"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Payebleat"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Payebleat", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Payebleat") = value
 
			End Set
		End Property

		public Overridable Property BaseOn() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BaseOn")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BaseOn"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BaseOn"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BaseOn", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BaseOn") = value
 
			End Set
		End Property

		public Overridable Property CurCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CurCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CurCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CurCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CurCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CurCode") = value
 
			End Set
		End Property

		public Overridable Property SlotRate() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SlotRate") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("SlotRate"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("SlotRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("SlotRate", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("SlotRate") = DBNull.Value
				Else
					row("SlotRate") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_Booking() as ShippingBiz.TB_Booking 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BookingIDTB_BookingDetails")) is nothing
					return new ShippingBiz.TB_Booking( DataContext, row.GetParentRow("BookingIDTB_BookingDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Booking )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BookingIDTB_BookingDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BookingIDTB_BookingDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_BookingReleasCntrsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ReleaseID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ReleaseID"),System.Guid)
				Else
					return CType( row("ReleaseID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ReleaseID") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property CnSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnSize") = value
 
			End Set
		End Property

		public Overridable Property NoOfCntrs() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOfCntrs") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("NoOfCntrs"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOfCntrs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("NoOfCntrs", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("NoOfCntrs") = DBNull.Value
				Else
					row("NoOfCntrs") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_BookingRelease() as ShippingBiz.TB_BookingRelease 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("ReleaseIDTB_BookingReleasCntrs")) is nothing
					return new ShippingBiz.TB_BookingRelease( DataContext, row.GetParentRow("ReleaseIDTB_BookingReleasCntrs"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_BookingRelease )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("ReleaseIDTB_BookingReleasCntrs") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("ReleaseIDTB_BookingReleasCntrs") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_BookingReleaseOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BookingID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BookingID"),System.Guid)
				Else
					return CType( row("BookingID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BookingID") = value
 
			End Set
		End Property

		public Overridable Property Reference() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Reference")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Reference"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Reference"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Reference", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Reference") = value
 
			End Set
		End Property

		public Overridable Property RequestTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("RequestTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("RequestTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("RequestTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("RequestTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("RequestTime") = DBNull.Value
				Else
					row("RequestTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IssueDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IssueDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("IssueDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("IssueDate") = DBNull.Value
				Else
					row("IssueDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IssueOffice() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IssueOffice")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueOffice"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IssueOffice"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueOffice", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IssueOffice") = value
 
			End Set
		End Property


		
		public Overridable Property TB_Booking() as ShippingBiz.TB_Booking 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BookingIDTB_BookingRelease")) is nothing
					return new ShippingBiz.TB_Booking( DataContext, row.GetParentRow("BookingIDTB_BookingRelease"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Booking )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BookingIDTB_BookingRelease") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BookingIDTB_BookingRelease") )		
				End If
			end set
		end property
	



	    Private _TB_BookingReleasCntrss As ShippingBiz.TB_BookingReleasCntrsCollection = Nothing
	
		Friend Sub refreshTB_BookingReleasCntrss()
			If _TB_BookingReleasCntrss Is Nothing Then _TB_BookingReleasCntrss = New ShippingBiz.TB_BookingReleasCntrsCollection()
			
			Dim tmp as IList = _TB_BookingReleasCntrss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("ReleaseIDTB_BookingReleasCntrs")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_BookingReleasCntrs(MyBase.DataContext, chld)
				_TB_BookingReleasCntrss.Add(obj)
			Next

			_TB_BookingReleasCntrss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_BookingReleasCntrss() As ShippingBiz.TB_BookingReleasCntrsCollection
			Get 
				If _TB_BookingReleasCntrss Is Nothing Then
					 refreshTB_BookingReleasCntrss()
				End If
 
				Return _TB_BookingReleasCntrss
			End Get
		End Property


			public Overridable Function AddTB_BookingReleasCntrs(ByVal NewTB_BookingReleasCntrs As ShippingBiz.TB_BookingReleasCntrs) As Integer
				If _TB_BookingReleasCntrss Is Nothing Then
					 refreshTB_BookingReleasCntrss()
				End If
 
				NewTB_BookingReleasCntrs.row.SetParentRow(row,MyBase.DataSet.Relations("ReleaseIDTB_BookingReleasCntrs"))
 
				 _TB_BookingReleasCntrss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_BookingReleasCntrss.Add(NewTB_BookingReleasCntrs) 
 
				 _TB_BookingReleasCntrss.Parent = Me
 
				_TB_BookingReleasCntrss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_BookingReleasCntrs() As ShippingBiz.TB_BookingReleasCntrs
				If _TB_BookingReleasCntrss Is Nothing Then
					 refreshTB_BookingReleasCntrss()
				End If
 
				Dim _TB_BookingReleasCntrs As New ShippingBiz.TB_BookingReleasCntrs(MyBase.DataContext,MyBase.DataSet.Tables("TB_BookingReleasCntrs").NewRow()) 
				MyBase.DataSet.Tables("TB_BookingReleasCntrs").Rows.Add(_TB_BookingReleasCntrs.row)
 
				Me.AddTB_BookingReleasCntrs(_TB_BookingReleasCntrs)
 
				Return _TB_BookingReleasCntrs
			End Function


	End Class

 
	Public MustInherit Class TB_CalculationBaseOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ExchangeRateInward() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ExchangeRateInward")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ExchangeRateInward"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ExchangeRateInward"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ExchangeRateInward", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ExchangeRateInward") = value
 
			End Set
		End Property

		public Overridable Property ExchangeRateOutward() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ExchangeRateOutward")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ExchangeRateOutward"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ExchangeRateOutward"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ExchangeRateOutward", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ExchangeRateOutward") = value
 
			End Set
		End Property

		public Overridable Property DetentionInwardStartTime() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DetentionInwardStartTime")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DetentionInwardStartTime"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DetentionInwardStartTime"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DetentionInwardStartTime", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DetentionInwardStartTime") = value
 
			End Set
		End Property

		public Overridable Property DetentionOutwardStartTime() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DetentionOutwardStartTime")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DetentionOutwardStartTime"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DetentionOutwardStartTime"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DetentionOutwardStartTime", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DetentionOutwardStartTime") = value
 
			End Set
		End Property

		public Overridable Property TaxDutyInward() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TaxDutyInward")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TaxDutyInward"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TaxDutyInward"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TaxDutyInward", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TaxDutyInward") = value
 
			End Set
		End Property

		public Overridable Property TaxDutyOutward() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TaxDutyOutward")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TaxDutyOutward"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TaxDutyOutward"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TaxDutyOutward", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TaxDutyOutward") = value
 
			End Set
		End Property

		public Overridable Property IsTaxDutyJoin() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsTaxDutyJoin") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsTaxDutyJoin"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsTaxDutyJoin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsTaxDutyJoin", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsTaxDutyJoin") = DBNull.Value
				Else
					row("IsTaxDutyJoin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReferenceFormula() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReferenceFormula")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReferenceFormula"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReferenceFormula"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReferenceFormula", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReferenceFormula") = value
 
			End Set
		End Property

		public Overridable Property InvoiceFormula() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InvoiceFormula")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceFormula"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InvoiceFormula"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceFormula", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InvoiceFormula") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_ChgLevelDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property MasterID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("MasterID"),System.Guid)
				Else
					return CType( row("MasterID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("MasterID") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property SOC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SOC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SOC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SOC") = value
 
			End Set
		End Property

		public Overridable Property ShipmentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ShipmentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ShipmentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ShipmentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ShipmentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ShipmentType") = value
 
			End Set
		End Property

		public Overridable Property Imco() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Imco")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Imco"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Imco"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Imco", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Imco") = value
 
			End Set
		End Property

		public Overridable Property IsFull() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IsFull")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsFull"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IsFull"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsFull", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IsFull") = value
 
			End Set
		End Property

		public Overridable Property Amount20() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount20") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount20"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount20"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount20", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount20") = DBNull.Value
				Else
					row("Amount20") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount40() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount40") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount40"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount40"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount40", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount40") = DBNull.Value
				Else
					row("Amount40") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount45() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount45") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount45"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount45"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount45", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount45") = DBNull.Value
				Else
					row("Amount45") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_ChgLevelMaster() as ShippingBiz.TB_ChgLevelMaster 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("MasterIDTB_ChgLevelDetails")) is nothing
					return new ShippingBiz.TB_ChgLevelMaster( DataContext, row.GetParentRow("MasterIDTB_ChgLevelDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_ChgLevelMaster )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("MasterIDTB_ChgLevelDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("MasterIDTB_ChgLevelDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_ChgLevelMasterOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ImportExport() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ImportExport")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ImportExport"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ImportExport"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ImportExport", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ImportExport") = value
 
			End Set
		End Property

		public Overridable Property ApplyDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ApplyDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ApplyDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ApplyDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ApplyDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ApplyDate") = DBNull.Value
				Else
					row("ApplyDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Validity() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Validity") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Validity"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Validity"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Validity", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Validity") = DBNull.Value
				Else
					row("Validity") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ChargeItem() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargeItem")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargeItem"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargeItem"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargeItem", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargeItem") = value
 
			End Set
		End Property

		public Overridable Property IsDeposit() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsDeposit") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsDeposit"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsDeposit"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsDeposit", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsDeposit") = DBNull.Value
				Else
					row("IsDeposit") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property BaseOn() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BaseOn")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BaseOn"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BaseOn"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BaseOn", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BaseOn") = value
 
			End Set
		End Property

		public Overridable Property CurCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CurCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CurCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CurCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CurCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CurCode") = value
 
			End Set
		End Property

		public Overridable Property DefaultAmount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DefaultAmount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DefaultAmount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("DefaultAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DefaultAmount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("DefaultAmount") = DBNull.Value
				Else
					row("DefaultAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DividInLCL() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DividInLCL") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("DividInLCL"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("DividInLCL"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("DividInLCL", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("DividInLCL") = DBNull.Value
				Else
					row("DividInLCL") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Condition() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Condition")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Condition"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Condition"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Condition", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Condition") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property Tax() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Tax") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Tax"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("Tax"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Tax", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("Tax") = DBNull.Value
				Else
					row("Tax") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Toll() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Toll") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Toll"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("Toll"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Toll", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("Toll") = DBNull.Value
				Else
					row("Toll") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property ClientID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ClientID"),System.Guid)
				Else
					return CType( row("ClientID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ClientID") = value
 
			End Set
		End Property




	    Private _TB_ChgLevelDetailss As ShippingBiz.TB_ChgLevelDetailsCollection = Nothing
	
		Friend Sub refreshTB_ChgLevelDetailss()
			If _TB_ChgLevelDetailss Is Nothing Then _TB_ChgLevelDetailss = New ShippingBiz.TB_ChgLevelDetailsCollection()
			
			Dim tmp as IList = _TB_ChgLevelDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("MasterIDTB_ChgLevelDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_ChgLevelDetails(MyBase.DataContext, chld)
				_TB_ChgLevelDetailss.Add(obj)
			Next

			_TB_ChgLevelDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_ChgLevelDetailss() As ShippingBiz.TB_ChgLevelDetailsCollection
			Get 
				If _TB_ChgLevelDetailss Is Nothing Then
					 refreshTB_ChgLevelDetailss()
				End If
 
				Return _TB_ChgLevelDetailss
			End Get
		End Property


			public Overridable Function AddTB_ChgLevelDetails(ByVal NewTB_ChgLevelDetails As ShippingBiz.TB_ChgLevelDetails) As Integer
				If _TB_ChgLevelDetailss Is Nothing Then
					 refreshTB_ChgLevelDetailss()
				End If
 
				NewTB_ChgLevelDetails.row.SetParentRow(row,MyBase.DataSet.Relations("MasterIDTB_ChgLevelDetails"))
 
				 _TB_ChgLevelDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_ChgLevelDetailss.Add(NewTB_ChgLevelDetails) 
 
				 _TB_ChgLevelDetailss.Parent = Me
 
				_TB_ChgLevelDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_ChgLevelDetails() As ShippingBiz.TB_ChgLevelDetails
				If _TB_ChgLevelDetailss Is Nothing Then
					 refreshTB_ChgLevelDetailss()
				End If
 
				Dim _TB_ChgLevelDetails As New ShippingBiz.TB_ChgLevelDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_ChgLevelDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_ChgLevelDetails").Rows.Add(_TB_ChgLevelDetails.row)
 
				Me.AddTB_ChgLevelDetails(_TB_ChgLevelDetails)
 
				Return _TB_ChgLevelDetails
			End Function


	End Class

 
	Public MustInherit Class TB_ClientsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property lName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("lName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("lName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("lName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("lName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("lName") = value
 
			End Set
		End Property

		public Overridable Property lAddress() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("lAddress")) Then
                        Return vbNullString
                    Else
                        Return CType(row("lAddress"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("lAddress"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("lAddress", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("lAddress") = value
 
			End Set
		End Property

		public Overridable Property fName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("fName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("fName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("fName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("fName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("fName") = value
 
			End Set
		End Property

		public Overridable Property fAddress() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("fAddress")) Then
                        Return vbNullString
                    Else
                        Return CType(row("fAddress"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("fAddress"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("fAddress", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("fAddress") = value
 
			End Set
		End Property

		public Overridable Property Email() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Email")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Email"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Email"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Email", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Email") = value
 
			End Set
		End Property

		public Overridable Property Fax() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Fax")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Fax"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Fax"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Fax", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Fax") = value
 
			End Set
		End Property

		public Overridable Property TEL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TEL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TEL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TEL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TEL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TEL") = value
 
			End Set
		End Property

		public Overridable Property Country() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Country")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Country"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Country"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Country", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Country") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property AccountA() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("AccountA")) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountA"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("AccountA"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountA", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("AccountA") = value
 
			End Set
		End Property

		public Overridable Property AccountB() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("AccountB")) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountB"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("AccountB"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountB", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("AccountB") = value
 
			End Set
		End Property

		public Overridable Property AccountC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("AccountC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("AccountC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("AccountC") = value
 
			End Set
		End Property

		public Overridable Property POBOX() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POBOX")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POBOX"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POBOX"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POBOX", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POBOX") = value
 
			End Set
		End Property

		public Overridable Property RegestrationNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RegestrationNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RegestrationNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RegestrationNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RegestrationNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RegestrationNo") = value
 
			End Set
		End Property

		public Overridable Property EconomicNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EconomicNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EconomicNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EconomicNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EconomicNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EconomicNo") = value
 
			End Set
		End Property

		public Overridable Property IsReal() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsReal") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsReal"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsReal"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsReal", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsReal") = DBNull.Value
				Else
					row("IsReal") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ClientCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ClientCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ClientCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ClientCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ClientCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ClientCode") = value
 
			End Set
		End Property

		public Overridable Property Mobile() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Mobile")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Mobile"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Mobile"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Mobile", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Mobile") = value
 
			End Set
		End Property

		public Overridable Property SendDocsByFax() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SendDocsByFax") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SendDocsByFax"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("SendDocsByFax"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SendDocsByFax", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("SendDocsByFax") = DBNull.Value
				Else
					row("SendDocsByFax") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SendDocsByEmail() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SendDocsByEmail") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SendDocsByEmail"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("SendDocsByEmail"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SendDocsByEmail", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("SendDocsByEmail") = DBNull.Value
				Else
					row("SendDocsByEmail") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property NationalCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("NationalCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("NationalCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("NationalCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("NationalCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("NationalCode") = value
 
			End Set
		End Property

		public Overridable Property NationalID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("NationalID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("NationalID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("NationalID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("NationalID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("NationalID") = value
 
			End Set
		End Property

		public Overridable Property City() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("City")) Then
                        Return vbNullString
                    Else
                        Return CType(row("City"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("City"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("City", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("City") = value
 
			End Set
		End Property

		public Overridable Property State() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("State")) Then
                        Return vbNullString
                    Else
                        Return CType(row("State"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("State"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("State", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("State") = value
 
			End Set
		End Property

		public Overridable Property AccountStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("AccountStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("AccountStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("AccountStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("AccountStatus") = value
 
			End Set
		End Property

		public Overridable Property Deposit() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Deposit") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Deposit"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("Deposit"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Deposit", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("Deposit") = DBNull.Value
				Else
					row("Deposit") = value.Value
				End If
 
			End Set
		End Property




	    Private _TB_Bookings As ShippingBiz.TB_BookingCollection = Nothing
	
		Friend Sub refreshTB_Bookings()
			If _TB_Bookings Is Nothing Then _TB_Bookings = New ShippingBiz.TB_BookingCollection()
			
			Dim tmp as IList = _TB_Bookings
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("ClientIDTB_Booking")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_Booking(MyBase.DataContext, chld)
				_TB_Bookings.Add(obj)
			Next

			_TB_Bookings.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_Bookings() As ShippingBiz.TB_BookingCollection
			Get 
				If _TB_Bookings Is Nothing Then
					 refreshTB_Bookings()
				End If
 
				Return _TB_Bookings
			End Get
		End Property


			public Overridable Function AddTB_Booking(ByVal NewTB_Booking As ShippingBiz.TB_Booking) As Integer
				If _TB_Bookings Is Nothing Then
					 refreshTB_Bookings()
				End If
 
				NewTB_Booking.row.SetParentRow(row,MyBase.DataSet.Relations("ClientIDTB_Booking"))
 
				 _TB_Bookings.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_Bookings.Add(NewTB_Booking) 
 
				 _TB_Bookings.Parent = Me
 
				_TB_Bookings.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_Booking() As ShippingBiz.TB_Booking
				If _TB_Bookings Is Nothing Then
					 refreshTB_Bookings()
				End If
 
				Dim _TB_Booking As New ShippingBiz.TB_Booking(MyBase.DataContext,MyBase.DataSet.Tables("TB_Booking").NewRow()) 
				MyBase.DataSet.Tables("TB_Booking").Rows.Add(_TB_Booking.row)
 
				Me.AddTB_Booking(_TB_Booking)
 
				Return _TB_Booking
			End Function
	    Private _TB_InwardBLSs As ShippingBiz.TB_InwardBLSCollection = Nothing
	
		Friend Sub refreshTB_InwardBLSs()
			If _TB_InwardBLSs Is Nothing Then _TB_InwardBLSs = New ShippingBiz.TB_InwardBLSCollection()
			
			Dim tmp as IList = _TB_InwardBLSs
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("ClientIDTB_InwardBLS")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardBLS(MyBase.DataContext, chld)
				_TB_InwardBLSs.Add(obj)
			Next

			_TB_InwardBLSs.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardBLSs() As ShippingBiz.TB_InwardBLSCollection
			Get 
				If _TB_InwardBLSs Is Nothing Then
					 refreshTB_InwardBLSs()
				End If
 
				Return _TB_InwardBLSs
			End Get
		End Property


			public Overridable Function AddTB_InwardBLS(ByVal NewTB_InwardBLS As ShippingBiz.TB_InwardBLS) As Integer
				If _TB_InwardBLSs Is Nothing Then
					 refreshTB_InwardBLSs()
				End If
 
				NewTB_InwardBLS.row.SetParentRow(row,MyBase.DataSet.Relations("ClientIDTB_InwardBLS"))
 
				 _TB_InwardBLSs.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardBLSs.Add(NewTB_InwardBLS) 
 
				 _TB_InwardBLSs.Parent = Me
 
				_TB_InwardBLSs.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardBLS() As ShippingBiz.TB_InwardBLS
				If _TB_InwardBLSs Is Nothing Then
					 refreshTB_InwardBLSs()
				End If
 
				Dim _TB_InwardBLS As New ShippingBiz.TB_InwardBLS(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardBLS").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardBLS").Rows.Add(_TB_InwardBLS.row)
 
				Me.AddTB_InwardBLS(_TB_InwardBLS)
 
				Return _TB_InwardBLS
			End Function
	    Private _TB_OutwardBLSs As ShippingBiz.TB_OutwardBLSCollection = Nothing
	
		Friend Sub refreshTB_OutwardBLSs()
			If _TB_OutwardBLSs Is Nothing Then _TB_OutwardBLSs = New ShippingBiz.TB_OutwardBLSCollection()
			
			Dim tmp as IList = _TB_OutwardBLSs
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("ClientIDTB_OutwardBLS")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardBLS(MyBase.DataContext, chld)
				_TB_OutwardBLSs.Add(obj)
			Next

			_TB_OutwardBLSs.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardBLSs() As ShippingBiz.TB_OutwardBLSCollection
			Get 
				If _TB_OutwardBLSs Is Nothing Then
					 refreshTB_OutwardBLSs()
				End If
 
				Return _TB_OutwardBLSs
			End Get
		End Property


			public Overridable Function AddTB_OutwardBLS(ByVal NewTB_OutwardBLS As ShippingBiz.TB_OutwardBLS) As Integer
				If _TB_OutwardBLSs Is Nothing Then
					 refreshTB_OutwardBLSs()
				End If
 
				NewTB_OutwardBLS.row.SetParentRow(row,MyBase.DataSet.Relations("ClientIDTB_OutwardBLS"))
 
				 _TB_OutwardBLSs.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardBLSs.Add(NewTB_OutwardBLS) 
 
				 _TB_OutwardBLSs.Parent = Me
 
				_TB_OutwardBLSs.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardBLS() As ShippingBiz.TB_OutwardBLS
				If _TB_OutwardBLSs Is Nothing Then
					 refreshTB_OutwardBLSs()
				End If
 
				Dim _TB_OutwardBLS As New ShippingBiz.TB_OutwardBLS(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardBLS").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardBLS").Rows.Add(_TB_OutwardBLS.row)
 
				Me.AddTB_OutwardBLS(_TB_OutwardBLS)
 
				Return _TB_OutwardBLS
			End Function


	End Class

 
	Public MustInherit Class TB_ClusesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CluseGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CluseGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CluseGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CluseGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CluseGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CluseGroup") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property Detail() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Detail")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Detail"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Detail"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Detail", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Detail") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_CODEOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property GroupCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("GroupCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("GroupCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("GroupCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("GroupCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("GroupCode") = value
 
			End Set
		End Property

		public Overridable Property STDCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("STDCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("STDCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("STDCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("STDCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("STDCode") = value
 
			End Set
		End Property

		public Overridable Property NextCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("NextCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("NextCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("NextCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("NextCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("NextCode") = value
 
			End Set
		End Property

		public Overridable Property MEANING() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MEANING")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MEANING"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MEANING"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MEANING", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MEANING") = value
 
			End Set
		End Property

		public Overridable Property MEANINGF() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MEANINGF")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MEANINGF"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MEANINGF"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MEANINGF", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MEANINGF") = value
 
			End Set
		End Property

		public Overridable Property IsEditeble() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsEditeble") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsEditeble"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsEditeble"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsEditeble", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsEditeble") = DBNull.Value
				Else
					row("IsEditeble") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_CodeMaster() as ShippingBiz.TB_CodeMaster 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("GroupCodeTB_CODE")) is nothing
					return new ShippingBiz.TB_CodeMaster( DataContext, row.GetParentRow("GroupCodeTB_CODE"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_CodeMaster )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("GroupCodeTB_CODE") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("GroupCodeTB_CODE") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_CodeMasterOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property GroupCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("GroupCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("GroupCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("GroupCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("GroupCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("GroupCode") = value
 
			End Set
		End Property

		public Overridable Property GroupName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("GroupName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("GroupName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("GroupName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("GroupName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("GroupName") = value
 
			End Set
		End Property

		public Overridable Property IsSystemCode() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsSystemCode") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsSystemCode"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsSystemCode"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsSystemCode", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsSystemCode") = DBNull.Value
				Else
					row("IsSystemCode") = value.Value
				End If
 
			End Set
		End Property




	    Private _TB_CODEs As ShippingBiz.TB_CODECollection = Nothing
	
		Friend Sub refreshTB_CODEs()
			If _TB_CODEs Is Nothing Then _TB_CODEs = New ShippingBiz.TB_CODECollection()
			
			Dim tmp as IList = _TB_CODEs
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("GroupCodeTB_CODE")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_CODE(MyBase.DataContext, chld)
				_TB_CODEs.Add(obj)
			Next

			_TB_CODEs.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_CODEs() As ShippingBiz.TB_CODECollection
			Get 
				If _TB_CODEs Is Nothing Then
					 refreshTB_CODEs()
				End If
 
				Return _TB_CODEs
			End Get
		End Property


			public Overridable Function AddTB_CODE(ByVal NewTB_CODE As ShippingBiz.TB_CODE) As Integer
				If _TB_CODEs Is Nothing Then
					 refreshTB_CODEs()
				End If
 
				NewTB_CODE.row.SetParentRow(row,MyBase.DataSet.Relations("GroupCodeTB_CODE"))
 
				 _TB_CODEs.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_CODEs.Add(NewTB_CODE) 
 
				 _TB_CODEs.Parent = Me
 
				_TB_CODEs.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_CODE() As ShippingBiz.TB_CODE
				If _TB_CODEs Is Nothing Then
					 refreshTB_CODEs()
				End If
 
				Dim _TB_CODE As New ShippingBiz.TB_CODE(MyBase.DataContext,MyBase.DataSet.Tables("TB_CODE").NewRow()) 
				MyBase.DataSet.Tables("TB_CODE").Rows.Add(_TB_CODE.row)
 
				Me.AddTB_CODE(_TB_CODE)
 
				Return _TB_CODE
			End Function


	End Class

 
	Public MustInherit Class TB_CompanyOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CompanyName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyName") = value
 
			End Set
		End Property

		public Overridable Property CompanyAddress() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyAddress")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyAddress"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyAddress"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyAddress", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyAddress") = value
 
			End Set
		End Property

		public Overridable Property Tel() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Tel")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Tel"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Tel"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Tel", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Tel") = value
 
			End Set
		End Property

		public Overridable Property Fax() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Fax")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Fax"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Fax"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Fax", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Fax") = value
 
			End Set
		End Property

		public Overridable Property EDICODE() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EDICODE")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EDICODE"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EDICODE"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EDICODE", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EDICODE") = value
 
			End Set
		End Property

		public Overridable Property DomainName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DomainName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DomainName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DomainName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DomainName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DomainName") = value
 
			End Set
		End Property

		public Overridable Property POP3() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POP3")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POP3"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POP3"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POP3", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POP3") = value
 
			End Set
		End Property

		public Overridable Property SMTP() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SMTP")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SMTP"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SMTP"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SMTP", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SMTP") = value
 
			End Set
		End Property

		public Overridable Property CompanyFName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyFName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyFName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyFName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyFName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyFName") = value
 
			End Set
		End Property

		public Overridable Property CompantFAddress() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompantFAddress")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompantFAddress"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompantFAddress"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompantFAddress", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompantFAddress") = value
 
			End Set
		End Property

		public Overridable Property CompanyFTel() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyFTel")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyFTel"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyFTel"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyFTel", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyFTel") = value
 
			End Set
		End Property

		public Overridable Property CompanyFFax() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyFFax")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyFFax"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyFFax"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyFFax", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyFFax") = value
 
			End Set
		End Property

		public Overridable Property CompanyAccount() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyAccount")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyAccount"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyAccount"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyAccount", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyAccount") = value
 
			End Set
		End Property

		public Overridable Property DetentionBySlab() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DetentionBySlab") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("DetentionBySlab"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("DetentionBySlab"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("DetentionBySlab", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("DetentionBySlab") = DBNull.Value
				Else
					row("DetentionBySlab") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property POBOX() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POBOX")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POBOX"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POBOX"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POBOX", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POBOX") = value
 
			End Set
		End Property

		public Overridable Property RegestrationNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RegestrationNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RegestrationNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RegestrationNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RegestrationNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RegestrationNo") = value
 
			End Set
		End Property

		public Overridable Property EconomicNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EconomicNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EconomicNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EconomicNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EconomicNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EconomicNo") = value
 
			End Set
		End Property

		public Overridable Property SOCEDICode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SOCEDICode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOCEDICode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SOCEDICode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOCEDICode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SOCEDICode") = value
 
			End Set
		End Property

		public Overridable Property CompanyBranchAdrs() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyBranchAdrs")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyBranchAdrs"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyBranchAdrs"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyBranchAdrs", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyBranchAdrs") = value
 
			End Set
		End Property

		public Overridable Property CompanyLBranchAdrs() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CompanyLBranchAdrs")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyLBranchAdrs"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CompanyLBranchAdrs"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CompanyLBranchAdrs", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CompanyLBranchAdrs") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_CountryOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property CountryCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CountryCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CountryCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CountryCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CountryCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CountryCode") = value
 
			End Set
		End Property

		public Overridable Property CountryName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CountryName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CountryName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CountryName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CountryName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CountryName") = value
 
			End Set
		End Property

		public Overridable Property FCountryName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FCountryName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCountryName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FCountryName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCountryName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FCountryName") = value
 
			End Set
		End Property

		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_CustomMenuOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property MenuGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MenuGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MenuGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MenuGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MenuGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MenuGroup") = value
 
			End Set
		End Property

		public Overridable Property MenuItem() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MenuItem")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MenuItem"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MenuItem"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MenuItem", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MenuItem") = value
 
			End Set
		End Property

		public Overridable Property FormName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FormName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FormName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FormName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FormName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FormName") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_DamageOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property ReportDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ReportDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ReportDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ReportDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ReportDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ReportDate") = DBNull.Value
				Else
					row("ReportDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property DamageOn() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DamageOn")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DamageOn"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DamageOn"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DamageOn", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DamageOn") = value
 
			End Set
		End Property

		public Overridable Property RepairShop() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RepairShop")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RepairShop"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RepairShop"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RepairShop", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RepairShop") = value
 
			End Set
		End Property

		public Overridable Property StartRepair() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("StartRepair") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StartRepair"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("StartRepair"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StartRepair", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("StartRepair") = DBNull.Value
				Else
					row("StartRepair") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FinishedRepair() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FinishedRepair") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FinishedRepair"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("FinishedRepair"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FinishedRepair", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("FinishedRepair") = DBNull.Value
				Else
					row("FinishedRepair") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property RepairCost() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("RepairCost") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("RepairCost"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("RepairCost"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("RepairCost", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("RepairCost") = DBNull.Value
				Else
					row("RepairCost") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property InvoiceTo() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("InvoiceTo"),System.Guid)
				Else
					return CType( row("InvoiceTo", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("InvoiceTo") = value
 
			End Set
		End Property

		public Overridable Property InvoiceAmount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("InvoiceAmount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("InvoiceAmount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("InvoiceAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("InvoiceAmount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("InvoiceAmount") = DBNull.Value
				Else
					row("InvoiceAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property InvCurrency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InvCurrency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvCurrency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InvCurrency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvCurrency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InvCurrency") = value
 
			End Set
		End Property


		
		public Overridable Property TB_EcsContainers() as ShippingBiz.TB_EcsContainers 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_Damage")) is nothing
					return new ShippingBiz.TB_EcsContainers( DataContext, row.GetParentRow("CntrIDTB_Damage"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_EcsContainers )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_Damage") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_Damage") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_DepositsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property ChargesCodes() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCodes")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCodes"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCodes"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCodes", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCodes") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReturnBackDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ReturnBackDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ReturnBackDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ReturnBackDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ReturnBackDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ReturnBackDate") = DBNull.Value
				Else
					row("ReturnBackDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReturnBackAmount() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ReturnBackAmount") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ReturnBackAmount"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("ReturnBackAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ReturnBackAmount", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("ReturnBackAmount") = DBNull.Value
				Else
					row("ReturnBackAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReturnBackRef() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReturnBackRef")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReturnBackRef"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReturnBackRef"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReturnBackRef", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReturnBackRef") = value
 
			End Set
		End Property

		public Overridable Property PaidRef() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaidRef")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaidRef"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaidRef") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_DetentionBaseOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ImpExp() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ImpExp")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ImpExp"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ImpExp"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ImpExp", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ImpExp") = value
 
			End Set
		End Property

		public Overridable Property ApplyDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ApplyDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ApplyDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ApplyDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ApplyDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ApplyDate") = DBNull.Value
				Else
					row("ApplyDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Validity() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Validity") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Validity"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Validity"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Validity", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Validity") = DBNull.Value
				Else
					row("Validity") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Tax() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Tax") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Tax"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("Tax"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Tax", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("Tax") = DBNull.Value
				Else
					row("Tax") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Toll() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Toll") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Toll"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("Toll"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Toll", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("Toll") = DBNull.Value
				Else
					row("Toll") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IsBase() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IsBase")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsBase"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IsBase"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IsBase", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IsBase") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Clause() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Clause")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Clause"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Clause"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Clause", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Clause") = value
 
			End Set
		End Property

		public Overridable Property FClause() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FClause")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FClause"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FClause"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FClause", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FClause") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property




	    Private _TB_DetentionBaseDetailss As ShippingBiz.TB_DetentionBaseDetailsCollection = Nothing
	
		Friend Sub refreshTB_DetentionBaseDetailss()
			If _TB_DetentionBaseDetailss Is Nothing Then _TB_DetentionBaseDetailss = New ShippingBiz.TB_DetentionBaseDetailsCollection()
			
			Dim tmp as IList = _TB_DetentionBaseDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BaseIDTB_DetentionBaseDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_DetentionBaseDetails(MyBase.DataContext, chld)
				_TB_DetentionBaseDetailss.Add(obj)
			Next

			_TB_DetentionBaseDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_DetentionBaseDetailss() As ShippingBiz.TB_DetentionBaseDetailsCollection
			Get 
				If _TB_DetentionBaseDetailss Is Nothing Then
					 refreshTB_DetentionBaseDetailss()
				End If
 
				Return _TB_DetentionBaseDetailss
			End Get
		End Property


			public Overridable Function AddTB_DetentionBaseDetails(ByVal NewTB_DetentionBaseDetails As ShippingBiz.TB_DetentionBaseDetails) As Integer
				If _TB_DetentionBaseDetailss Is Nothing Then
					 refreshTB_DetentionBaseDetailss()
				End If
 
				NewTB_DetentionBaseDetails.row.SetParentRow(row,MyBase.DataSet.Relations("BaseIDTB_DetentionBaseDetails"))
 
				 _TB_DetentionBaseDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_DetentionBaseDetailss.Add(NewTB_DetentionBaseDetails) 
 
				 _TB_DetentionBaseDetailss.Parent = Me
 
				_TB_DetentionBaseDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_DetentionBaseDetails() As ShippingBiz.TB_DetentionBaseDetails
				If _TB_DetentionBaseDetailss Is Nothing Then
					 refreshTB_DetentionBaseDetailss()
				End If
 
				Dim _TB_DetentionBaseDetails As New ShippingBiz.TB_DetentionBaseDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_DetentionBaseDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_DetentionBaseDetails").Rows.Add(_TB_DetentionBaseDetails.row)
 
				Me.AddTB_DetentionBaseDetails(_TB_DetentionBaseDetails)
 
				Return _TB_DetentionBaseDetails
			End Function


	End Class

 
	Public MustInherit Class TB_DetentionBaseDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BaseID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BaseID"),System.Guid)
				Else
					return CType( row("BaseID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BaseID") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property DayFrom() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DayFrom") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("DayFrom"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("DayFrom"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("DayFrom", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("DayFrom") = DBNull.Value
				Else
					row("DayFrom") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DayTo() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DayTo") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("DayTo"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("DayTo"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("DayTo", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("DayTo") = DBNull.Value
				Else
					row("DayTo") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount20() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount20") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount20"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount20"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount20", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount20") = DBNull.Value
				Else
					row("Amount20") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount40() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount40") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount40"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount40"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount40", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount40") = DBNull.Value
				Else
					row("Amount40") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount45() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount45") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount45"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount45"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount45", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount45") = DBNull.Value
				Else
					row("Amount45") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_DetentionBase() as ShippingBiz.TB_DetentionBase 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BaseIDTB_DetentionBaseDetails")) is nothing
					return new ShippingBiz.TB_DetentionBase( DataContext, row.GetParentRow("BaseIDTB_DetentionBaseDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_DetentionBase )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BaseIDTB_DetentionBaseDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BaseIDTB_DetentionBaseDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_DocumetsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property LineCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LineCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LineCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LineCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LineCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LineCode") = value
 
			End Set
		End Property

		public Overridable Property DocumentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DocumentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DocumentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DocumentType") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property FreeDocument() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FreeDocument")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FreeDocument"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FreeDocument"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FreeDocument", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FreeDocument") = value
 
			End Set
		End Property

		public Overridable Property PaperSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaperSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaperSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaperSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaperSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaperSize") = value
 
			End Set
		End Property




	    Private _TB_DocumetsDetails As ShippingBiz.TB_DocumetsDetailCollection = Nothing
	
		Friend Sub refreshTB_DocumetsDetails()
			If _TB_DocumetsDetails Is Nothing Then _TB_DocumetsDetails = New ShippingBiz.TB_DocumetsDetailCollection()
			
			Dim tmp as IList = _TB_DocumetsDetails
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("DocumentIDTB_DocumetsDetail")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_DocumetsDetail(MyBase.DataContext, chld)
				_TB_DocumetsDetails.Add(obj)
			Next

			_TB_DocumetsDetails.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_DocumetsDetails() As ShippingBiz.TB_DocumetsDetailCollection
			Get 
				If _TB_DocumetsDetails Is Nothing Then
					 refreshTB_DocumetsDetails()
				End If
 
				Return _TB_DocumetsDetails
			End Get
		End Property


			public Overridable Function AddTB_DocumetsDetail(ByVal NewTB_DocumetsDetail As ShippingBiz.TB_DocumetsDetail) As Integer
				If _TB_DocumetsDetails Is Nothing Then
					 refreshTB_DocumetsDetails()
				End If
 
				NewTB_DocumetsDetail.row.SetParentRow(row,MyBase.DataSet.Relations("DocumentIDTB_DocumetsDetail"))
 
				 _TB_DocumetsDetails.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_DocumetsDetails.Add(NewTB_DocumetsDetail) 
 
				 _TB_DocumetsDetails.Parent = Me
 
				_TB_DocumetsDetails.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_DocumetsDetail() As ShippingBiz.TB_DocumetsDetail
				If _TB_DocumetsDetails Is Nothing Then
					 refreshTB_DocumetsDetails()
				End If
 
				Dim _TB_DocumetsDetail As New ShippingBiz.TB_DocumetsDetail(MyBase.DataContext,MyBase.DataSet.Tables("TB_DocumetsDetail").NewRow()) 
				MyBase.DataSet.Tables("TB_DocumetsDetail").Rows.Add(_TB_DocumetsDetail.row)
 
				Me.AddTB_DocumetsDetail(_TB_DocumetsDetail)
 
				Return _TB_DocumetsDetail
			End Function


	End Class

 
	Public MustInherit Class TB_DocumetsDetailOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property DocumentID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("DocumentID"),System.Guid)
				Else
					return CType( row("DocumentID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("DocumentID") = value
 
			End Set
		End Property

		public Overridable Property FieldDescription() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FieldDescription")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldDescription"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FieldDescription"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldDescription", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FieldDescription") = value
 
			End Set
		End Property

		public Overridable Property FieldName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FieldName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FieldName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FieldName") = value
 
			End Set
		End Property

		public Overridable Property Visible() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Visible") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Visible"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("Visible"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("Visible", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("Visible") = DBNull.Value
				Else
					row("Visible") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property nTop() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("nTop") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nTop"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("nTop"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nTop", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("nTop") = DBNull.Value
				Else
					row("nTop") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property nLeft() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("nLeft") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nLeft"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("nLeft"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nLeft", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("nLeft") = DBNull.Value
				Else
					row("nLeft") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property nHight() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("nHight") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nHight"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("nHight"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nHight", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("nHight") = DBNull.Value
				Else
					row("nHight") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property nWidth() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("nWidth") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nWidth"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("nWidth"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("nWidth", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("nWidth") = DBNull.Value
				Else
					row("nWidth") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FontName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FontName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FontName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FontName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FontName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FontName") = value
 
			End Set
		End Property

		public Overridable Property FontSize() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FontSize") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FontSize"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FontSize"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FontSize", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FontSize") = DBNull.Value
				Else
					row("FontSize") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FontItalic() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FontItalic") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontItalic"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("FontItalic"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontItalic", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("FontItalic") = DBNull.Value
				Else
					row("FontItalic") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FontUnderLine() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FontUnderLine") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontUnderLine"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("FontUnderLine"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontUnderLine", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("FontUnderLine") = DBNull.Value
				Else
					row("FontUnderLine") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FontBold() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FontBold") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontBold"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("FontBold"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontBold", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("FontBold") = DBNull.Value
				Else
					row("FontBold") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FontStrickOut() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FontStrickOut") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontStrickOut"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("FontStrickOut"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("FontStrickOut", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("FontStrickOut") = DBNull.Value
				Else
					row("FontStrickOut") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_Documets() as ShippingBiz.TB_Documets 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("DocumentIDTB_DocumetsDetail")) is nothing
					return new ShippingBiz.TB_Documets( DataContext, row.GetParentRow("DocumentIDTB_DocumetsDetail"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Documets )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("DocumentIDTB_DocumetsDetail") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("DocumentIDTB_DocumetsDetail") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_EcsContainersOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property InVoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("InVoyageID"),System.Guid)
				Else
					return CType( row("InVoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("InVoyageID") = value
 
			End Set
		End Property

		public Overridable Property CntrNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CntrNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CntrNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CntrNo") = value
 
			End Set
		End Property

		public Overridable Property CnSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnSize") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property DischargeTo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DischargeTo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DischargeTo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DischargeTo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DischargeTo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DischargeTo") = value
 
			End Set
		End Property

		public Overridable Property InStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InStatus") = value
 
			End Set
		End Property

		public Overridable Property InCellNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InCellNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InCellNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InCellNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InCellNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InCellNo") = value
 
			End Set
		End Property

		public Overridable Property BookingID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BookingID"),System.Guid)
				Else
					return CType( row("BookingID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BookingID") = value
 
			End Set
		End Property

		public Overridable Property OutVoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("OutVoyageID"),System.Guid)
				Else
					return CType( row("OutVoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("OutVoyageID") = value
 
			End Set
		End Property

		public Overridable Property OutStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("OutStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("OutStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("OutStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("OutStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("OutStatus") = value
 
			End Set
		End Property

		public Overridable Property OutCellNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("OutCellNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("OutCellNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("OutCellNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("OutCellNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("OutCellNo") = value
 
			End Set
		End Property

		public Overridable Property ReturnTo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReturnTo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReturnTo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReturnTo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReturnTo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReturnTo") = value
 
			End Set
		End Property

		public Overridable Property Destination() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Destination")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Destination"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Destination"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Destination", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Destination") = value
 
			End Set
		End Property

		public Overridable Property LastDepot() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LastDepot")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastDepot"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LastDepot"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastDepot", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LastDepot") = value
 
			End Set
		End Property

		public Overridable Property LastStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LastStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LastStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LastStatus") = value
 
			End Set
		End Property

		public Overridable Property LastStatusDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("LastStatusDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LastStatusDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("LastStatusDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LastStatusDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("LastStatusDate") = DBNull.Value
				Else
					row("LastStatusDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IsTerminate() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsTerminate") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsTerminate"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsTerminate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsTerminate", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsTerminate") = DBNull.Value
				Else
					row("IsTerminate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ExportPermit() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ExportPermit")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ExportPermit"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ExportPermit"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ExportPermit", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ExportPermit") = value
 
			End Set
		End Property

		public Overridable Property InDjwazNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InDjwazNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InDjwazNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InDjwazNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InDjwazNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InDjwazNo") = value
 
			End Set
		End Property

		public Overridable Property SOC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SOC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SOC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SOC") = value
 
			End Set
		End Property

		public Overridable Property SpecialOpr() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SpecialOpr")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SpecialOpr"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SpecialOpr"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SpecialOpr", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SpecialOpr") = value
 
			End Set
		End Property


		
		public Overridable Property TB_Booking() as ShippingBiz.TB_Booking 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BookingIDTB_EcsContainers")) is nothing
					return new ShippingBiz.TB_Booking( DataContext, row.GetParentRow("BookingIDTB_EcsContainers"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Booking )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BookingIDTB_EcsContainers") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BookingIDTB_EcsContainers") )		
				End If
			end set
		end property
	

		
		public Overridable Property TB_Voyage() as ShippingBiz.TB_Voyage 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("InVoyageIDTB_EcsContainers")) is nothing
					return new ShippingBiz.TB_Voyage( DataContext, row.GetParentRow("InVoyageIDTB_EcsContainers"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Voyage )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("InVoyageIDTB_EcsContainers") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("InVoyageIDTB_EcsContainers") )		
				End If
			end set
		end property
	



	    Private _TB_Damages As ShippingBiz.TB_DamageCollection = Nothing
	
		Friend Sub refreshTB_Damages()
			If _TB_Damages Is Nothing Then _TB_Damages = New ShippingBiz.TB_DamageCollection()
			
			Dim tmp as IList = _TB_Damages
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_Damage")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_Damage(MyBase.DataContext, chld)
				_TB_Damages.Add(obj)
			Next

			_TB_Damages.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_Damages() As ShippingBiz.TB_DamageCollection
			Get 
				If _TB_Damages Is Nothing Then
					 refreshTB_Damages()
				End If
 
				Return _TB_Damages
			End Get
		End Property


			public Overridable Function AddTB_Damage(ByVal NewTB_Damage As ShippingBiz.TB_Damage) As Integer
				If _TB_Damages Is Nothing Then
					 refreshTB_Damages()
				End If
 
				NewTB_Damage.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_Damage"))
 
				 _TB_Damages.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_Damages.Add(NewTB_Damage) 
 
				 _TB_Damages.Parent = Me
 
				_TB_Damages.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_Damage() As ShippingBiz.TB_Damage
				If _TB_Damages Is Nothing Then
					 refreshTB_Damages()
				End If
 
				Dim _TB_Damage As New ShippingBiz.TB_Damage(MyBase.DataContext,MyBase.DataSet.Tables("TB_Damage").NewRow()) 
				MyBase.DataSet.Tables("TB_Damage").Rows.Add(_TB_Damage.row)
 
				Me.AddTB_Damage(_TB_Damage)
 
				Return _TB_Damage
			End Function
	    Private _TB_EcsMovess As ShippingBiz.TB_EcsMovesCollection = Nothing
	
		Friend Sub refreshTB_EcsMovess()
			If _TB_EcsMovess Is Nothing Then _TB_EcsMovess = New ShippingBiz.TB_EcsMovesCollection()
			
			Dim tmp as IList = _TB_EcsMovess
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_EcsMoves")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_EcsMoves(MyBase.DataContext, chld)
				_TB_EcsMovess.Add(obj)
			Next

			_TB_EcsMovess.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_EcsMovess() As ShippingBiz.TB_EcsMovesCollection
			Get 
				If _TB_EcsMovess Is Nothing Then
					 refreshTB_EcsMovess()
				End If
 
				Return _TB_EcsMovess
			End Get
		End Property


			public Overridable Function AddTB_EcsMoves(ByVal NewTB_EcsMoves As ShippingBiz.TB_EcsMoves) As Integer
				If _TB_EcsMovess Is Nothing Then
					 refreshTB_EcsMovess()
				End If
 
				NewTB_EcsMoves.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_EcsMoves"))
 
				 _TB_EcsMovess.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_EcsMovess.Add(NewTB_EcsMoves) 
 
				 _TB_EcsMovess.Parent = Me
 
				_TB_EcsMovess.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_EcsMoves() As ShippingBiz.TB_EcsMoves
				If _TB_EcsMovess Is Nothing Then
					 refreshTB_EcsMovess()
				End If
 
				Dim _TB_EcsMoves As New ShippingBiz.TB_EcsMoves(MyBase.DataContext,MyBase.DataSet.Tables("TB_EcsMoves").NewRow()) 
				MyBase.DataSet.Tables("TB_EcsMoves").Rows.Add(_TB_EcsMoves.row)
 
				Me.AddTB_EcsMoves(_TB_EcsMoves)
 
				Return _TB_EcsMoves
			End Function
	    Private _TB_PermitDetailss As ShippingBiz.TB_PermitDetailsCollection = Nothing
	
		Friend Sub refreshTB_PermitDetailss()
			If _TB_PermitDetailss Is Nothing Then _TB_PermitDetailss = New ShippingBiz.TB_PermitDetailsCollection()
			
			Dim tmp as IList = _TB_PermitDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_PermitDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_PermitDetails(MyBase.DataContext, chld)
				_TB_PermitDetailss.Add(obj)
			Next

			_TB_PermitDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_PermitDetailss() As ShippingBiz.TB_PermitDetailsCollection
			Get 
				If _TB_PermitDetailss Is Nothing Then
					 refreshTB_PermitDetailss()
				End If
 
				Return _TB_PermitDetailss
			End Get
		End Property


			public Overridable Function AddTB_PermitDetails(ByVal NewTB_PermitDetails As ShippingBiz.TB_PermitDetails) As Integer
				If _TB_PermitDetailss Is Nothing Then
					 refreshTB_PermitDetailss()
				End If
 
				NewTB_PermitDetails.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_PermitDetails"))
 
				 _TB_PermitDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_PermitDetailss.Add(NewTB_PermitDetails) 
 
				 _TB_PermitDetailss.Parent = Me
 
				_TB_PermitDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_PermitDetails() As ShippingBiz.TB_PermitDetails
				If _TB_PermitDetailss Is Nothing Then
					 refreshTB_PermitDetailss()
				End If
 
				Dim _TB_PermitDetails As New ShippingBiz.TB_PermitDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_PermitDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_PermitDetails").Rows.Add(_TB_PermitDetails.row)
 
				Me.AddTB_PermitDetails(_TB_PermitDetails)
 
				Return _TB_PermitDetails
			End Function


	End Class

 
	Public MustInherit Class TB_EcsMovesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property StatusDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("StatusDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StatusDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("StatusDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StatusDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("StatusDate") = DBNull.Value
				Else
					row("StatusDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property StatusDateToLine() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("StatusDateToLine") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StatusDateToLine"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("StatusDateToLine"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StatusDateToLine", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("StatusDateToLine") = DBNull.Value
				Else
					row("StatusDateToLine") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Depot() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Depot")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Depot"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Depot"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Depot", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Depot") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property IsReported() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsReported") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsReported"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsReported"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsReported", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsReported") = DBNull.Value
				Else
					row("IsReported") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_EcsContainers() as ShippingBiz.TB_EcsContainers 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_EcsMoves")) is nothing
					return new ShippingBiz.TB_EcsContainers( DataContext, row.GetParentRow("CntrIDTB_EcsMoves"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_EcsContainers )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_EcsMoves") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_EcsMoves") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_EcsReserveContainersOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CntrNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CntrNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CntrNo") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_EventMailOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property EventCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EventCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EventCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EventCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EventCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EventCode") = value
 
			End Set
		End Property

		public Overridable Property MailTo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailTo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailTo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailTo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailTo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailTo") = value
 
			End Set
		End Property

		public Overridable Property MailCC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailCC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailCC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailCC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailCC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailCC") = value
 
			End Set
		End Property

		public Overridable Property MailBCC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailBCC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailBCC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailBCC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailBCC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailBCC") = value
 
			End Set
		End Property

		public Overridable Property PORT() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PORT")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PORT"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PORT"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PORT", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PORT") = value
 
			End Set
		End Property

		public Overridable Property HTMLContent() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("HTMLContent")) Then
                        Return vbNullString
                    Else
                        Return CType(row("HTMLContent"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("HTMLContent"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("HTMLContent", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("HTMLContent") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_ExchangeOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ExchangeDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ExchangeDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ExchangeDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ExchangeDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ExchangeDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ExchangeDate") = DBNull.Value
				Else
					row("ExchangeDate") = value.Value
				End If
 
			End Set
		End Property




	    Private _TB_ExchangeDetailss As ShippingBiz.TB_ExchangeDetailsCollection = Nothing
	
		Friend Sub refreshTB_ExchangeDetailss()
			If _TB_ExchangeDetailss Is Nothing Then _TB_ExchangeDetailss = New ShippingBiz.TB_ExchangeDetailsCollection()
			
			Dim tmp as IList = _TB_ExchangeDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("MasterIDTB_ExchangeDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_ExchangeDetails(MyBase.DataContext, chld)
				_TB_ExchangeDetailss.Add(obj)
			Next

			_TB_ExchangeDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_ExchangeDetailss() As ShippingBiz.TB_ExchangeDetailsCollection
			Get 
				If _TB_ExchangeDetailss Is Nothing Then
					 refreshTB_ExchangeDetailss()
				End If
 
				Return _TB_ExchangeDetailss
			End Get
		End Property


			public Overridable Function AddTB_ExchangeDetails(ByVal NewTB_ExchangeDetails As ShippingBiz.TB_ExchangeDetails) As Integer
				If _TB_ExchangeDetailss Is Nothing Then
					 refreshTB_ExchangeDetailss()
				End If
 
				NewTB_ExchangeDetails.row.SetParentRow(row,MyBase.DataSet.Relations("MasterIDTB_ExchangeDetails"))
 
				 _TB_ExchangeDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_ExchangeDetailss.Add(NewTB_ExchangeDetails) 
 
				 _TB_ExchangeDetailss.Parent = Me
 
				_TB_ExchangeDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_ExchangeDetails() As ShippingBiz.TB_ExchangeDetails
				If _TB_ExchangeDetailss Is Nothing Then
					 refreshTB_ExchangeDetailss()
				End If
 
				Dim _TB_ExchangeDetails As New ShippingBiz.TB_ExchangeDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_ExchangeDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_ExchangeDetails").Rows.Add(_TB_ExchangeDetails.row)
 
				Me.AddTB_ExchangeDetails(_TB_ExchangeDetails)
 
				Return _TB_ExchangeDetails
			End Function


	End Class

 
	Public MustInherit Class TB_ExchangeDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property MasterID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("MasterID"),System.Guid)
				Else
					return CType( row("MasterID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("MasterID") = value
 
			End Set
		End Property

		public Overridable Property CurCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CurCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CurCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CurCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CurCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CurCode") = value
 
			End Set
		End Property

		public Overridable Property THCRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("THCRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("THCRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("THCRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("THCRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("THCRate") = DBNull.Value
				Else
					row("THCRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FRTRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FRTRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("FRTRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("FRTRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("FRTRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("FRTRate") = DBNull.Value
				Else
					row("FRTRate") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_Exchange() as ShippingBiz.TB_Exchange 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("MasterIDTB_ExchangeDetails")) is nothing
					return new ShippingBiz.TB_Exchange( DataContext, row.GetParentRow("MasterIDTB_ExchangeDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Exchange )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("MasterIDTB_ExchangeDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("MasterIDTB_ExchangeDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_ExpInvoiceOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InvoiceNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InvoiceNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InvoiceNo") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property IssueTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IssueTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("IssueTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("IssueTime") = DBNull.Value
				Else
					row("IssueTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IssueBy() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IssueBy")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueBy"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IssueBy"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueBy", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IssueBy") = value
 
			End Set
		End Property

		public Overridable Property ConfirmTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ConfirmTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ConfirmTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ConfirmTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ConfirmTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ConfirmTime") = DBNull.Value
				Else
					row("ConfirmTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ConfirmBy() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ConfirmBy")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmBy"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ConfirmBy"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmBy", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ConfirmBy") = value
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property IssueOffice() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IssueOffice")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueOffice"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IssueOffice"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueOffice", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IssueOffice") = value
 
			End Set
		End Property

		public Overridable Property ConfirmOffice() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ConfirmOffice")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmOffice"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ConfirmOffice"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmOffice", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ConfirmOffice") = value
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardBLS() as ShippingBiz.TB_OutwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_ExpInvoice")) is nothing
					return new ShippingBiz.TB_OutwardBLS( DataContext, row.GetParentRow("BLIDTB_ExpInvoice"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_ExpInvoice") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_ExpInvoice") )		
				End If
			end set
		end property
	



	    Private _TB_ExpInvoiceDetailss As ShippingBiz.TB_ExpInvoiceDetailsCollection = Nothing
	
		Friend Sub refreshTB_ExpInvoiceDetailss()
			If _TB_ExpInvoiceDetailss Is Nothing Then _TB_ExpInvoiceDetailss = New ShippingBiz.TB_ExpInvoiceDetailsCollection()
			
			Dim tmp as IList = _TB_ExpInvoiceDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("InvoiceIDTB_ExpInvoiceDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_ExpInvoiceDetails(MyBase.DataContext, chld)
				_TB_ExpInvoiceDetailss.Add(obj)
			Next

			_TB_ExpInvoiceDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_ExpInvoiceDetailss() As ShippingBiz.TB_ExpInvoiceDetailsCollection
			Get 
				If _TB_ExpInvoiceDetailss Is Nothing Then
					 refreshTB_ExpInvoiceDetailss()
				End If
 
				Return _TB_ExpInvoiceDetailss
			End Get
		End Property


			public Overridable Function AddTB_ExpInvoiceDetails(ByVal NewTB_ExpInvoiceDetails As ShippingBiz.TB_ExpInvoiceDetails) As Integer
				If _TB_ExpInvoiceDetailss Is Nothing Then
					 refreshTB_ExpInvoiceDetailss()
				End If
 
				NewTB_ExpInvoiceDetails.row.SetParentRow(row,MyBase.DataSet.Relations("InvoiceIDTB_ExpInvoiceDetails"))
 
				 _TB_ExpInvoiceDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_ExpInvoiceDetailss.Add(NewTB_ExpInvoiceDetails) 
 
				 _TB_ExpInvoiceDetailss.Parent = Me
 
				_TB_ExpInvoiceDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_ExpInvoiceDetails() As ShippingBiz.TB_ExpInvoiceDetails
				If _TB_ExpInvoiceDetailss Is Nothing Then
					 refreshTB_ExpInvoiceDetailss()
				End If
 
				Dim _TB_ExpInvoiceDetails As New ShippingBiz.TB_ExpInvoiceDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_ExpInvoiceDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_ExpInvoiceDetails").Rows.Add(_TB_ExpInvoiceDetails.row)
 
				Me.AddTB_ExpInvoiceDetails(_TB_ExpInvoiceDetails)
 
				Return _TB_ExpInvoiceDetails
			End Function
	    Private _TB_ExpRecivedItemss As ShippingBiz.TB_ExpRecivedItemsCollection = Nothing
	
		Friend Sub refreshTB_ExpRecivedItemss()
			If _TB_ExpRecivedItemss Is Nothing Then _TB_ExpRecivedItemss = New ShippingBiz.TB_ExpRecivedItemsCollection()
			
			Dim tmp as IList = _TB_ExpRecivedItemss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("InvoiceIDTB_ExpRecivedItems")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_ExpRecivedItems(MyBase.DataContext, chld)
				_TB_ExpRecivedItemss.Add(obj)
			Next

			_TB_ExpRecivedItemss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_ExpRecivedItemss() As ShippingBiz.TB_ExpRecivedItemsCollection
			Get 
				If _TB_ExpRecivedItemss Is Nothing Then
					 refreshTB_ExpRecivedItemss()
				End If
 
				Return _TB_ExpRecivedItemss
			End Get
		End Property


			public Overridable Function AddTB_ExpRecivedItems(ByVal NewTB_ExpRecivedItems As ShippingBiz.TB_ExpRecivedItems) As Integer
				If _TB_ExpRecivedItemss Is Nothing Then
					 refreshTB_ExpRecivedItemss()
				End If
 
				NewTB_ExpRecivedItems.row.SetParentRow(row,MyBase.DataSet.Relations("InvoiceIDTB_ExpRecivedItems"))
 
				 _TB_ExpRecivedItemss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_ExpRecivedItemss.Add(NewTB_ExpRecivedItems) 
 
				 _TB_ExpRecivedItemss.Parent = Me
 
				_TB_ExpRecivedItemss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_ExpRecivedItems() As ShippingBiz.TB_ExpRecivedItems
				If _TB_ExpRecivedItemss Is Nothing Then
					 refreshTB_ExpRecivedItemss()
				End If
 
				Dim _TB_ExpRecivedItems As New ShippingBiz.TB_ExpRecivedItems(MyBase.DataContext,MyBase.DataSet.Tables("TB_ExpRecivedItems").NewRow()) 
				MyBase.DataSet.Tables("TB_ExpRecivedItems").Rows.Add(_TB_ExpRecivedItems.row)
 
				Me.AddTB_ExpRecivedItems(_TB_ExpRecivedItems)
 
				Return _TB_ExpRecivedItems
			End Function


	End Class

 
	Public MustInherit Class TB_ExpInvoiceDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("InvoiceID"),System.Guid)
				Else
					return CType( row("InvoiceID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("InvoiceID") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IRRAmount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IRRAmount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IRRAmount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("IRRAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IRRAmount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("IRRAmount") = DBNull.Value
				Else
					row("IRRAmount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_ExpInvoice() as ShippingBiz.TB_ExpInvoice 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("InvoiceIDTB_ExpInvoiceDetails")) is nothing
					return new ShippingBiz.TB_ExpInvoice( DataContext, row.GetParentRow("InvoiceIDTB_ExpInvoiceDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_ExpInvoice )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("InvoiceIDTB_ExpInvoiceDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("InvoiceIDTB_ExpInvoiceDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_ExpRecivedItemsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("InvoiceID"),System.Guid)
				Else
					return CType( row("InvoiceID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("InvoiceID") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property PaymentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaymentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaymentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaymentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaymentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaymentType") = value
 
			End Set
		End Property

		public Overridable Property Bank() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Bank")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Bank"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Bank"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Bank", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Bank") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IrrAmount() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IrrAmount") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("IrrAmount"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("IrrAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("IrrAmount", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("IrrAmount") = DBNull.Value
				Else
					row("IrrAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PaidDate() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaidDate")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidDate"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaidDate"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidDate", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaidDate") = value
 
			End Set
		End Property

		public Overridable Property PaidRef() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaidRef")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaidRef"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaidRef") = value
 
			End Set
		End Property

		public Overridable Property ReceivedType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReceivedType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReceivedType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReceivedType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReceivedType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReceivedType") = value
 
			End Set
		End Property


		
		public Overridable Property TB_ExpInvoice() as ShippingBiz.TB_ExpInvoice 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("InvoiceIDTB_ExpRecivedItems")) is nothing
					return new ShippingBiz.TB_ExpInvoice( DataContext, row.GetParentRow("InvoiceIDTB_ExpRecivedItems"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_ExpInvoice )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("InvoiceIDTB_ExpRecivedItems") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("InvoiceIDTB_ExpRecivedItems") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_FaxActionsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property DocumentCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DocumentCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DocumentCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DocumentCode") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property DefualtFaxLine() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DefualtFaxLine")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DefualtFaxLine"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DefualtFaxLine"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DefualtFaxLine", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DefualtFaxLine") = value
 
			End Set
		End Property

		public Overridable Property RecipiantAsTo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RecipiantAsTo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsTo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RecipiantAsTo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsTo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RecipiantAsTo") = value
 
			End Set
		End Property

		public Overridable Property RecipiantAsCC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("RecipiantAsCC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsCC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("RecipiantAsCC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("RecipiantAsCC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("RecipiantAsCC") = value
 
			End Set
		End Property

		public Overridable Property IsInAction() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsInAction") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsInAction"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsInAction"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsInAction", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsInAction") = DBNull.Value
				Else
					row("IsInAction") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ActionID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ActionID"),System.Guid)
				Else
					return CType( row("ActionID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ActionID") = value
 
			End Set
		End Property

		public Overridable Property LastActionTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("LastActionTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LastActionTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("LastActionTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LastActionTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("LastActionTime") = DBNull.Value
				Else
					row("LastActionTime") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_FaxStatusOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property DocumentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DocumentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DocumentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DocumentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DocumentType") = value
 
			End Set
		End Property

		public Overridable Property GenerateDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GenerateDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GenerateDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("GenerateDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GenerateDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("GenerateDate") = DBNull.Value
				Else
					row("GenerateDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SentDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SentDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SentDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("SentDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SentDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("SentDate") = DBNull.Value
				Else
					row("SentDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property IsMailSent() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsMailSent") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsMailSent"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsMailSent"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsMailSent", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsMailSent") = DBNull.Value
				Else
					row("IsMailSent") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FaxLog() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FaxLog")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxLog"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FaxLog"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FaxLog", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FaxLog") = value
 
			End Set
		End Property

		public Overridable Property SavedPath() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SavedPath")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SavedPath"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SavedPath"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SavedPath", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SavedPath") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_InqueryOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ClinetID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ClinetID"),System.Guid)
				Else
					return CType( row("ClinetID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ClinetID") = value
 
			End Set
		End Property

		public Overridable Property InqueryDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("InqueryDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("InqueryDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("InqueryDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("InqueryDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("InqueryDate") = DBNull.Value
				Else
					row("InqueryDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property InqueryValidity() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("InqueryValidity") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("InqueryValidity"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("InqueryValidity"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("InqueryValidity", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("InqueryValidity") = DBNull.Value
				Else
					row("InqueryValidity") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PrincipalReference() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PrincipalReference")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PrincipalReference"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PrincipalReference"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PrincipalReference", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PrincipalReference") = value
 
			End Set
		End Property

		public Overridable Property POL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POL") = value
 
			End Set
		End Property

		public Overridable Property POD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POD") = value
 
			End Set
		End Property




	    Private _TB_InqueryDetailss As ShippingBiz.TB_InqueryDetailsCollection = Nothing
	
		Friend Sub refreshTB_InqueryDetailss()
			If _TB_InqueryDetailss Is Nothing Then _TB_InqueryDetailss = New ShippingBiz.TB_InqueryDetailsCollection()
			
			Dim tmp as IList = _TB_InqueryDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("MasterIDTB_InqueryDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InqueryDetails(MyBase.DataContext, chld)
				_TB_InqueryDetailss.Add(obj)
			Next

			_TB_InqueryDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InqueryDetailss() As ShippingBiz.TB_InqueryDetailsCollection
			Get 
				If _TB_InqueryDetailss Is Nothing Then
					 refreshTB_InqueryDetailss()
				End If
 
				Return _TB_InqueryDetailss
			End Get
		End Property


			public Overridable Function AddTB_InqueryDetails(ByVal NewTB_InqueryDetails As ShippingBiz.TB_InqueryDetails) As Integer
				If _TB_InqueryDetailss Is Nothing Then
					 refreshTB_InqueryDetailss()
				End If
 
				NewTB_InqueryDetails.row.SetParentRow(row,MyBase.DataSet.Relations("MasterIDTB_InqueryDetails"))
 
				 _TB_InqueryDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InqueryDetailss.Add(NewTB_InqueryDetails) 
 
				 _TB_InqueryDetailss.Parent = Me
 
				_TB_InqueryDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InqueryDetails() As ShippingBiz.TB_InqueryDetails
				If _TB_InqueryDetailss Is Nothing Then
					 refreshTB_InqueryDetailss()
				End If
 
				Dim _TB_InqueryDetails As New ShippingBiz.TB_InqueryDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_InqueryDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_InqueryDetails").Rows.Add(_TB_InqueryDetails.row)
 
				Me.AddTB_InqueryDetails(_TB_InqueryDetails)
 
				Return _TB_InqueryDetails
			End Function


	End Class

 
	Public MustInherit Class TB_InqueryDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property MasterID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("MasterID"),System.Guid)
				Else
					return CType( row("MasterID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("MasterID") = value
 
			End Set
		End Property

		public Overridable Property CnSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnSize") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property IsDG() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsDG") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsDG"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsDG"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsDG", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsDG") = DBNull.Value
				Else
					row("IsDG") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Amount"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Amount", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_Inquery() as ShippingBiz.TB_Inquery 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("MasterIDTB_InqueryDetails")) is nothing
					return new ShippingBiz.TB_Inquery( DataContext, row.GetParentRow("MasterIDTB_InqueryDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Inquery )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("MasterIDTB_InqueryDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("MasterIDTB_InqueryDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InvoiceOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InvoiceNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InvoiceNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InvoiceNo") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property IssueTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IssueTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("IssueTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("IssueTime") = DBNull.Value
				Else
					row("IssueTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IssueBy() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IssueBy")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueBy"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IssueBy"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueBy", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IssueBy") = value
 
			End Set
		End Property

		public Overridable Property ConfirmTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ConfirmTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ConfirmTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ConfirmTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ConfirmTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ConfirmTime") = DBNull.Value
				Else
					row("ConfirmTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ConfirmBy() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ConfirmBy")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmBy"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ConfirmBy"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmBy", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ConfirmBy") = value
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property IssueOffice() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IssueOffice")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueOffice"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IssueOffice"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssueOffice", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IssueOffice") = value
 
			End Set
		End Property

		public Overridable Property ConfirmOffice() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ConfirmOffice")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmOffice"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ConfirmOffice"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ConfirmOffice", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ConfirmOffice") = value
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_Invoice")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_Invoice"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_Invoice") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_Invoice") )		
				End If
			end set
		end property
	



	    Private _TB_InvoiceDetailss As ShippingBiz.TB_InvoiceDetailsCollection = Nothing
	
		Friend Sub refreshTB_InvoiceDetailss()
			If _TB_InvoiceDetailss Is Nothing Then _TB_InvoiceDetailss = New ShippingBiz.TB_InvoiceDetailsCollection()
			
			Dim tmp as IList = _TB_InvoiceDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("InvoiceIDTB_InvoiceDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InvoiceDetails(MyBase.DataContext, chld)
				_TB_InvoiceDetailss.Add(obj)
			Next

			_TB_InvoiceDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InvoiceDetailss() As ShippingBiz.TB_InvoiceDetailsCollection
			Get 
				If _TB_InvoiceDetailss Is Nothing Then
					 refreshTB_InvoiceDetailss()
				End If
 
				Return _TB_InvoiceDetailss
			End Get
		End Property


			public Overridable Function AddTB_InvoiceDetails(ByVal NewTB_InvoiceDetails As ShippingBiz.TB_InvoiceDetails) As Integer
				If _TB_InvoiceDetailss Is Nothing Then
					 refreshTB_InvoiceDetailss()
				End If
 
				NewTB_InvoiceDetails.row.SetParentRow(row,MyBase.DataSet.Relations("InvoiceIDTB_InvoiceDetails"))
 
				 _TB_InvoiceDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InvoiceDetailss.Add(NewTB_InvoiceDetails) 
 
				 _TB_InvoiceDetailss.Parent = Me
 
				_TB_InvoiceDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InvoiceDetails() As ShippingBiz.TB_InvoiceDetails
				If _TB_InvoiceDetailss Is Nothing Then
					 refreshTB_InvoiceDetailss()
				End If
 
				Dim _TB_InvoiceDetails As New ShippingBiz.TB_InvoiceDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_InvoiceDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_InvoiceDetails").Rows.Add(_TB_InvoiceDetails.row)
 
				Me.AddTB_InvoiceDetails(_TB_InvoiceDetails)
 
				Return _TB_InvoiceDetails
			End Function
	    Private _TB_RecivedItemss As ShippingBiz.TB_RecivedItemsCollection = Nothing
	
		Friend Sub refreshTB_RecivedItemss()
			If _TB_RecivedItemss Is Nothing Then _TB_RecivedItemss = New ShippingBiz.TB_RecivedItemsCollection()
			
			Dim tmp as IList = _TB_RecivedItemss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("InvoiceIDTB_RecivedItems")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_RecivedItems(MyBase.DataContext, chld)
				_TB_RecivedItemss.Add(obj)
			Next

			_TB_RecivedItemss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_RecivedItemss() As ShippingBiz.TB_RecivedItemsCollection
			Get 
				If _TB_RecivedItemss Is Nothing Then
					 refreshTB_RecivedItemss()
				End If
 
				Return _TB_RecivedItemss
			End Get
		End Property


			public Overridable Function AddTB_RecivedItems(ByVal NewTB_RecivedItems As ShippingBiz.TB_RecivedItems) As Integer
				If _TB_RecivedItemss Is Nothing Then
					 refreshTB_RecivedItemss()
				End If
 
				NewTB_RecivedItems.row.SetParentRow(row,MyBase.DataSet.Relations("InvoiceIDTB_RecivedItems"))
 
				 _TB_RecivedItemss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_RecivedItemss.Add(NewTB_RecivedItems) 
 
				 _TB_RecivedItemss.Parent = Me
 
				_TB_RecivedItemss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_RecivedItems() As ShippingBiz.TB_RecivedItems
				If _TB_RecivedItemss Is Nothing Then
					 refreshTB_RecivedItemss()
				End If
 
				Dim _TB_RecivedItems As New ShippingBiz.TB_RecivedItems(MyBase.DataContext,MyBase.DataSet.Tables("TB_RecivedItems").NewRow()) 
				MyBase.DataSet.Tables("TB_RecivedItems").Rows.Add(_TB_RecivedItems.row)
 
				Me.AddTB_RecivedItems(_TB_RecivedItems)
 
				Return _TB_RecivedItems
			End Function


	End Class

 
	Public MustInherit Class TB_InvoiceDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("InvoiceID"),System.Guid)
				Else
					return CType( row("InvoiceID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("InvoiceID") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IRRAmount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IRRAmount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IRRAmount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("IRRAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IRRAmount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("IRRAmount") = DBNull.Value
				Else
					row("IRRAmount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_Invoice() as ShippingBiz.TB_Invoice 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("InvoiceIDTB_InvoiceDetails")) is nothing
					return new ShippingBiz.TB_Invoice( DataContext, row.GetParentRow("InvoiceIDTB_InvoiceDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Invoice )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("InvoiceIDTB_InvoiceDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("InvoiceIDTB_InvoiceDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardBLSOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Service() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Service")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Service"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Service"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Service", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Service") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property BlNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BlNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BlNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BlNo") = value
 
			End Set
		End Property

		public Overridable Property IssuePlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IssuePlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssuePlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IssuePlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssuePlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IssuePlace") = value
 
			End Set
		End Property

		public Overridable Property IssueDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IssueDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("IssueDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("IssueDate") = DBNull.Value
				Else
					row("IssueDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property OnBoardDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("OnBoardDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("OnBoardDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("OnBoardDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("OnBoardDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("OnBoardDate") = DBNull.Value
				Else
					row("OnBoardDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property POR() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POR")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POR"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POR"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POR", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POR") = value
 
			End Set
		End Property

		public Overridable Property POL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POL") = value
 
			End Set
		End Property

		public Overridable Property POT() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POT")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POT"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POT") = value
 
			End Set
		End Property

		public Overridable Property POD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POD") = value
 
			End Set
		End Property

		public Overridable Property FPOD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FPOD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FPOD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FPOD") = value
 
			End Set
		End Property

		public Overridable Property PreVoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("PreVoyageID"),System.Guid)
				Else
					return CType( row("PreVoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("PreVoyageID") = value
 
			End Set
		End Property

		public Overridable Property VoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("VoyageID"),System.Guid)
				Else
					return CType( row("VoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("VoyageID") = value
 
			End Set
		End Property

		public Overridable Property NoOfBls() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOfBls") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("NoOfBls"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOfBls"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("NoOfBls", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("NoOfBls") = DBNull.Value
				Else
					row("NoOfBls") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TermsOfPayment() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TermsOfPayment")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TermsOfPayment"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TermsOfPayment"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TermsOfPayment", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TermsOfPayment") = value
 
			End Set
		End Property

		public Overridable Property ClientID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ClientID"),System.Guid)
				Else
					return CType( row("ClientID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ClientID") = value
 
			End Set
		End Property

		public Overridable Property FCLType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FCLType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCLType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FCLType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCLType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FCLType") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Reference() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Reference") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Reference"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("Reference"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Reference", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("Reference") = DBNull.Value
				Else
					row("Reference") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MailRelease() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MailRelease") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("MailRelease"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("MailRelease"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("MailRelease", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("MailRelease") = DBNull.Value
				Else
					row("MailRelease") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MailReleaseRem() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailReleaseRem")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailReleaseRem"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailReleaseRem"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailReleaseRem", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailReleaseRem") = value
 
			End Set
		End Property

		public Overridable Property FrtCoverdCarr() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FrtCoverdCarr")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdCarr"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FrtCoverdCarr"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdCarr", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FrtCoverdCarr") = value
 
			End Set
		End Property

		public Overridable Property FrtCoverdBlNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FrtCoverdBlNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdBlNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FrtCoverdBlNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdBlNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FrtCoverdBlNo") = value
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property LcNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LcNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LcNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LcNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LcNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LcNo") = value
 
			End Set
		End Property

		public Overridable Property BLStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BLStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BLStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BLStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BLStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BLStatus") = value
 
			End Set
		End Property

		public Overridable Property BookingID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BookingID"),System.Guid)
				Else
					return CType( row("BookingID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BookingID") = value
 
			End Set
		End Property

		public Overridable Property BookingNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BookingNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BookingNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BookingNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BookingNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BookingNo") = value
 
			End Set
		End Property

		public Overridable Property MBL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MBL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MBL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MBL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MBL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MBL") = value
 
			End Set
		End Property

		public Overridable Property FwdLine() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FwdLine")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwdLine"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FwdLine"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwdLine", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FwdLine") = value
 
			End Set
		End Property

		public Overridable Property FwAgent() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FwAgent")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwAgent"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FwAgent"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwAgent", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FwAgent") = value
 
			End Set
		End Property

		public Overridable Property JobNumber() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobNumber")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobNumber"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobNumber"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobNumber", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobNumber") = value
 
			End Set
		End Property

		public Overridable Property IssueFU() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IssueFU") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IssueFU"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IssueFU"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IssueFU", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IssueFU") = DBNull.Value
				Else
					row("IssueFU") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FinalizeDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FinalizeDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FinalizeDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("FinalizeDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FinalizeDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("FinalizeDate") = DBNull.Value
				Else
					row("FinalizeDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FinalizeStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FinalizeStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FinalizeStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FinalizeStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FinalizeStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FinalizeStatus") = value
 
			End Set
		End Property

		public Overridable Property TFCCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TFCCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TFCCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TFCCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TFCCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TFCCode") = value
 
			End Set
		End Property

		public Overridable Property BarCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BarCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BarCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BarCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BarCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BarCode") = value
 
			End Set
		End Property

		public Overridable Property HSCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("HSCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("HSCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("HSCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("HSCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("HSCode") = value
 
			End Set
		End Property


		
		public Overridable Property TB_Clients() as ShippingBiz.TB_Clients 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("ClientIDTB_InwardBLS")) is nothing
					return new ShippingBiz.TB_Clients( DataContext, row.GetParentRow("ClientIDTB_InwardBLS"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Clients )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("ClientIDTB_InwardBLS") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("ClientIDTB_InwardBLS") )		
				End If
			end set
		end property
	

		
		public Overridable Property TB_Voyage() as ShippingBiz.TB_Voyage 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("VoyageIDTB_InwardBLS")) is nothing
					return new ShippingBiz.TB_Voyage( DataContext, row.GetParentRow("VoyageIDTB_InwardBLS"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Voyage )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("VoyageIDTB_InwardBLS") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("VoyageIDTB_InwardBLS") )		
				End If
			end set
		end property
	



	    Private _TB_Invoices As ShippingBiz.TB_InvoiceCollection = Nothing
	
		Friend Sub refreshTB_Invoices()
			If _TB_Invoices Is Nothing Then _TB_Invoices = New ShippingBiz.TB_InvoiceCollection()
			
			Dim tmp as IList = _TB_Invoices
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_Invoice")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_Invoice(MyBase.DataContext, chld)
				_TB_Invoices.Add(obj)
			Next

			_TB_Invoices.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_Invoices() As ShippingBiz.TB_InvoiceCollection
			Get 
				If _TB_Invoices Is Nothing Then
					 refreshTB_Invoices()
				End If
 
				Return _TB_Invoices
			End Get
		End Property


			public Overridable Function AddTB_Invoice(ByVal NewTB_Invoice As ShippingBiz.TB_Invoice) As Integer
				If _TB_Invoices Is Nothing Then
					 refreshTB_Invoices()
				End If
 
				NewTB_Invoice.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_Invoice"))
 
				 _TB_Invoices.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_Invoices.Add(NewTB_Invoice) 
 
				 _TB_Invoices.Parent = Me
 
				_TB_Invoices.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_Invoice() As ShippingBiz.TB_Invoice
				If _TB_Invoices Is Nothing Then
					 refreshTB_Invoices()
				End If
 
				Dim _TB_Invoice As New ShippingBiz.TB_Invoice(MyBase.DataContext,MyBase.DataSet.Tables("TB_Invoice").NewRow()) 
				MyBase.DataSet.Tables("TB_Invoice").Rows.Add(_TB_Invoice.row)
 
				Me.AddTB_Invoice(_TB_Invoice)
 
				Return _TB_Invoice
			End Function
	    Private _TB_InwardBlsCommentss As ShippingBiz.TB_InwardBlsCommentsCollection = Nothing
	
		Friend Sub refreshTB_InwardBlsCommentss()
			If _TB_InwardBlsCommentss Is Nothing Then _TB_InwardBlsCommentss = New ShippingBiz.TB_InwardBlsCommentsCollection()
			
			Dim tmp as IList = _TB_InwardBlsCommentss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_InwardBlsComments")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardBlsComments(MyBase.DataContext, chld)
				_TB_InwardBlsCommentss.Add(obj)
			Next

			_TB_InwardBlsCommentss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardBlsCommentss() As ShippingBiz.TB_InwardBlsCommentsCollection
			Get 
				If _TB_InwardBlsCommentss Is Nothing Then
					 refreshTB_InwardBlsCommentss()
				End If
 
				Return _TB_InwardBlsCommentss
			End Get
		End Property


			public Overridable Function AddTB_InwardBlsComments(ByVal NewTB_InwardBlsComments As ShippingBiz.TB_InwardBlsComments) As Integer
				If _TB_InwardBlsCommentss Is Nothing Then
					 refreshTB_InwardBlsCommentss()
				End If
 
				NewTB_InwardBlsComments.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_InwardBlsComments"))
 
				 _TB_InwardBlsCommentss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardBlsCommentss.Add(NewTB_InwardBlsComments) 
 
				 _TB_InwardBlsCommentss.Parent = Me
 
				_TB_InwardBlsCommentss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardBlsComments() As ShippingBiz.TB_InwardBlsComments
				If _TB_InwardBlsCommentss Is Nothing Then
					 refreshTB_InwardBlsCommentss()
				End If
 
				Dim _TB_InwardBlsComments As New ShippingBiz.TB_InwardBlsComments(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardBlsComments").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardBlsComments").Rows.Add(_TB_InwardBlsComments.row)
 
				Me.AddTB_InwardBlsComments(_TB_InwardBlsComments)
 
				Return _TB_InwardBlsComments
			End Function
	    Private _Tb_InwardBlsFrss As ShippingBiz.Tb_InwardBlsFrsCollection = Nothing
	
		Friend Sub refreshTb_InwardBlsFrss()
			If _Tb_InwardBlsFrss Is Nothing Then _Tb_InwardBlsFrss = New ShippingBiz.Tb_InwardBlsFrsCollection()
			
			Dim tmp as IList = _Tb_InwardBlsFrss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTb_InwardBlsFrs")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.Tb_InwardBlsFrs(MyBase.DataContext, chld)
				_Tb_InwardBlsFrss.Add(obj)
			Next

			_Tb_InwardBlsFrss.Parent = Me
		End Sub
		public Overridable ReadOnly Property Tb_InwardBlsFrss() As ShippingBiz.Tb_InwardBlsFrsCollection
			Get 
				If _Tb_InwardBlsFrss Is Nothing Then
					 refreshTb_InwardBlsFrss()
				End If
 
				Return _Tb_InwardBlsFrss
			End Get
		End Property


			public Overridable Function AddTb_InwardBlsFrs(ByVal NewTb_InwardBlsFrs As ShippingBiz.Tb_InwardBlsFrs) As Integer
				If _Tb_InwardBlsFrss Is Nothing Then
					 refreshTb_InwardBlsFrss()
				End If
 
				NewTb_InwardBlsFrs.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTb_InwardBlsFrs"))
 
				 _Tb_InwardBlsFrss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _Tb_InwardBlsFrss.Add(NewTb_InwardBlsFrs) 
 
				 _Tb_InwardBlsFrss.Parent = Me
 
				_Tb_InwardBlsFrss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTb_InwardBlsFrs() As ShippingBiz.Tb_InwardBlsFrs
				If _Tb_InwardBlsFrss Is Nothing Then
					 refreshTb_InwardBlsFrss()
				End If
 
				Dim _Tb_InwardBlsFrs As New ShippingBiz.Tb_InwardBlsFrs(MyBase.DataContext,MyBase.DataSet.Tables("Tb_InwardBlsFrs").NewRow()) 
				MyBase.DataSet.Tables("Tb_InwardBlsFrs").Rows.Add(_Tb_InwardBlsFrs.row)
 
				Me.AddTb_InwardBlsFrs(_Tb_InwardBlsFrs)
 
				Return _Tb_InwardBlsFrs
			End Function
	    Private _TB_InwardBlsGoodss As ShippingBiz.TB_InwardBlsGoodsCollection = Nothing
	
		Friend Sub refreshTB_InwardBlsGoodss()
			If _TB_InwardBlsGoodss Is Nothing Then _TB_InwardBlsGoodss = New ShippingBiz.TB_InwardBlsGoodsCollection()
			
			Dim tmp as IList = _TB_InwardBlsGoodss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_InwardBlsGoods")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardBlsGoods(MyBase.DataContext, chld)
				_TB_InwardBlsGoodss.Add(obj)
			Next

			_TB_InwardBlsGoodss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardBlsGoodss() As ShippingBiz.TB_InwardBlsGoodsCollection
			Get 
				If _TB_InwardBlsGoodss Is Nothing Then
					 refreshTB_InwardBlsGoodss()
				End If
 
				Return _TB_InwardBlsGoodss
			End Get
		End Property


			public Overridable Function AddTB_InwardBlsGoods(ByVal NewTB_InwardBlsGoods As ShippingBiz.TB_InwardBlsGoods) As Integer
				If _TB_InwardBlsGoodss Is Nothing Then
					 refreshTB_InwardBlsGoodss()
				End If
 
				NewTB_InwardBlsGoods.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_InwardBlsGoods"))
 
				 _TB_InwardBlsGoodss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardBlsGoodss.Add(NewTB_InwardBlsGoods) 
 
				 _TB_InwardBlsGoodss.Parent = Me
 
				_TB_InwardBlsGoodss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardBlsGoods() As ShippingBiz.TB_InwardBlsGoods
				If _TB_InwardBlsGoodss Is Nothing Then
					 refreshTB_InwardBlsGoodss()
				End If
 
				Dim _TB_InwardBlsGoods As New ShippingBiz.TB_InwardBlsGoods(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardBlsGoods").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardBlsGoods").Rows.Add(_TB_InwardBlsGoods.row)
 
				Me.AddTB_InwardBlsGoods(_TB_InwardBlsGoods)
 
				Return _TB_InwardBlsGoods
			End Function
	    Private _TB_InwardBlsNamess As ShippingBiz.TB_InwardBlsNamesCollection = Nothing
	
		Friend Sub refreshTB_InwardBlsNamess()
			If _TB_InwardBlsNamess Is Nothing Then _TB_InwardBlsNamess = New ShippingBiz.TB_InwardBlsNamesCollection()
			
			Dim tmp as IList = _TB_InwardBlsNamess
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_InwardBlsNames")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardBlsNames(MyBase.DataContext, chld)
				_TB_InwardBlsNamess.Add(obj)
			Next

			_TB_InwardBlsNamess.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardBlsNamess() As ShippingBiz.TB_InwardBlsNamesCollection
			Get 
				If _TB_InwardBlsNamess Is Nothing Then
					 refreshTB_InwardBlsNamess()
				End If
 
				Return _TB_InwardBlsNamess
			End Get
		End Property


			public Overridable Function AddTB_InwardBlsNames(ByVal NewTB_InwardBlsNames As ShippingBiz.TB_InwardBlsNames) As Integer
				If _TB_InwardBlsNamess Is Nothing Then
					 refreshTB_InwardBlsNamess()
				End If
 
				NewTB_InwardBlsNames.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_InwardBlsNames"))
 
				 _TB_InwardBlsNamess.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardBlsNamess.Add(NewTB_InwardBlsNames) 
 
				 _TB_InwardBlsNamess.Parent = Me
 
				_TB_InwardBlsNamess.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardBlsNames() As ShippingBiz.TB_InwardBlsNames
				If _TB_InwardBlsNamess Is Nothing Then
					 refreshTB_InwardBlsNamess()
				End If
 
				Dim _TB_InwardBlsNames As New ShippingBiz.TB_InwardBlsNames(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardBlsNames").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardBlsNames").Rows.Add(_TB_InwardBlsNames.row)
 
				Me.AddTB_InwardBlsNames(_TB_InwardBlsNames)
 
				Return _TB_InwardBlsNames
			End Function
	    Private _TB_InwardChargess As ShippingBiz.TB_InwardChargesCollection = Nothing
	
		Friend Sub refreshTB_InwardChargess()
			If _TB_InwardChargess Is Nothing Then _TB_InwardChargess = New ShippingBiz.TB_InwardChargesCollection()
			
			Dim tmp as IList = _TB_InwardChargess
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_InwardCharges")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardCharges(MyBase.DataContext, chld)
				_TB_InwardChargess.Add(obj)
			Next

			_TB_InwardChargess.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardChargess() As ShippingBiz.TB_InwardChargesCollection
			Get 
				If _TB_InwardChargess Is Nothing Then
					 refreshTB_InwardChargess()
				End If
 
				Return _TB_InwardChargess
			End Get
		End Property


			public Overridable Function AddTB_InwardCharges(ByVal NewTB_InwardCharges As ShippingBiz.TB_InwardCharges) As Integer
				If _TB_InwardChargess Is Nothing Then
					 refreshTB_InwardChargess()
				End If
 
				NewTB_InwardCharges.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_InwardCharges"))
 
				 _TB_InwardChargess.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardChargess.Add(NewTB_InwardCharges) 
 
				 _TB_InwardChargess.Parent = Me
 
				_TB_InwardChargess.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardCharges() As ShippingBiz.TB_InwardCharges
				If _TB_InwardChargess Is Nothing Then
					 refreshTB_InwardChargess()
				End If
 
				Dim _TB_InwardCharges As New ShippingBiz.TB_InwardCharges(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardCharges").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardCharges").Rows.Add(_TB_InwardCharges.row)
 
				Me.AddTB_InwardCharges(_TB_InwardCharges)
 
				Return _TB_InwardCharges
			End Function
	    Private _TB_InwardCntrss As ShippingBiz.TB_InwardCntrsCollection = Nothing
	
		Friend Sub refreshTB_InwardCntrss()
			If _TB_InwardCntrss Is Nothing Then _TB_InwardCntrss = New ShippingBiz.TB_InwardCntrsCollection()
			
			Dim tmp as IList = _TB_InwardCntrss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_InwardCntrs")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardCntrs(MyBase.DataContext, chld)
				_TB_InwardCntrss.Add(obj)
			Next

			_TB_InwardCntrss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardCntrss() As ShippingBiz.TB_InwardCntrsCollection
			Get 
				If _TB_InwardCntrss Is Nothing Then
					 refreshTB_InwardCntrss()
				End If
 
				Return _TB_InwardCntrss
			End Get
		End Property


			public Overridable Function AddTB_InwardCntrs(ByVal NewTB_InwardCntrs As ShippingBiz.TB_InwardCntrs) As Integer
				If _TB_InwardCntrss Is Nothing Then
					 refreshTB_InwardCntrss()
				End If
 
				NewTB_InwardCntrs.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_InwardCntrs"))
 
				 _TB_InwardCntrss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardCntrss.Add(NewTB_InwardCntrs) 
 
				 _TB_InwardCntrss.Parent = Me
 
				_TB_InwardCntrss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardCntrs() As ShippingBiz.TB_InwardCntrs
				If _TB_InwardCntrss Is Nothing Then
					 refreshTB_InwardCntrss()
				End If
 
				Dim _TB_InwardCntrs As New ShippingBiz.TB_InwardCntrs(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardCntrs").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardCntrs").Rows.Add(_TB_InwardCntrs.row)
 
				Me.AddTB_InwardCntrs(_TB_InwardCntrs)
 
				Return _TB_InwardCntrs
			End Function
	    Private _TB_InwardDiscounts As ShippingBiz.TB_InwardDiscountCollection = Nothing
	
		Friend Sub refreshTB_InwardDiscounts()
			If _TB_InwardDiscounts Is Nothing Then _TB_InwardDiscounts = New ShippingBiz.TB_InwardDiscountCollection()
			
			Dim tmp as IList = _TB_InwardDiscounts
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_InwardDiscount")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardDiscount(MyBase.DataContext, chld)
				_TB_InwardDiscounts.Add(obj)
			Next

			_TB_InwardDiscounts.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardDiscounts() As ShippingBiz.TB_InwardDiscountCollection
			Get 
				If _TB_InwardDiscounts Is Nothing Then
					 refreshTB_InwardDiscounts()
				End If
 
				Return _TB_InwardDiscounts
			End Get
		End Property


			public Overridable Function AddTB_InwardDiscount(ByVal NewTB_InwardDiscount As ShippingBiz.TB_InwardDiscount) As Integer
				If _TB_InwardDiscounts Is Nothing Then
					 refreshTB_InwardDiscounts()
				End If
 
				NewTB_InwardDiscount.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_InwardDiscount"))
 
				 _TB_InwardDiscounts.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardDiscounts.Add(NewTB_InwardDiscount) 
 
				 _TB_InwardDiscounts.Parent = Me
 
				_TB_InwardDiscounts.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardDiscount() As ShippingBiz.TB_InwardDiscount
				If _TB_InwardDiscounts Is Nothing Then
					 refreshTB_InwardDiscounts()
				End If
 
				Dim _TB_InwardDiscount As New ShippingBiz.TB_InwardDiscount(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardDiscount").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardDiscount").Rows.Add(_TB_InwardDiscount.row)
 
				Me.AddTB_InwardDiscount(_TB_InwardDiscount)
 
				Return _TB_InwardDiscount
			End Function
	    Private _TB_InwardStatuss As ShippingBiz.TB_InwardStatusCollection = Nothing
	
		Friend Sub refreshTB_InwardStatuss()
			If _TB_InwardStatuss Is Nothing Then _TB_InwardStatuss = New ShippingBiz.TB_InwardStatusCollection()
			
			Dim tmp as IList = _TB_InwardStatuss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_InwardStatus")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardStatus(MyBase.DataContext, chld)
				_TB_InwardStatuss.Add(obj)
			Next

			_TB_InwardStatuss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardStatuss() As ShippingBiz.TB_InwardStatusCollection
			Get 
				If _TB_InwardStatuss Is Nothing Then
					 refreshTB_InwardStatuss()
				End If
 
				Return _TB_InwardStatuss
			End Get
		End Property


			public Overridable Function AddTB_InwardStatus(ByVal NewTB_InwardStatus As ShippingBiz.TB_InwardStatus) As Integer
				If _TB_InwardStatuss Is Nothing Then
					 refreshTB_InwardStatuss()
				End If
 
				NewTB_InwardStatus.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_InwardStatus"))
 
				 _TB_InwardStatuss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardStatuss.Add(NewTB_InwardStatus) 
 
				 _TB_InwardStatuss.Parent = Me
 
				_TB_InwardStatuss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardStatus() As ShippingBiz.TB_InwardStatus
				If _TB_InwardStatuss Is Nothing Then
					 refreshTB_InwardStatuss()
				End If
 
				Dim _TB_InwardStatus As New ShippingBiz.TB_InwardStatus(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardStatus").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardStatus").Rows.Add(_TB_InwardStatus.row)
 
				Me.AddTB_InwardStatus(_TB_InwardStatus)
 
				Return _TB_InwardStatus
			End Function
	    Private _TB_PInvoices As ShippingBiz.TB_PInvoiceCollection = Nothing
	
		Friend Sub refreshTB_PInvoices()
			If _TB_PInvoices Is Nothing Then _TB_PInvoices = New ShippingBiz.TB_PInvoiceCollection()
			
			Dim tmp as IList = _TB_PInvoices
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_PInvoice")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_PInvoice(MyBase.DataContext, chld)
				_TB_PInvoices.Add(obj)
			Next

			_TB_PInvoices.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_PInvoices() As ShippingBiz.TB_PInvoiceCollection
			Get 
				If _TB_PInvoices Is Nothing Then
					 refreshTB_PInvoices()
				End If
 
				Return _TB_PInvoices
			End Get
		End Property


			public Overridable Function AddTB_PInvoice(ByVal NewTB_PInvoice As ShippingBiz.TB_PInvoice) As Integer
				If _TB_PInvoices Is Nothing Then
					 refreshTB_PInvoices()
				End If
 
				NewTB_PInvoice.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_PInvoice"))
 
				 _TB_PInvoices.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_PInvoices.Add(NewTB_PInvoice) 
 
				 _TB_PInvoices.Parent = Me
 
				_TB_PInvoices.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_PInvoice() As ShippingBiz.TB_PInvoice
				If _TB_PInvoices Is Nothing Then
					 refreshTB_PInvoices()
				End If
 
				Dim _TB_PInvoice As New ShippingBiz.TB_PInvoice(MyBase.DataContext,MyBase.DataSet.Tables("TB_PInvoice").NewRow()) 
				MyBase.DataSet.Tables("TB_PInvoice").Rows.Add(_TB_PInvoice.row)
 
				Me.AddTB_PInvoice(_TB_PInvoice)
 
				Return _TB_PInvoice
			End Function


	End Class

 
	Public MustInherit Class TB_InwardBlsCommentsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property CommentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CommentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CommentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CommentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CommentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CommentType") = value
 
			End Set
		End Property

		public Overridable Property Comment() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Comment")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Comment"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Comment"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Comment", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Comment") = value
 
			End Set
		End Property

		public Overridable Property CommentDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CommentDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CommentDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("CommentDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CommentDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("CommentDate") = DBNull.Value
				Else
					row("CommentDate") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_InwardBlsComments")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_InwardBlsComments"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_InwardBlsComments") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_InwardBlsComments") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class Tb_InwardBlsFrsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property FCnee() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FCnee")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCnee"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FCnee"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCnee", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FCnee") = value
 
			End Set
		End Property

		public Overridable Property FGoods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FGoods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FGoods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FGoods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FGoods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FGoods") = value
 
			End Set
		End Property

		public Overridable Property FPkgs() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FPkgs")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPkgs"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FPkgs"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPkgs", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FPkgs") = value
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTb_InwardBlsFrs")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTb_InwardBlsFrs"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTb_InwardBlsFrs") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTb_InwardBlsFrs") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardBlsGoodsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property Goods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Goods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Goods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Goods") = value
 
			End Set
		End Property

		public Overridable Property Marks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Marks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Marks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Marks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Marks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Marks") = value
 
			End Set
		End Property

		public Overridable Property MainCom() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MainCom")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MainCom"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MainCom"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MainCom", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MainCom") = value
 
			End Set
		End Property

		public Overridable Property TTW() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTW") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTW"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTW", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("TTW") = DBNull.Value
				Else
					row("TTW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TGW() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TGW") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TGW"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("TGW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TGW", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("TGW") = DBNull.Value
				Else
					row("TGW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TTLPkgs() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTLPkgs") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTLPkgs"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTLPkgs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTLPkgs", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("TTLPkgs") = DBNull.Value
				Else
					row("TTLPkgs") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TTLCBM() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTLCBM") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TTLCBM"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTLCBM"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TTLCBM", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("TTLCBM") = DBNull.Value
				Else
					row("TTLCBM") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TTLNET() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTLNET") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TTLNET"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTLNET"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TTLNET", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("TTLNET") = DBNull.Value
				Else
					row("TTLNET") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_InwardBlsGoods")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_InwardBlsGoods"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_InwardBlsGoods") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_InwardBlsGoods") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardBlsNamesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property Shipper() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Shipper")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Shipper"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Shipper"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Shipper", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Shipper") = value
 
			End Set
		End Property

		Public Overridable Property Cnee() As System.String
			Get
				If row.RowState <> DataRowState.Deleted Then
					If (row.IsNull("Cnee")) Then
						Return vbNullString
					Else
						Return CType(row("Cnee"), System.String)
					End If
				Else
					If (row.IsNull(row.Table.Columns("Cnee"), DataRowVersion.Original)) Then
						Return vbNullString
					Else
						Return CType(row("Cnee", DataRowVersion.Original), System.String)
					End If
				End If
				'System.String
			End Get
			Set(ByVal Value As System.String)
				row("Cnee") = value

			End Set
		End Property

		Public Overridable Property CneeAdd() As System.String
			Get
				If row.RowState <> DataRowState.Deleted Then
					If (row.IsNull("CneeAdd")) Then
						Return vbNullString
					Else
						Return CType(row("CneeAdd"), System.String)
					End If
				Else
					If (row.IsNull(row.Table.Columns("CneeAdd"), DataRowVersion.Original)) Then
						Return vbNullString
					Else
						Return CType(row("CneeAdd", DataRowVersion.Original), System.String)
					End If
				End If
				'System.String
			End Get
			Set(ByVal Value As System.String)
				row("CneeAdd") = Value

			End Set
		End Property

		Public Overridable Property Notify1() As System.String
			Get
				If row.RowState <> DataRowState.Deleted Then
					If (row.IsNull("Notify1")) Then
						Return vbNullString
					Else
						Return CType(row("Notify1"), System.String)
					End If
				Else
					If (row.IsNull(row.Table.Columns("Notify1"), DataRowVersion.Original)) Then
						Return vbNullString
					Else
						Return CType(row("Notify1", DataRowVersion.Original), System.String)
					End If
				End If
				'System.String
			End Get
			Set(ByVal Value As System.String)
				row("Notify1") = value

			End Set
		End Property

		Public Overridable Property Notify2() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify2")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify2"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify2") = value
 
			End Set
		End Property

		public Overridable Property Notify3() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify3")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify3"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify3") = value
 
			End Set
		End Property

		public Overridable Property Messers() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Messers")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Messers"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Messers"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Messers", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Messers") = value
 
			End Set
		End Property

		public Overridable Property ShipperID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ShipperID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ShipperID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ShipperID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ShipperID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ShipperID") = value
 
			End Set
		End Property

		public Overridable Property CneeID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CneeID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CneeID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CneeID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CneeID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CneeID") = value
 
			End Set
		End Property

		public Overridable Property Notify1ID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify1ID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify1ID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify1ID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify1ID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify1ID") = value
 
			End Set
		End Property

		public Overridable Property Notify2ID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify2ID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2ID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify2ID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2ID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify2ID") = value
 
			End Set
		End Property

		public Overridable Property Notify3ID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify3ID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3ID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify3ID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3ID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify3ID") = value
 
			End Set
		End Property

		public Overridable Property Forwarder() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Forwarder")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Forwarder"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Forwarder"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Forwarder", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Forwarder") = value
 
			End Set
		End Property

		public Overridable Property ForwarderID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ForwarderID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ForwarderID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ForwarderID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ForwarderID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ForwarderID") = value
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_InwardBlsNames")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_InwardBlsNames"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_InwardBlsNames") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_InwardBlsNames") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardChargesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Qty() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Qty") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Qty"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Qty"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Qty", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Qty") = DBNull.Value
				Else
					row("Qty") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Rate() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Rate") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Rate"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Rate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Rate", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Rate") = DBNull.Value
				Else
					row("Rate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PayAt() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PayAt")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAt"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PayAt"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAt", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PayAt") = value
 
			End Set
		End Property

		public Overridable Property ChargesBase() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesBase")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesBase"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesBase"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesBase", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesBase") = value
 
			End Set
		End Property

		public Overridable Property Terms() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Terms")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Terms"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Terms") = value
 
			End Set
		End Property

		public Overridable Property ActPlaceExRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ActPlaceExRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ActPlaceExRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("ActPlaceExRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ActPlaceExRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("ActPlaceExRate") = DBNull.Value
				Else
					row("ActPlaceExRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MeaUnitOfCharge() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MeaUnitOfCharge")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MeaUnitOfCharge"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MeaUnitOfCharge"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MeaUnitOfCharge", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MeaUnitOfCharge") = value
 
			End Set
		End Property

		public Overridable Property FromPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FromPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FromPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FromPlace") = value
 
			End Set
		End Property

		public Overridable Property ToPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ToPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ToPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ToPlace") = value
 
			End Set
		End Property

		public Overridable Property PayAtBranch() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PayAtBranch")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtBranch"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PayAtBranch"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtBranch", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PayAtBranch") = value
 
			End Set
		End Property

		public Overridable Property PayAtExRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PayAtExRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("PayAtExRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("PayAtExRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("PayAtExRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("PayAtExRate") = DBNull.Value
				Else
					row("PayAtExRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PayAtPc() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PayAtPc")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtPc"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PayAtPc"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtPc", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PayAtPc") = value
 
			End Set
		End Property

		public Overridable Property InvoiceAmount() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("InvoiceAmount") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("InvoiceAmount"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("InvoiceAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("InvoiceAmount", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("InvoiceAmount") = DBNull.Value
				Else
					row("InvoiceAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property RealAmount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("RealAmount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("RealAmount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("RealAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("RealAmount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("RealAmount") = DBNull.Value
				Else
					row("RealAmount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_InwardCharges")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_InwardCharges"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_InwardCharges") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_InwardCharges") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardCnsImcoOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property UNNO() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UNNO")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNO"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UNNO"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNO", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UNNO") = value
 
			End Set
		End Property

		public Overridable Property IMDGCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IMDGCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IMDGCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IMDGCode") = value
 
			End Set
		End Property

		public Overridable Property FlashPoint() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FlashPoint") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FlashPoint"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FlashPoint") = DBNull.Value
				Else
					row("FlashPoint") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PakingGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PakingGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PakingGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PakingGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PakingGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PakingGroup") = value
 
			End Set
		End Property

		public Overridable Property PageNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PageNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("PageNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("PageNumber") = DBNull.Value
				Else
					row("PageNumber") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property EMSNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("EMSNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("EMSNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("EMSNumber") = DBNull.Value
				Else
					row("EMSNumber") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_InwardCntrs() as ShippingBiz.TB_InwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_InwardCnsImco")) is nothing
					return new ShippingBiz.TB_InwardCntrs( DataContext, row.GetParentRow("CntrIDTB_InwardCnsImco"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_InwardCnsImco") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_InwardCnsImco") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardCnsPkgsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property PackageType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PackageType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PackageType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PackageType") = value
 
			End Set
		End Property

        Public Overridable Property NoOFPkgs() As System.Data.SqlTypes.SqlDecimal
            Get
                If row.RowState <> DataRowState.Deleted Then
                    If row.IsNull("NoOFPkgs") Then
                        Return System.Data.SqlTypes.SqlDecimal.Null
                    Else
                        Return New System.Data.SqlTypes.SqlDecimal(CType(row("NoOFPkgs"), System.Decimal))
                    End If
                Else
                    If row.IsNull(row.Table.Columns("NoOFPkgs"), DataRowVersion.Original) Then
                        Return System.Data.SqlTypes.SqlDecimal.Null
                    Else
                        Return New System.Data.SqlTypes.SqlDecimal(CType(row("NoOFPkgs", DataRowVersion.Original), System.Decimal))
                    End If
                End If
            End Get
            Set(ByVal Value As System.Data.SqlTypes.SqlDecimal)
                If Value.IsNull Then
                    row("NoOFPkgs") = DBNull.Value
                Else
                    row("NoOFPkgs") = Value.Value
                End If

            End Set
        End Property

		public Overridable Property GW() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GW") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("GW"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("GW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("GW", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("GW") = DBNull.Value
				Else
					row("GW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property CBM() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CBM") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("CBM"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("CBM"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("CBM", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("CBM") = DBNull.Value
				Else
					row("CBM") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property NET() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NET") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("NET"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("NET") = DBNull.Value
				Else
					row("NET") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FlashPoint() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FlashPoint") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FlashPoint"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FlashPoint") = DBNull.Value
				Else
					row("FlashPoint") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IMDGCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IMDGCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IMDGCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IMDGCode") = value
 
			End Set
		End Property

		public Overridable Property PakingGroup() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PakingGroup") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PakingGroup"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("PakingGroup"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PakingGroup", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("PakingGroup") = DBNull.Value
				Else
					row("PakingGroup") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PageNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PageNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("PageNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("PageNumber") = DBNull.Value
				Else
					row("PageNumber") = value.Value
				End If
 
			End Set
		End Property

        'Public Overridable Property EMSNumber() As System.Data.SqlTypes.SqlInt64
        '    Get
        '        If row.RowState <> DataRowState.Deleted Then
        '            If row.IsNull("EMSNumber") Then
        '                Return System.Data.SqlTypes.SqlInt64.Null
        '            Else
        '                Return New System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber"), System.Int64))
        '            End If
        '        Else
        '            If row.IsNull(row.Table.Columns("EMSNumber"), DataRowVersion.Original) Then
        '                Return System.Data.SqlTypes.SqlInt64.Null
        '            Else
        '                Return New System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber", DataRowVersion.Original), System.Int64))
        '            End If
        '        End If
        '    End Get
        '    Set(ByVal Value As System.Data.SqlTypes.SqlInt64)
        '        If Value.IsNull Then
        '            row("EMSNumber") = DBNull.Value
        '        Else
        '            row("EMSNumber") = Value.Value
        '        End If

        '    End Set
        'End Property
        ' appu - pakg type
        Public Overridable Property EMSNumber() As System.String
            Get
                If row.RowState <> DataRowState.Deleted Then
                    If (row.IsNull("EMSNumber")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EMSNumber"), System.String)
                    End If
                Else
                    If (row.IsNull(row.Table.Columns("EMSNumber"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EMSNumber", DataRowVersion.Original), System.String)
                    End If
                End If
                'System.String
            End Get
            Set(ByVal Value As System.String)
                row("EMSNumber") = Value

            End Set
        End Property


		
		public Overridable Property TB_InwardCntrs() as ShippingBiz.TB_InwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_InwardCnsPkgs")) is nothing
					return new ShippingBiz.TB_InwardCntrs( DataContext, row.GetParentRow("CntrIDTB_InwardCnsPkgs"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_InwardCnsPkgs") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_InwardCnsPkgs") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardCnsTempratureOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property TempMin() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TempMin") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMin"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("TempMin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMin", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("TempMin") = DBNull.Value
				Else
					row("TempMin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TempMax() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TempMax") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMax"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("TempMax"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMax", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("TempMax") = DBNull.Value
				Else
					row("TempMax") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TemperatureBase() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TemperatureBase")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TemperatureBase"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TemperatureBase"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TemperatureBase", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TemperatureBase") = value
 
			End Set
		End Property


		
		public Overridable Property TB_InwardCntrs() as ShippingBiz.TB_InwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_InwardCnsTemprature")) is nothing
					return new ShippingBiz.TB_InwardCntrs( DataContext, row.GetParentRow("CntrIDTB_InwardCnsTemprature"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_InwardCnsTemprature") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_InwardCnsTemprature") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardCntrsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property CntrNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CntrNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CntrNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CntrNo") = value
 
			End Set
		End Property

		public Overridable Property CnSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnSize") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property SealNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SealNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SealNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SealNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SealNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SealNo") = value
 
			End Set
		End Property

		public Overridable Property TW() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TW") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TW"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("TW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TW", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("TW") = DBNull.Value
				Else
					row("TW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property GW() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GW") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("GW"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("GW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("GW", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("GW") = DBNull.Value
				Else
					row("GW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property CBM() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CBM") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("CBM"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("CBM"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("CBM", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("CBM") = DBNull.Value
				Else
					row("CBM") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property NET() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NET") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("NET"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("NET"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("NET", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("NET") = DBNull.Value
				Else
					row("NET") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FLE() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FLE")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FLE"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FLE"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FLE", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FLE") = value
 
			End Set
		End Property

		public Overridable Property SOC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SOC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SOC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SOC") = value
 
			End Set
		End Property

		public Overridable Property PackageType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PackageType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PackageType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PackageType") = value
 
			End Set
		End Property

		public Overridable Property NoOFPkgs() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOFPkgs") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOFPkgs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("NoOFPkgs") = DBNull.Value
				Else
					row("NoOFPkgs") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Goods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Goods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Goods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Goods") = value
 
			End Set
		End Property

		public Overridable Property IsOOG() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsOOG") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsOOG"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsOOG"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsOOG", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsOOG") = DBNull.Value
				Else
					row("IsOOG") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Marks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Marks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Marks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Marks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Marks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Marks") = value
 
			End Set
		End Property

		public Overridable Property POLTerm() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POLTerm")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POLTerm"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POLTerm"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POLTerm", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POLTerm") = value
 
			End Set
		End Property

		public Overridable Property PODTerm() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PODTerm")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PODTerm"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PODTerm"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PODTerm", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PODTerm") = value
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_InwardCntrs")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_InwardCntrs"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_InwardCntrs") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_InwardCntrs") )		
				End If
			end set
		end property
	



	    Private _TB_InwardCnsImcos As ShippingBiz.TB_InwardCnsImcoCollection = Nothing
	
		Friend Sub refreshTB_InwardCnsImcos()
			If _TB_InwardCnsImcos Is Nothing Then _TB_InwardCnsImcos = New ShippingBiz.TB_InwardCnsImcoCollection()
			
			Dim tmp as IList = _TB_InwardCnsImcos
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_InwardCnsImco")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardCnsImco(MyBase.DataContext, chld)
				_TB_InwardCnsImcos.Add(obj)
			Next

			_TB_InwardCnsImcos.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardCnsImcos() As ShippingBiz.TB_InwardCnsImcoCollection
			Get 
				If _TB_InwardCnsImcos Is Nothing Then
					 refreshTB_InwardCnsImcos()
				End If
 
				Return _TB_InwardCnsImcos
			End Get
		End Property


			public Overridable Function AddTB_InwardCnsImco(ByVal NewTB_InwardCnsImco As ShippingBiz.TB_InwardCnsImco) As Integer
				If _TB_InwardCnsImcos Is Nothing Then
					 refreshTB_InwardCnsImcos()
				End If
 
				NewTB_InwardCnsImco.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_InwardCnsImco"))
 
				 _TB_InwardCnsImcos.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardCnsImcos.Add(NewTB_InwardCnsImco) 
 
				 _TB_InwardCnsImcos.Parent = Me
 
				_TB_InwardCnsImcos.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardCnsImco() As ShippingBiz.TB_InwardCnsImco
				If _TB_InwardCnsImcos Is Nothing Then
					 refreshTB_InwardCnsImcos()
				End If
 
				Dim _TB_InwardCnsImco As New ShippingBiz.TB_InwardCnsImco(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardCnsImco").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardCnsImco").Rows.Add(_TB_InwardCnsImco.row)
 
				Me.AddTB_InwardCnsImco(_TB_InwardCnsImco)
 
				Return _TB_InwardCnsImco
			End Function
	    Private _TB_InwardCnsPkgss As ShippingBiz.TB_InwardCnsPkgsCollection = Nothing
	
		Friend Sub refreshTB_InwardCnsPkgss()
			If _TB_InwardCnsPkgss Is Nothing Then _TB_InwardCnsPkgss = New ShippingBiz.TB_InwardCnsPkgsCollection()
			
			Dim tmp as IList = _TB_InwardCnsPkgss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_InwardCnsPkgs")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardCnsPkgs(MyBase.DataContext, chld)
				_TB_InwardCnsPkgss.Add(obj)
			Next

			_TB_InwardCnsPkgss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardCnsPkgss() As ShippingBiz.TB_InwardCnsPkgsCollection
			Get 
				If _TB_InwardCnsPkgss Is Nothing Then
					 refreshTB_InwardCnsPkgss()
				End If
 
				Return _TB_InwardCnsPkgss
			End Get
		End Property


			public Overridable Function AddTB_InwardCnsPkgs(ByVal NewTB_InwardCnsPkgs As ShippingBiz.TB_InwardCnsPkgs) As Integer
				If _TB_InwardCnsPkgss Is Nothing Then
					 refreshTB_InwardCnsPkgss()
				End If
 
				NewTB_InwardCnsPkgs.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_InwardCnsPkgs"))
 
				 _TB_InwardCnsPkgss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardCnsPkgss.Add(NewTB_InwardCnsPkgs) 
 
				 _TB_InwardCnsPkgss.Parent = Me
 
				_TB_InwardCnsPkgss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardCnsPkgs() As ShippingBiz.TB_InwardCnsPkgs
				If _TB_InwardCnsPkgss Is Nothing Then
					 refreshTB_InwardCnsPkgss()
				End If
 
				Dim _TB_InwardCnsPkgs As New ShippingBiz.TB_InwardCnsPkgs(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardCnsPkgs").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardCnsPkgs").Rows.Add(_TB_InwardCnsPkgs.row)
 
				Me.AddTB_InwardCnsPkgs(_TB_InwardCnsPkgs)
 
				Return _TB_InwardCnsPkgs
			End Function
	    Private _TB_InwardCnsTempratures As ShippingBiz.TB_InwardCnsTempratureCollection = Nothing
	
		Friend Sub refreshTB_InwardCnsTempratures()
			If _TB_InwardCnsTempratures Is Nothing Then _TB_InwardCnsTempratures = New ShippingBiz.TB_InwardCnsTempratureCollection()
			
			Dim tmp as IList = _TB_InwardCnsTempratures
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_InwardCnsTemprature")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardCnsTemprature(MyBase.DataContext, chld)
				_TB_InwardCnsTempratures.Add(obj)
			Next

			_TB_InwardCnsTempratures.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardCnsTempratures() As ShippingBiz.TB_InwardCnsTempratureCollection
			Get 
				If _TB_InwardCnsTempratures Is Nothing Then
					 refreshTB_InwardCnsTempratures()
				End If
 
				Return _TB_InwardCnsTempratures
			End Get
		End Property


			public Overridable Function AddTB_InwardCnsTemprature(ByVal NewTB_InwardCnsTemprature As ShippingBiz.TB_InwardCnsTemprature) As Integer
				If _TB_InwardCnsTempratures Is Nothing Then
					 refreshTB_InwardCnsTempratures()
				End If
 
				NewTB_InwardCnsTemprature.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_InwardCnsTemprature"))
 
				 _TB_InwardCnsTempratures.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardCnsTempratures.Add(NewTB_InwardCnsTemprature) 
 
				 _TB_InwardCnsTempratures.Parent = Me
 
				_TB_InwardCnsTempratures.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardCnsTemprature() As ShippingBiz.TB_InwardCnsTemprature
				If _TB_InwardCnsTempratures Is Nothing Then
					 refreshTB_InwardCnsTempratures()
				End If
 
				Dim _TB_InwardCnsTemprature As New ShippingBiz.TB_InwardCnsTemprature(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardCnsTemprature").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardCnsTemprature").Rows.Add(_TB_InwardCnsTemprature.row)
 
				Me.AddTB_InwardCnsTemprature(_TB_InwardCnsTemprature)
 
				Return _TB_InwardCnsTemprature
			End Function
	    Private _TB_InwardCntrsChargess As ShippingBiz.TB_InwardCntrsChargesCollection = Nothing
	
		Friend Sub refreshTB_InwardCntrsChargess()
			If _TB_InwardCntrsChargess Is Nothing Then _TB_InwardCntrsChargess = New ShippingBiz.TB_InwardCntrsChargesCollection()
			
			Dim tmp as IList = _TB_InwardCntrsChargess
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_InwardCntrsCharges")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardCntrsCharges(MyBase.DataContext, chld)
				_TB_InwardCntrsChargess.Add(obj)
			Next

			_TB_InwardCntrsChargess.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardCntrsChargess() As ShippingBiz.TB_InwardCntrsChargesCollection
			Get 
				If _TB_InwardCntrsChargess Is Nothing Then
					 refreshTB_InwardCntrsChargess()
				End If
 
				Return _TB_InwardCntrsChargess
			End Get
		End Property


			public Overridable Function AddTB_InwardCntrsCharges(ByVal NewTB_InwardCntrsCharges As ShippingBiz.TB_InwardCntrsCharges) As Integer
				If _TB_InwardCntrsChargess Is Nothing Then
					 refreshTB_InwardCntrsChargess()
				End If
 
				NewTB_InwardCntrsCharges.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_InwardCntrsCharges"))
 
				 _TB_InwardCntrsChargess.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardCntrsChargess.Add(NewTB_InwardCntrsCharges) 
 
				 _TB_InwardCntrsChargess.Parent = Me
 
				_TB_InwardCntrsChargess.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardCntrsCharges() As ShippingBiz.TB_InwardCntrsCharges
				If _TB_InwardCntrsChargess Is Nothing Then
					 refreshTB_InwardCntrsChargess()
				End If
 
				Dim _TB_InwardCntrsCharges As New ShippingBiz.TB_InwardCntrsCharges(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardCntrsCharges").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardCntrsCharges").Rows.Add(_TB_InwardCntrsCharges.row)
 
				Me.AddTB_InwardCntrsCharges(_TB_InwardCntrsCharges)
 
				Return _TB_InwardCntrsCharges
			End Function


	End Class

 
	Public MustInherit Class TB_InwardCntrsChargesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property UnitRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("UnitRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("UnitRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("UnitRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("UnitRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("UnitRate") = DBNull.Value
				Else
					row("UnitRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MEARate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MEARate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MEARate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("MEARate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MEARate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("MEARate") = DBNull.Value
				Else
					row("MEARate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property WGTrate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("WGTrate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("WGTrate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("WGTrate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("WGTrate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("WGTrate") = DBNull.Value
				Else
					row("WGTrate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FromPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FromPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FromPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FromPlace") = value
 
			End Set
		End Property

		public Overridable Property ToPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ToPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ToPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ToPlace") = value
 
			End Set
		End Property

		public Overridable Property MinRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MinRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MinRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("MinRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MinRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("MinRate") = DBNull.Value
				Else
					row("MinRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Terms() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Terms")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Terms"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Terms") = value
 
			End Set
		End Property

		public Overridable Property RealAmount() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("RealAmount") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("RealAmount"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("RealAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("RealAmount", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("RealAmount") = DBNull.Value
				Else
					row("RealAmount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_InwardCntrs() as ShippingBiz.TB_InwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_InwardCntrsCharges")) is nothing
					return new ShippingBiz.TB_InwardCntrs( DataContext, row.GetParentRow("CntrIDTB_InwardCntrsCharges"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_InwardCntrsCharges") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_InwardCntrsCharges") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardDiscountOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property dFreeDays() As System.Data.SqlTypes.SqlInt32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("dFreeDays") Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dFreeDays"),System.Int32))
					End If
				Else
					if row.IsNull(row.Table.Columns("dFreeDays"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dFreeDays", DataRowVersion.Original),System.Int32))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt32) 
				If value.IsNull Then
					row("dFreeDays") = DBNull.Value
				Else
					row("dFreeDays") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property dPercent() As System.Data.SqlTypes.SqlInt32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("dPercent") Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dPercent"),System.Int32))
					End If
				Else
					if row.IsNull(row.Table.Columns("dPercent"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dPercent", DataRowVersion.Original),System.Int32))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt32) 
				If value.IsNull Then
					row("dPercent") = DBNull.Value
				Else
					row("dPercent") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property dAmount() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("dAmount") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("dAmount"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("dAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("dAmount", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("dAmount") = DBNull.Value
				Else
					row("dAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property LineSetel() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("LineSetel") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LineSetel"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("LineSetel"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LineSetel", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("LineSetel") = DBNull.Value
				Else
					row("LineSetel") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IsFDaysAsDiscount() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsFDaysAsDiscount") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsFDaysAsDiscount"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsFDaysAsDiscount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsFDaysAsDiscount", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsFDaysAsDiscount") = DBNull.Value
				Else
					row("IsFDaysAsDiscount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SpecialCalculate() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SpecialCalculate") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SpecialCalculate"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("SpecialCalculate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SpecialCalculate", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("SpecialCalculate") = DBNull.Value
				Else
					row("SpecialCalculate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PerDay20() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PerDay20") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay20"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("PerDay20"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay20", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("PerDay20") = DBNull.Value
				Else
					row("PerDay20") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PerDay40() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PerDay40") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay40"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("PerDay40"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay40", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("PerDay40") = DBNull.Value
				Else
					row("PerDay40") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PerDay45() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PerDay45") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay45"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("PerDay45"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay45", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("PerDay45") = DBNull.Value
				Else
					row("PerDay45") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DetentionID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("DetentionID"),System.Guid)
				Else
					return CType( row("DetentionID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("DetentionID") = value
 
			End Set
		End Property

		public Overridable Property NoTax() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("NoTax")) Then
                        Return vbNullString
                    Else
                        Return CType(row("NoTax"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("NoTax"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("NoTax", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("NoTax") = value
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_InwardDiscount")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_InwardDiscount"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_InwardDiscount") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_InwardDiscount") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_InwardStatusOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property DoOffice() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DoOffice")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DoOffice"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DoOffice"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DoOffice", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DoOffice") = value
 
			End Set
		End Property

		public Overridable Property DoDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DoDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DoDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("DoDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DoDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("DoDate") = DBNull.Value
				Else
					row("DoDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Detention() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Detention") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Detention"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Detention"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Detention", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Detention") = DBNull.Value
				Else
					row("Detention") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Discont() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Discont") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("Discont"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("Discont"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("Discont", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("Discont") = DBNull.Value
				Else
					row("Discont") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SetelmentDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SetelmentDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SetelmentDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("SetelmentDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("SetelmentDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("SetelmentDate") = DBNull.Value
				Else
					row("SetelmentDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property InvoiceToClinet() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("InvoiceToClinet") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("InvoiceToClinet"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("InvoiceToClinet"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("InvoiceToClinet", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("InvoiceToClinet") = DBNull.Value
				Else
					row("InvoiceToClinet") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ReportToCarrier() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ReportToCarrier") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("ReportToCarrier"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("ReportToCarrier"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("ReportToCarrier", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("ReportToCarrier") = DBNull.Value
				Else
					row("ReportToCarrier") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Closed() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Closed") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Closed"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Closed"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Closed", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Closed") = DBNull.Value
				Else
					row("Closed") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_InwardStatus")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_InwardStatus"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_InwardStatus") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_InwardStatus") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_ISOTypeOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ISOTypeID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ISOTypeID"),System.Guid)
				Else
					return CType( row("ISOTypeID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ISOTypeID") = value
 
			End Set
		End Property

		public Overridable Property SizeIS() As System.Data.SqlTypes.SqlByte
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SizeIS") Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("SizeIS"),System.Byte))
					End If
				Else
					if row.IsNull(row.Table.Columns("SizeIS"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("SizeIS", DataRowVersion.Original),System.Byte))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlByte) 
				If value.IsNull Then
					row("SizeIS") = DBNull.Value
				Else
					row("SizeIS") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TypeIS() As System.Data.SqlTypes.SqlByte
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TypeIS") Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("TypeIS"),System.Byte))
					End If
				Else
					if row.IsNull(row.Table.Columns("TypeIS"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("TypeIS", DataRowVersion.Original),System.Byte))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlByte) 
				If value.IsNull Then
					row("TypeIS") = DBNull.Value
				Else
					row("TypeIS") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property HeightIS() As System.Data.SqlTypes.SqlByte
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("HeightIS") Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("HeightIS"),System.Byte))
					End If
				Else
					if row.IsNull(row.Table.Columns("HeightIS"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("HeightIS", DataRowVersion.Original),System.Byte))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlByte) 
				If value.IsNull Then
					row("HeightIS") = DBNull.Value
				Else
					row("HeightIS") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DispName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DispName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DispName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DispName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DispName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DispName") = value
 
			End Set
		End Property

		public Overridable Property ISOValue() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ISOValue")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ISOValue"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ISOValue"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ISOValue", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ISOValue") = value
 
			End Set
		End Property

		public Overridable Property WHLCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("WHLCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("WHLCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("WHLCode") = value
 
			End Set
		End Property

		public Overridable Property TareWeight() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TareWeight") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TareWeight"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("TareWeight"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TareWeight", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("TareWeight") = DBNull.Value
				Else
					row("TareWeight") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property WHLSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("WHLSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("WHLSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("WHLSize") = value
 
			End Set
		End Property

		public Overridable Property WHLType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("WHLType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("WHLType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("WHLType") = value
 
			End Set
		End Property

		public Overridable Property WHLHeight() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("WHLHeight")) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLHeight"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("WHLHeight"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("WHLHeight", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("WHLHeight") = value
 
			End Set
		End Property

		public Overridable Property PSOType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PSOType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PSOType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PSOType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PSOType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PSOType") = value
 
			End Set
		End Property

		public Overridable Property TEU() As System.Data.SqlTypes.SqlByte
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TEU") Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("TEU"),System.Byte))
					End If
				Else
					if row.IsNull(row.Table.Columns("TEU"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("TEU", DataRowVersion.Original),System.Byte))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlByte) 
				If value.IsNull Then
					row("TEU") = DBNull.Value
				Else
					row("TEU") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property OurType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("OurType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("OurType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("OurType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("OurType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("OurType") = value
 
			End Set
		End Property

		public Overridable Property InGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InGroup") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_LinesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property LineCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LineCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LineCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LineCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LineCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LineCode") = value
 
			End Set
		End Property

		public Overridable Property LineName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LineName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LineName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LineName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LineName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LineName") = value
 
			End Set
		End Property

		public Overridable Property EDICode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EDICode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EDICode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EDICode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EDICode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EDICode") = value
 
			End Set
		End Property

		public Overridable Property Address() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Address")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Address"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Address"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Address", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Address") = value
 
			End Set
		End Property

		public Overridable Property Country() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Country")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Country"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Country"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Country", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Country") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_LogOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property DataID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("DataID"),System.Guid)
				Else
					return CType( row("DataID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("DataID") = value
 
			End Set
		End Property

		public Overridable Property TableNM() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TableNM")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TableNM"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TableNM"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TableNM", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TableNM") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Action() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Action")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Action"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Action"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Action", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Action") = value
 
			End Set
		End Property

		public Overridable Property LogText() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LogText")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LogText"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LogText"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LogText", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LogText") = value
 
			End Set
		End Property

		public Overridable Property LastUpdate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("LastUpdate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LastUpdate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("LastUpdate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LastUpdate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("LastUpdate") = DBNull.Value
				Else
					row("LastUpdate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property LastUser() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LastUser")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastUser"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LastUser"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastUser", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LastUser") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_LogDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property LogID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("LogID"),System.Guid)
				Else
					return CType( row("LogID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("LogID") = value
 
			End Set
		End Property

		public Overridable Property FieldName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FieldName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FieldName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FieldName") = value
 
			End Set
		End Property

		public Overridable Property OldValue() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("OldValue")) Then
                        Return vbNullString
                    Else
                        Return CType(row("OldValue"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("OldValue"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("OldValue", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("OldValue") = value
 
			End Set
		End Property

		public Overridable Property NewValue() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("NewValue")) Then
                        Return vbNullString
                    Else
                        Return CType(row("NewValue"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("NewValue"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("NewValue", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("NewValue") = value
 
			End Set
		End Property


		
		public Overridable Property TB_LogMaster() as ShippingBiz.TB_LogMaster 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("LogIDTB_LogDetails")) is nothing
					return new ShippingBiz.TB_LogMaster( DataContext, row.GetParentRow("LogIDTB_LogDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_LogMaster )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("LogIDTB_LogDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("LogIDTB_LogDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_LogMasterOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property TBName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TBName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TBName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TBName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TBName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TBName") = value
 
			End Set
		End Property

		public Overridable Property TableKey() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("TableKey"),System.Guid)
				Else
					return CType( row("TableKey", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("TableKey") = value
 
			End Set
		End Property

		public Overridable Property ActionUser() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ActionUser")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ActionUser"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ActionUser"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ActionUser", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ActionUser") = value
 
			End Set
		End Property

		public Overridable Property ActionTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ActionTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ActionTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ActionTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ActionTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ActionTime") = DBNull.Value
				Else
					row("ActionTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ActionType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ActionType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ActionType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ActionType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ActionType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ActionType") = value
 
			End Set
		End Property




	    Private _TB_LogDetailss As ShippingBiz.TB_LogDetailsCollection = Nothing
	
		Friend Sub refreshTB_LogDetailss()
			If _TB_LogDetailss Is Nothing Then _TB_LogDetailss = New ShippingBiz.TB_LogDetailsCollection()
			
			Dim tmp as IList = _TB_LogDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("LogIDTB_LogDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_LogDetails(MyBase.DataContext, chld)
				_TB_LogDetailss.Add(obj)
			Next

			_TB_LogDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_LogDetailss() As ShippingBiz.TB_LogDetailsCollection
			Get 
				If _TB_LogDetailss Is Nothing Then
					 refreshTB_LogDetailss()
				End If
 
				Return _TB_LogDetailss
			End Get
		End Property


			public Overridable Function AddTB_LogDetails(ByVal NewTB_LogDetails As ShippingBiz.TB_LogDetails) As Integer
				If _TB_LogDetailss Is Nothing Then
					 refreshTB_LogDetailss()
				End If
 
				NewTB_LogDetails.row.SetParentRow(row,MyBase.DataSet.Relations("LogIDTB_LogDetails"))
 
				 _TB_LogDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_LogDetailss.Add(NewTB_LogDetails) 
 
				 _TB_LogDetailss.Parent = Me
 
				_TB_LogDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_LogDetails() As ShippingBiz.TB_LogDetails
				If _TB_LogDetailss Is Nothing Then
					 refreshTB_LogDetailss()
				End If
 
				Dim _TB_LogDetails As New ShippingBiz.TB_LogDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_LogDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_LogDetails").Rows.Add(_TB_LogDetails.row)
 
				Me.AddTB_LogDetails(_TB_LogDetails)
 
				Return _TB_LogDetails
			End Function


	End Class

 
	Public MustInherit Class TB_MenuItemsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property ItemLevel() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ItemLevel")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ItemLevel"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ItemLevel"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ItemLevel", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ItemLevel") = value
 
			End Set
		End Property

		public Overridable Property ItemKey() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ItemKey")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ItemKey"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ItemKey"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ItemKey", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ItemKey") = value
 
			End Set
		End Property




	    Private _TB_AccessLevels As ShippingBiz.TB_AccessLevelCollection = Nothing
	
		Friend Sub refreshTB_AccessLevels()
			If _TB_AccessLevels Is Nothing Then _TB_AccessLevels = New ShippingBiz.TB_AccessLevelCollection()
			
			Dim tmp as IList = _TB_AccessLevels
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("MenuItemIDTB_AccessLevel")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_AccessLevel(MyBase.DataContext, chld)
				_TB_AccessLevels.Add(obj)
			Next

			_TB_AccessLevels.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_AccessLevels() As ShippingBiz.TB_AccessLevelCollection
			Get 
				If _TB_AccessLevels Is Nothing Then
					 refreshTB_AccessLevels()
				End If
 
				Return _TB_AccessLevels
			End Get
		End Property


			public Overridable Function AddTB_AccessLevel(ByVal NewTB_AccessLevel As ShippingBiz.TB_AccessLevel) As Integer
				If _TB_AccessLevels Is Nothing Then
					 refreshTB_AccessLevels()
				End If
 
				NewTB_AccessLevel.row.SetParentRow(row,MyBase.DataSet.Relations("MenuItemIDTB_AccessLevel"))
 
				 _TB_AccessLevels.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_AccessLevels.Add(NewTB_AccessLevel) 
 
				 _TB_AccessLevels.Parent = Me
 
				_TB_AccessLevels.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_AccessLevel() As ShippingBiz.TB_AccessLevel
				If _TB_AccessLevels Is Nothing Then
					 refreshTB_AccessLevels()
				End If
 
				Dim _TB_AccessLevel As New ShippingBiz.TB_AccessLevel(MyBase.DataContext,MyBase.DataSet.Tables("TB_AccessLevel").NewRow()) 
				MyBase.DataSet.Tables("TB_AccessLevel").Rows.Add(_TB_AccessLevel.row)
 
				Me.AddTB_AccessLevel(_TB_AccessLevel)
 
				Return _TB_AccessLevel
			End Function


	End Class

 
	Public MustInherit Class TB_NOSPaymentTypsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property PaymentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaymentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaymentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaymentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaymentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaymentType") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property BANK() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BANK")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BANK"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BANK"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BANK", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BANK") = value
 
			End Set
		End Property

		public Overridable Property DBAccount() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DBAccount")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBAccount"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DBAccount"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBAccount", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DBAccount") = value
 
			End Set
		End Property

		public Overridable Property DBLevel1() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DBLevel1")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel1"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DBLevel1"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel1", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DBLevel1") = value
 
			End Set
		End Property

		public Overridable Property DBLevel2() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DBLevel2")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel2"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DBLevel2"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel2", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DBLevel2") = value
 
			End Set
		End Property

		public Overridable Property DBLevel3() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DBLevel3")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel3"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DBLevel3"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel3", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DBLevel3") = value
 
			End Set
		End Property

		public Overridable Property DBLevel4() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DBLevel4")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel4"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DBLevel4"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel4", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DBLevel4") = value
 
			End Set
		End Property

		public Overridable Property DBLevel5() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DBLevel5")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel5"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DBLevel5"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DBLevel5", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DBLevel5") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_ObjectsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ObjectName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ObjectName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ObjectName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ObjectName") = value
 
			End Set
		End Property

		public Overridable Property ObjectContent() As System.Data.SqlTypes.SqlBinary
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ObjectContent") Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("ObjectContent"),System.Byte()))
					End If
				Else
					if row.IsNull(row.Table.Columns("ObjectContent"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("ObjectContent", DataRowVersion.Original),System.Byte()))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBinary) 
				If value.IsNull Then
					row("ObjectContent") = DBNull.Value
				Else
					row("ObjectContent") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property CreateDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CreateDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CreateDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("CreateDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CreateDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("CreateDate") = DBNull.Value
				Else
					row("CreateDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ModifyDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ModifyDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ModifyDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ModifyDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ModifyDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ModifyDate") = DBNull.Value
				Else
					row("ModifyDate") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_ObjectsUserOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ObjectLine() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ObjectLine")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectLine"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ObjectLine"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectLine", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ObjectLine") = value
 
			End Set
		End Property

		public Overridable Property ObjectGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ObjectGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ObjectGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ObjectGroup") = value
 
			End Set
		End Property

		public Overridable Property ObjectName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ObjectName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ObjectName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ObjectName") = value
 
			End Set
		End Property

		public Overridable Property ObjectRemarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ObjectRemarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectRemarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ObjectRemarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ObjectRemarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ObjectRemarks") = value
 
			End Set
		End Property

		public Overridable Property ObjectContent() As System.Data.SqlTypes.SqlBinary
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ObjectContent") Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("ObjectContent"),System.Byte()))
					End If
				Else
					if row.IsNull(row.Table.Columns("ObjectContent"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("ObjectContent", DataRowVersion.Original),System.Byte()))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBinary) 
				If value.IsNull Then
					row("ObjectContent") = DBNull.Value
				Else
					row("ObjectContent") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_OutwardBLSOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Service() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Service")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Service"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Service"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Service", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Service") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property

		public Overridable Property BlNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BlNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BlNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BlNo") = value
 
			End Set
		End Property

		public Overridable Property IssuePlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IssuePlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssuePlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IssuePlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IssuePlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IssuePlace") = value
 
			End Set
		End Property

		public Overridable Property IssueDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IssueDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("IssueDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("IssueDate") = DBNull.Value
				Else
					row("IssueDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property OnBoardDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("OnBoardDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("OnBoardDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("OnBoardDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("OnBoardDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("OnBoardDate") = DBNull.Value
				Else
					row("OnBoardDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property POR() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POR")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POR"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POR"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POR", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POR") = value
 
			End Set
		End Property

		public Overridable Property POL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POL") = value
 
			End Set
		End Property

		public Overridable Property POT() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POT")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POT"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POT") = value
 
			End Set
		End Property

		public Overridable Property POD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POD") = value
 
			End Set
		End Property

		public Overridable Property FPOD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FPOD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FPOD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FPOD") = value
 
			End Set
		End Property

		public Overridable Property PreVoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("PreVoyageID"),System.Guid)
				Else
					return CType( row("PreVoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("PreVoyageID") = value
 
			End Set
		End Property

		public Overridable Property VoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("VoyageID"),System.Guid)
				Else
					return CType( row("VoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("VoyageID") = value
 
			End Set
		End Property

		public Overridable Property NoOfBls() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOfBls") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("NoOfBls"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOfBls"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("NoOfBls", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("NoOfBls") = DBNull.Value
				Else
					row("NoOfBls") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TermsOfPayment() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TermsOfPayment")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TermsOfPayment"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TermsOfPayment"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TermsOfPayment", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TermsOfPayment") = value
 
			End Set
		End Property

		public Overridable Property ClientID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ClientID"),System.Guid)
				Else
					return CType( row("ClientID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ClientID") = value
 
			End Set
		End Property

		public Overridable Property FCLType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FCLType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCLType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FCLType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCLType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FCLType") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Reference() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Reference") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Reference"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("Reference"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Reference", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("Reference") = DBNull.Value
				Else
					row("Reference") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MailRelease() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MailRelease") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("MailRelease"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("MailRelease"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("MailRelease", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("MailRelease") = DBNull.Value
				Else
					row("MailRelease") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MailReleaseRem() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MailReleaseRem")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailReleaseRem"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MailReleaseRem"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MailReleaseRem", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MailReleaseRem") = value
 
			End Set
		End Property

		public Overridable Property FrtCoverdCarr() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FrtCoverdCarr")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdCarr"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FrtCoverdCarr"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdCarr", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FrtCoverdCarr") = value
 
			End Set
		End Property

		public Overridable Property FrtCoverdBlNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FrtCoverdBlNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdBlNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FrtCoverdBlNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FrtCoverdBlNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FrtCoverdBlNo") = value
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property LcNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LcNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LcNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LcNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LcNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LcNo") = value
 
			End Set
		End Property

		public Overridable Property BlStatus() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BlStatus")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlStatus"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BlStatus"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BlStatus", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BlStatus") = value
 
			End Set
		End Property

		public Overridable Property BookingID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BookingID"),System.Guid)
				Else
					return CType( row("BookingID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BookingID") = value
 
			End Set
		End Property

		public Overridable Property BookingNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BookingNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BookingNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BookingNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BookingNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BookingNo") = value
 
			End Set
		End Property

		public Overridable Property MBL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MBL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MBL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MBL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MBL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MBL") = value
 
			End Set
		End Property

		public Overridable Property FwdLine() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FwdLine")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwdLine"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FwdLine"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwdLine", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FwdLine") = value
 
			End Set
		End Property

		public Overridable Property FwAgent() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FwAgent")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwAgent"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FwAgent"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FwAgent", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FwAgent") = value
 
			End Set
		End Property

		public Overridable Property JobNumber() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("JobNumber")) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobNumber"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("JobNumber"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("JobNumber", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("JobNumber") = value
 
			End Set
		End Property

		public Overridable Property TFCCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TFCCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TFCCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TFCCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TFCCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TFCCode") = value
 
			End Set
		End Property

		public Overridable Property BarCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("BarCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("BarCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("BarCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("BarCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("BarCode") = value
 
			End Set
		End Property


		
		public Overridable Property TB_Booking() as ShippingBiz.TB_Booking 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BookingIDTB_OutwardBLS")) is nothing
					return new ShippingBiz.TB_Booking( DataContext, row.GetParentRow("BookingIDTB_OutwardBLS"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Booking )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BookingIDTB_OutwardBLS") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BookingIDTB_OutwardBLS") )		
				End If
			end set
		end property
	

		
		public Overridable Property TB_Clients() as ShippingBiz.TB_Clients 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("ClientIDTB_OutwardBLS")) is nothing
					return new ShippingBiz.TB_Clients( DataContext, row.GetParentRow("ClientIDTB_OutwardBLS"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Clients )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("ClientIDTB_OutwardBLS") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("ClientIDTB_OutwardBLS") )		
				End If
			end set
		end property
	



	    Private _TB_ExpInvoices As ShippingBiz.TB_ExpInvoiceCollection = Nothing
	
		Friend Sub refreshTB_ExpInvoices()
			If _TB_ExpInvoices Is Nothing Then _TB_ExpInvoices = New ShippingBiz.TB_ExpInvoiceCollection()
			
			Dim tmp as IList = _TB_ExpInvoices
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_ExpInvoice")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_ExpInvoice(MyBase.DataContext, chld)
				_TB_ExpInvoices.Add(obj)
			Next

			_TB_ExpInvoices.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_ExpInvoices() As ShippingBiz.TB_ExpInvoiceCollection
			Get 
				If _TB_ExpInvoices Is Nothing Then
					 refreshTB_ExpInvoices()
				End If
 
				Return _TB_ExpInvoices
			End Get
		End Property


			public Overridable Function AddTB_ExpInvoice(ByVal NewTB_ExpInvoice As ShippingBiz.TB_ExpInvoice) As Integer
				If _TB_ExpInvoices Is Nothing Then
					 refreshTB_ExpInvoices()
				End If
 
				NewTB_ExpInvoice.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_ExpInvoice"))
 
				 _TB_ExpInvoices.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_ExpInvoices.Add(NewTB_ExpInvoice) 
 
				 _TB_ExpInvoices.Parent = Me
 
				_TB_ExpInvoices.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_ExpInvoice() As ShippingBiz.TB_ExpInvoice
				If _TB_ExpInvoices Is Nothing Then
					 refreshTB_ExpInvoices()
				End If
 
				Dim _TB_ExpInvoice As New ShippingBiz.TB_ExpInvoice(MyBase.DataContext,MyBase.DataSet.Tables("TB_ExpInvoice").NewRow()) 
				MyBase.DataSet.Tables("TB_ExpInvoice").Rows.Add(_TB_ExpInvoice.row)
 
				Me.AddTB_ExpInvoice(_TB_ExpInvoice)
 
				Return _TB_ExpInvoice
			End Function
	    Private _Tb_OutwardBlsFrss As ShippingBiz.Tb_OutwardBlsFrsCollection = Nothing
	
		Friend Sub refreshTb_OutwardBlsFrss()
			If _Tb_OutwardBlsFrss Is Nothing Then _Tb_OutwardBlsFrss = New ShippingBiz.Tb_OutwardBlsFrsCollection()
			
			Dim tmp as IList = _Tb_OutwardBlsFrss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTb_OutwardBlsFrs")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.Tb_OutwardBlsFrs(MyBase.DataContext, chld)
				_Tb_OutwardBlsFrss.Add(obj)
			Next

			_Tb_OutwardBlsFrss.Parent = Me
		End Sub
		public Overridable ReadOnly Property Tb_OutwardBlsFrss() As ShippingBiz.Tb_OutwardBlsFrsCollection
			Get 
				If _Tb_OutwardBlsFrss Is Nothing Then
					 refreshTb_OutwardBlsFrss()
				End If
 
				Return _Tb_OutwardBlsFrss
			End Get
		End Property


			public Overridable Function AddTb_OutwardBlsFrs(ByVal NewTb_OutwardBlsFrs As ShippingBiz.Tb_OutwardBlsFrs) As Integer
				If _Tb_OutwardBlsFrss Is Nothing Then
					 refreshTb_OutwardBlsFrss()
				End If
 
				NewTb_OutwardBlsFrs.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTb_OutwardBlsFrs"))
 
				 _Tb_OutwardBlsFrss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _Tb_OutwardBlsFrss.Add(NewTb_OutwardBlsFrs) 
 
				 _Tb_OutwardBlsFrss.Parent = Me
 
				_Tb_OutwardBlsFrss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTb_OutwardBlsFrs() As ShippingBiz.Tb_OutwardBlsFrs
				If _Tb_OutwardBlsFrss Is Nothing Then
					 refreshTb_OutwardBlsFrss()
				End If
 
				Dim _Tb_OutwardBlsFrs As New ShippingBiz.Tb_OutwardBlsFrs(MyBase.DataContext,MyBase.DataSet.Tables("Tb_OutwardBlsFrs").NewRow()) 
				MyBase.DataSet.Tables("Tb_OutwardBlsFrs").Rows.Add(_Tb_OutwardBlsFrs.row)
 
				Me.AddTb_OutwardBlsFrs(_Tb_OutwardBlsFrs)
 
				Return _Tb_OutwardBlsFrs
			End Function
	    Private _TB_OutwardBlsGoodss As ShippingBiz.TB_OutwardBlsGoodsCollection = Nothing
	
		Friend Sub refreshTB_OutwardBlsGoodss()
			If _TB_OutwardBlsGoodss Is Nothing Then _TB_OutwardBlsGoodss = New ShippingBiz.TB_OutwardBlsGoodsCollection()
			
			Dim tmp as IList = _TB_OutwardBlsGoodss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_OutwardBlsGoods")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardBlsGoods(MyBase.DataContext, chld)
				_TB_OutwardBlsGoodss.Add(obj)
			Next

			_TB_OutwardBlsGoodss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardBlsGoodss() As ShippingBiz.TB_OutwardBlsGoodsCollection
			Get 
				If _TB_OutwardBlsGoodss Is Nothing Then
					 refreshTB_OutwardBlsGoodss()
				End If
 
				Return _TB_OutwardBlsGoodss
			End Get
		End Property


			public Overridable Function AddTB_OutwardBlsGoods(ByVal NewTB_OutwardBlsGoods As ShippingBiz.TB_OutwardBlsGoods) As Integer
				If _TB_OutwardBlsGoodss Is Nothing Then
					 refreshTB_OutwardBlsGoodss()
				End If
 
				NewTB_OutwardBlsGoods.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_OutwardBlsGoods"))
 
				 _TB_OutwardBlsGoodss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardBlsGoodss.Add(NewTB_OutwardBlsGoods) 
 
				 _TB_OutwardBlsGoodss.Parent = Me
 
				_TB_OutwardBlsGoodss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardBlsGoods() As ShippingBiz.TB_OutwardBlsGoods
				If _TB_OutwardBlsGoodss Is Nothing Then
					 refreshTB_OutwardBlsGoodss()
				End If
 
				Dim _TB_OutwardBlsGoods As New ShippingBiz.TB_OutwardBlsGoods(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardBlsGoods").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardBlsGoods").Rows.Add(_TB_OutwardBlsGoods.row)
 
				Me.AddTB_OutwardBlsGoods(_TB_OutwardBlsGoods)
 
				Return _TB_OutwardBlsGoods
			End Function
	    Private _TB_OutwardBlsNamess As ShippingBiz.TB_OutwardBlsNamesCollection = Nothing
	
		Friend Sub refreshTB_OutwardBlsNamess()
			If _TB_OutwardBlsNamess Is Nothing Then _TB_OutwardBlsNamess = New ShippingBiz.TB_OutwardBlsNamesCollection()
			
			Dim tmp as IList = _TB_OutwardBlsNamess
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_OutwardBlsNames")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardBlsNames(MyBase.DataContext, chld)
				_TB_OutwardBlsNamess.Add(obj)
			Next

			_TB_OutwardBlsNamess.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardBlsNamess() As ShippingBiz.TB_OutwardBlsNamesCollection
			Get 
				If _TB_OutwardBlsNamess Is Nothing Then
					 refreshTB_OutwardBlsNamess()
				End If
 
				Return _TB_OutwardBlsNamess
			End Get
		End Property


			public Overridable Function AddTB_OutwardBlsNames(ByVal NewTB_OutwardBlsNames As ShippingBiz.TB_OutwardBlsNames) As Integer
				If _TB_OutwardBlsNamess Is Nothing Then
					 refreshTB_OutwardBlsNamess()
				End If
 
				NewTB_OutwardBlsNames.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_OutwardBlsNames"))
 
				 _TB_OutwardBlsNamess.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardBlsNamess.Add(NewTB_OutwardBlsNames) 
 
				 _TB_OutwardBlsNamess.Parent = Me
 
				_TB_OutwardBlsNamess.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardBlsNames() As ShippingBiz.TB_OutwardBlsNames
				If _TB_OutwardBlsNamess Is Nothing Then
					 refreshTB_OutwardBlsNamess()
				End If
 
				Dim _TB_OutwardBlsNames As New ShippingBiz.TB_OutwardBlsNames(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardBlsNames").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardBlsNames").Rows.Add(_TB_OutwardBlsNames.row)
 
				Me.AddTB_OutwardBlsNames(_TB_OutwardBlsNames)
 
				Return _TB_OutwardBlsNames
			End Function
	    Private _TB_OutwardChargess As ShippingBiz.TB_OutwardChargesCollection = Nothing
	
		Friend Sub refreshTB_OutwardChargess()
			If _TB_OutwardChargess Is Nothing Then _TB_OutwardChargess = New ShippingBiz.TB_OutwardChargesCollection()
			
			Dim tmp as IList = _TB_OutwardChargess
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_OutwardCharges")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardCharges(MyBase.DataContext, chld)
				_TB_OutwardChargess.Add(obj)
			Next

			_TB_OutwardChargess.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardChargess() As ShippingBiz.TB_OutwardChargesCollection
			Get 
				If _TB_OutwardChargess Is Nothing Then
					 refreshTB_OutwardChargess()
				End If
 
				Return _TB_OutwardChargess
			End Get
		End Property


			public Overridable Function AddTB_OutwardCharges(ByVal NewTB_OutwardCharges As ShippingBiz.TB_OutwardCharges) As Integer
				If _TB_OutwardChargess Is Nothing Then
					 refreshTB_OutwardChargess()
				End If
 
				NewTB_OutwardCharges.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_OutwardCharges"))
 
				 _TB_OutwardChargess.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardChargess.Add(NewTB_OutwardCharges) 
 
				 _TB_OutwardChargess.Parent = Me
 
				_TB_OutwardChargess.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardCharges() As ShippingBiz.TB_OutwardCharges
				If _TB_OutwardChargess Is Nothing Then
					 refreshTB_OutwardChargess()
				End If
 
				Dim _TB_OutwardCharges As New ShippingBiz.TB_OutwardCharges(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardCharges").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardCharges").Rows.Add(_TB_OutwardCharges.row)
 
				Me.AddTB_OutwardCharges(_TB_OutwardCharges)
 
				Return _TB_OutwardCharges
			End Function
	    Private _TB_OutwardCntrss As ShippingBiz.TB_OutwardCntrsCollection = Nothing
	
		Friend Sub refreshTB_OutwardCntrss()
			If _TB_OutwardCntrss Is Nothing Then _TB_OutwardCntrss = New ShippingBiz.TB_OutwardCntrsCollection()
			
			Dim tmp as IList = _TB_OutwardCntrss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_OutwardCntrs")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardCntrs(MyBase.DataContext, chld)
				_TB_OutwardCntrss.Add(obj)
			Next

			_TB_OutwardCntrss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardCntrss() As ShippingBiz.TB_OutwardCntrsCollection
			Get 
				If _TB_OutwardCntrss Is Nothing Then
					 refreshTB_OutwardCntrss()
				End If
 
				Return _TB_OutwardCntrss
			End Get
		End Property


			public Overridable Function AddTB_OutwardCntrs(ByVal NewTB_OutwardCntrs As ShippingBiz.TB_OutwardCntrs) As Integer
				If _TB_OutwardCntrss Is Nothing Then
					 refreshTB_OutwardCntrss()
				End If
 
				NewTB_OutwardCntrs.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_OutwardCntrs"))
 
				 _TB_OutwardCntrss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardCntrss.Add(NewTB_OutwardCntrs) 
 
				 _TB_OutwardCntrss.Parent = Me
 
				_TB_OutwardCntrss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardCntrs() As ShippingBiz.TB_OutwardCntrs
				If _TB_OutwardCntrss Is Nothing Then
					 refreshTB_OutwardCntrss()
				End If
 
				Dim _TB_OutwardCntrs As New ShippingBiz.TB_OutwardCntrs(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardCntrs").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardCntrs").Rows.Add(_TB_OutwardCntrs.row)
 
				Me.AddTB_OutwardCntrs(_TB_OutwardCntrs)
 
				Return _TB_OutwardCntrs
			End Function
	    Private _TB_OutwardDiscounts As ShippingBiz.TB_OutwardDiscountCollection = Nothing
	
		Friend Sub refreshTB_OutwardDiscounts()
			If _TB_OutwardDiscounts Is Nothing Then _TB_OutwardDiscounts = New ShippingBiz.TB_OutwardDiscountCollection()
			
			Dim tmp as IList = _TB_OutwardDiscounts
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("BLIDTB_OutwardDiscount")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardDiscount(MyBase.DataContext, chld)
				_TB_OutwardDiscounts.Add(obj)
			Next

			_TB_OutwardDiscounts.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardDiscounts() As ShippingBiz.TB_OutwardDiscountCollection
			Get 
				If _TB_OutwardDiscounts Is Nothing Then
					 refreshTB_OutwardDiscounts()
				End If
 
				Return _TB_OutwardDiscounts
			End Get
		End Property


			public Overridable Function AddTB_OutwardDiscount(ByVal NewTB_OutwardDiscount As ShippingBiz.TB_OutwardDiscount) As Integer
				If _TB_OutwardDiscounts Is Nothing Then
					 refreshTB_OutwardDiscounts()
				End If
 
				NewTB_OutwardDiscount.row.SetParentRow(row,MyBase.DataSet.Relations("BLIDTB_OutwardDiscount"))
 
				 _TB_OutwardDiscounts.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardDiscounts.Add(NewTB_OutwardDiscount) 
 
				 _TB_OutwardDiscounts.Parent = Me
 
				_TB_OutwardDiscounts.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardDiscount() As ShippingBiz.TB_OutwardDiscount
				If _TB_OutwardDiscounts Is Nothing Then
					 refreshTB_OutwardDiscounts()
				End If
 
				Dim _TB_OutwardDiscount As New ShippingBiz.TB_OutwardDiscount(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardDiscount").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardDiscount").Rows.Add(_TB_OutwardDiscount.row)
 
				Me.AddTB_OutwardDiscount(_TB_OutwardDiscount)
 
				Return _TB_OutwardDiscount
			End Function


	End Class

 
	Public MustInherit Class TB_OutwardBlsCommentsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property CommentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CommentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CommentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CommentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CommentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CommentType") = value
 
			End Set
		End Property

		public Overridable Property Comment() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Comment")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Comment"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Comment"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Comment", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Comment") = value
 
			End Set
		End Property

		public Overridable Property CommentDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CommentDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CommentDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("CommentDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CommentDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("CommentDate") = DBNull.Value
				Else
					row("CommentDate") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class Tb_OutwardBlsFrsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property FCnee() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FCnee")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCnee"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FCnee"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FCnee", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FCnee") = value
 
			End Set
		End Property

		public Overridable Property FGoods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FGoods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FGoods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FGoods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FGoods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FGoods") = value
 
			End Set
		End Property

		public Overridable Property FPkgs() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FPkgs")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPkgs"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FPkgs"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPkgs", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FPkgs") = value
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardBLS() as ShippingBiz.TB_OutwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTb_OutwardBlsFrs")) is nothing
					return new ShippingBiz.TB_OutwardBLS( DataContext, row.GetParentRow("BLIDTb_OutwardBlsFrs"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTb_OutwardBlsFrs") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTb_OutwardBlsFrs") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardBlsGoodsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property Goods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Goods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Goods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Goods") = value
 
			End Set
		End Property

		public Overridable Property Marks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Marks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Marks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Marks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Marks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Marks") = value
 
			End Set
		End Property

		public Overridable Property MainCom() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MainCom")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MainCom"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MainCom"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MainCom", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MainCom") = value
 
			End Set
		End Property

		public Overridable Property TTW() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTW") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTW"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTW", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("TTW") = DBNull.Value
				Else
					row("TTW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TGW() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TGW") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("TGW"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("TGW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("TGW", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("TGW") = DBNull.Value
				Else
					row("TGW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TTLPkgs() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTLPkgs") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTLPkgs"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTLPkgs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TTLPkgs", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("TTLPkgs") = DBNull.Value
				Else
					row("TTLPkgs") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TTLCBM() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTLCBM") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("TTLCBM"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTLCBM"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("TTLCBM", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("TTLCBM") = DBNull.Value
				Else
					row("TTLCBM") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TTLNET() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TTLNET") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("TTLNET"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("TTLNET"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("TTLNET", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("TTLNET") = DBNull.Value
				Else
					row("TTLNET") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardBLS() as ShippingBiz.TB_OutwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_OutwardBlsGoods")) is nothing
					return new ShippingBiz.TB_OutwardBLS( DataContext, row.GetParentRow("BLIDTB_OutwardBlsGoods"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_OutwardBlsGoods") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_OutwardBlsGoods") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardBlsNamesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property Shipper() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Shipper")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Shipper"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Shipper"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Shipper", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Shipper") = value
 
			End Set
		End Property

		public Overridable Property Cnee() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Cnee")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Cnee"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Cnee"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Cnee", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Cnee") = value
 
			End Set
		End Property

		public Overridable Property Notify1() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify1")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify1"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify1"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify1", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify1") = value
 
			End Set
		End Property

		public Overridable Property Notify2() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify2")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify2"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify2") = value
 
			End Set
		End Property

		public Overridable Property Notify3() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify3")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify3"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify3") = value
 
			End Set
		End Property

		public Overridable Property Messers() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Messers")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Messers"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Messers"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Messers", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Messers") = value
 
			End Set
		End Property

		public Overridable Property ShipperID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ShipperID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ShipperID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ShipperID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ShipperID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ShipperID") = value
 
			End Set
		End Property

		public Overridable Property CneeID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CneeID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CneeID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CneeID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CneeID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CneeID") = value
 
			End Set
		End Property

		public Overridable Property Notify1ID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify1ID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify1ID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify1ID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify1ID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify1ID") = value
 
			End Set
		End Property

		public Overridable Property Notify2ID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify2ID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2ID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify2ID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify2ID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify2ID") = value
 
			End Set
		End Property

		public Overridable Property Notify3ID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Notify3ID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3ID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Notify3ID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Notify3ID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Notify3ID") = value
 
			End Set
		End Property

		public Overridable Property Forwarder() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Forwarder")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Forwarder"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Forwarder"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Forwarder", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Forwarder") = value
 
			End Set
		End Property

		public Overridable Property ForwarderID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ForwarderID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ForwarderID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ForwarderID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ForwarderID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ForwarderID") = value
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardBLS() as ShippingBiz.TB_OutwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_OutwardBlsNames")) is nothing
					return new ShippingBiz.TB_OutwardBLS( DataContext, row.GetParentRow("BLIDTB_OutwardBlsNames"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_OutwardBlsNames") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_OutwardBlsNames") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardBlsTemplateOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property XML() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("XML")) Then
                        Return vbNullString
                    Else
                        Return CType(row("XML"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("XML"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("XML", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("XML") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_OutwardChargesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Qty() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Qty") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Qty"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Qty"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Qty", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Qty") = DBNull.Value
				Else
					row("Qty") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Rate() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Rate") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Rate"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Rate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Rate", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Rate") = DBNull.Value
				Else
					row("Rate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PayAt() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PayAt")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAt"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PayAt"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAt", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PayAt") = value
 
			End Set
		End Property

		public Overridable Property ChargesBase() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesBase")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesBase"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesBase"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesBase", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesBase") = value
 
			End Set
		End Property

		public Overridable Property Terms() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Terms")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Terms"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Terms") = value
 
			End Set
		End Property

		public Overridable Property TariffClass() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TariffClass")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TariffClass"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TariffClass"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TariffClass", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TariffClass") = value
 
			End Set
		End Property

		public Overridable Property ActPlaceExRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ActPlaceExRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ActPlaceExRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("ActPlaceExRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("ActPlaceExRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("ActPlaceExRate") = DBNull.Value
				Else
					row("ActPlaceExRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MeaUnitOfCharge() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MeaUnitOfCharge")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MeaUnitOfCharge"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MeaUnitOfCharge"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MeaUnitOfCharge", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MeaUnitOfCharge") = value
 
			End Set
		End Property

		public Overridable Property FromPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FromPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FromPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FromPlace") = value
 
			End Set
		End Property

		public Overridable Property ToPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ToPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ToPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ToPlace") = value
 
			End Set
		End Property

		public Overridable Property PayAtBranch() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PayAtBranch")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtBranch"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PayAtBranch"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtBranch", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PayAtBranch") = value
 
			End Set
		End Property

		public Overridable Property PayAtExRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PayAtExRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("PayAtExRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("PayAtExRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("PayAtExRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("PayAtExRate") = DBNull.Value
				Else
					row("PayAtExRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PayAtPc() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PayAtPc")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtPc"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PayAtPc"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PayAtPc", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PayAtPc") = value
 
			End Set
		End Property

		public Overridable Property InvoiceAmount() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("InvoiceAmount") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("InvoiceAmount"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("InvoiceAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("InvoiceAmount", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("InvoiceAmount") = DBNull.Value
				Else
					row("InvoiceAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property RealAmount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("RealAmount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("RealAmount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("RealAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("RealAmount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("RealAmount") = DBNull.Value
				Else
					row("RealAmount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardBLS() as ShippingBiz.TB_OutwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_OutwardCharges")) is nothing
					return new ShippingBiz.TB_OutwardBLS( DataContext, row.GetParentRow("BLIDTB_OutwardCharges"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_OutwardCharges") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_OutwardCharges") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardCnsImcoOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property UNNO() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UNNO")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNO"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UNNO"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNO", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UNNO") = value
 
			End Set
		End Property

		public Overridable Property IMDGCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IMDGCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IMDGCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IMDGCode") = value
 
			End Set
		End Property

		public Overridable Property FlashPoint() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FlashPoint") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FlashPoint"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FlashPoint") = DBNull.Value
				Else
					row("FlashPoint") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PakingGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PakingGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PakingGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PakingGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PakingGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PakingGroup") = value
 
			End Set
		End Property

		public Overridable Property PageNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PageNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("PageNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("PageNumber") = DBNull.Value
				Else
					row("PageNumber") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property EMSNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("EMSNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("EMSNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("EMSNumber") = DBNull.Value
				Else
					row("EMSNumber") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardCntrs() as ShippingBiz.TB_OutwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_OutwardCnsImco")) is nothing
					return new ShippingBiz.TB_OutwardCntrs( DataContext, row.GetParentRow("CntrIDTB_OutwardCnsImco"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_OutwardCnsImco") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_OutwardCnsImco") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardCnsPkgsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property PackageType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PackageType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PackageType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PackageType") = value
 
			End Set
		End Property

		public Overridable Property NoOFPkgs() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOFPkgs") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOFPkgs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("NoOFPkgs") = DBNull.Value
				Else
					row("NoOFPkgs") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property GW() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GW") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("GW"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("GW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("GW", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("GW") = DBNull.Value
				Else
					row("GW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property CBM() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CBM") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("CBM"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("CBM"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("CBM", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("CBM") = DBNull.Value
				Else
					row("CBM") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property NET() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NET") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("NET"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("NET") = DBNull.Value
				Else
					row("NET") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FlashPoint() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FlashPoint") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FlashPoint"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FlashPoint") = DBNull.Value
				Else
					row("FlashPoint") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IMDGCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IMDGCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IMDGCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IMDGCode") = value
 
			End Set
		End Property

		public Overridable Property PakingGroup() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PakingGroup") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PakingGroup"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("PakingGroup"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PakingGroup", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("PakingGroup") = DBNull.Value
				Else
					row("PakingGroup") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PageNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PageNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("PageNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("PageNumber") = DBNull.Value
				Else
					row("PageNumber") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property EMSNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("EMSNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("EMSNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("EMSNumber") = DBNull.Value
				Else
					row("EMSNumber") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardCntrs() as ShippingBiz.TB_OutwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_OutwardCnsPkgs")) is nothing
					return new ShippingBiz.TB_OutwardCntrs( DataContext, row.GetParentRow("CntrIDTB_OutwardCnsPkgs"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_OutwardCnsPkgs") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_OutwardCnsPkgs") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardCnsTempratureOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property TempMin() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TempMin") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMin"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("TempMin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMin", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("TempMin") = DBNull.Value
				Else
					row("TempMin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TempMax() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TempMax") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMax"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("TempMax"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("TempMax", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("TempMax") = DBNull.Value
				Else
					row("TempMax") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TemperatureBase() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TemperatureBase")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TemperatureBase"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TemperatureBase"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TemperatureBase", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TemperatureBase") = value
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardCntrs() as ShippingBiz.TB_OutwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_OutwardCnsTemprature")) is nothing
					return new ShippingBiz.TB_OutwardCntrs( DataContext, row.GetParentRow("CntrIDTB_OutwardCnsTemprature"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_OutwardCnsTemprature") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_OutwardCnsTemprature") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardCntrsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property CntrNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CntrNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CntrNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CntrNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CntrNo") = value
 
			End Set
		End Property

		public Overridable Property CnSize() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnSize")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnSize"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnSize", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnSize") = value
 
			End Set
		End Property

		public Overridable Property CnType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CnType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CnType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CnType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CnType") = value
 
			End Set
		End Property

		public Overridable Property SealNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SealNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SealNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SealNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SealNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SealNo") = value
 
			End Set
		End Property

		public Overridable Property TW() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TW") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TW"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("TW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("TW", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("TW") = DBNull.Value
				Else
					row("TW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property GW() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GW") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("GW"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("GW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("GW", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("GW") = DBNull.Value
				Else
					row("GW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property CBM() As System.Data.SqlTypes.SqlSingle
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CBM") Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("CBM"),System.Single))
					End If
				Else
					if row.IsNull(row.Table.Columns("CBM"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlSingle.Null
					Else
						return new System.Data.SqlTypes.SqlSingle(CType(row("CBM", DataRowVersion.Original),System.Single))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlSingle) 
				If value.IsNull Then
					row("CBM") = DBNull.Value
				Else
					row("CBM") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property NET() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NET") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("NET"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("NET") = DBNull.Value
				Else
					row("NET") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FLE() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FLE")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FLE"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FLE"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FLE", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FLE") = value
 
			End Set
		End Property

		public Overridable Property SOC() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SOC")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SOC"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SOC", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SOC") = value
 
			End Set
		End Property

		public Overridable Property PackageType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PackageType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PackageType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PackageType") = value
 
			End Set
		End Property

		public Overridable Property NoOFPkgs() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOFPkgs") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOFPkgs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("NoOFPkgs") = DBNull.Value
				Else
					row("NoOFPkgs") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Goods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Goods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Goods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Goods") = value
 
			End Set
		End Property

		public Overridable Property IsOOG() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsOOG") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsOOG"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsOOG"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsOOG", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsOOG") = DBNull.Value
				Else
					row("IsOOG") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property POLTerm() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POLTerm")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POLTerm"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POLTerm"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POLTerm", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POLTerm") = value
 
			End Set
		End Property

		public Overridable Property PODTerm() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PODTerm")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PODTerm"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PODTerm"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PODTerm", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PODTerm") = value
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardBLS() as ShippingBiz.TB_OutwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_OutwardCntrs")) is nothing
					return new ShippingBiz.TB_OutwardBLS( DataContext, row.GetParentRow("BLIDTB_OutwardCntrs"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_OutwardCntrs") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_OutwardCntrs") )		
				End If
			end set
		end property
	



	    Private _TB_OutwardCnsImcos As ShippingBiz.TB_OutwardCnsImcoCollection = Nothing
	
		Friend Sub refreshTB_OutwardCnsImcos()
			If _TB_OutwardCnsImcos Is Nothing Then _TB_OutwardCnsImcos = New ShippingBiz.TB_OutwardCnsImcoCollection()
			
			Dim tmp as IList = _TB_OutwardCnsImcos
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_OutwardCnsImco")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardCnsImco(MyBase.DataContext, chld)
				_TB_OutwardCnsImcos.Add(obj)
			Next

			_TB_OutwardCnsImcos.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardCnsImcos() As ShippingBiz.TB_OutwardCnsImcoCollection
			Get 
				If _TB_OutwardCnsImcos Is Nothing Then
					 refreshTB_OutwardCnsImcos()
				End If
 
				Return _TB_OutwardCnsImcos
			End Get
		End Property


			public Overridable Function AddTB_OutwardCnsImco(ByVal NewTB_OutwardCnsImco As ShippingBiz.TB_OutwardCnsImco) As Integer
				If _TB_OutwardCnsImcos Is Nothing Then
					 refreshTB_OutwardCnsImcos()
				End If
 
				NewTB_OutwardCnsImco.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_OutwardCnsImco"))
 
				 _TB_OutwardCnsImcos.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardCnsImcos.Add(NewTB_OutwardCnsImco) 
 
				 _TB_OutwardCnsImcos.Parent = Me
 
				_TB_OutwardCnsImcos.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardCnsImco() As ShippingBiz.TB_OutwardCnsImco
				If _TB_OutwardCnsImcos Is Nothing Then
					 refreshTB_OutwardCnsImcos()
				End If
 
				Dim _TB_OutwardCnsImco As New ShippingBiz.TB_OutwardCnsImco(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardCnsImco").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardCnsImco").Rows.Add(_TB_OutwardCnsImco.row)
 
				Me.AddTB_OutwardCnsImco(_TB_OutwardCnsImco)
 
				Return _TB_OutwardCnsImco
			End Function
	    Private _TB_OutwardCnsPkgss As ShippingBiz.TB_OutwardCnsPkgsCollection = Nothing
	
		Friend Sub refreshTB_OutwardCnsPkgss()
			If _TB_OutwardCnsPkgss Is Nothing Then _TB_OutwardCnsPkgss = New ShippingBiz.TB_OutwardCnsPkgsCollection()
			
			Dim tmp as IList = _TB_OutwardCnsPkgss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_OutwardCnsPkgs")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardCnsPkgs(MyBase.DataContext, chld)
				_TB_OutwardCnsPkgss.Add(obj)
			Next

			_TB_OutwardCnsPkgss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardCnsPkgss() As ShippingBiz.TB_OutwardCnsPkgsCollection
			Get 
				If _TB_OutwardCnsPkgss Is Nothing Then
					 refreshTB_OutwardCnsPkgss()
				End If
 
				Return _TB_OutwardCnsPkgss
			End Get
		End Property


			public Overridable Function AddTB_OutwardCnsPkgs(ByVal NewTB_OutwardCnsPkgs As ShippingBiz.TB_OutwardCnsPkgs) As Integer
				If _TB_OutwardCnsPkgss Is Nothing Then
					 refreshTB_OutwardCnsPkgss()
				End If
 
				NewTB_OutwardCnsPkgs.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_OutwardCnsPkgs"))
 
				 _TB_OutwardCnsPkgss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardCnsPkgss.Add(NewTB_OutwardCnsPkgs) 
 
				 _TB_OutwardCnsPkgss.Parent = Me
 
				_TB_OutwardCnsPkgss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardCnsPkgs() As ShippingBiz.TB_OutwardCnsPkgs
				If _TB_OutwardCnsPkgss Is Nothing Then
					 refreshTB_OutwardCnsPkgss()
				End If
 
				Dim _TB_OutwardCnsPkgs As New ShippingBiz.TB_OutwardCnsPkgs(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardCnsPkgs").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardCnsPkgs").Rows.Add(_TB_OutwardCnsPkgs.row)
 
				Me.AddTB_OutwardCnsPkgs(_TB_OutwardCnsPkgs)
 
				Return _TB_OutwardCnsPkgs
			End Function
	    Private _TB_OutwardCnsTempratures As ShippingBiz.TB_OutwardCnsTempratureCollection = Nothing
	
		Friend Sub refreshTB_OutwardCnsTempratures()
			If _TB_OutwardCnsTempratures Is Nothing Then _TB_OutwardCnsTempratures = New ShippingBiz.TB_OutwardCnsTempratureCollection()
			
			Dim tmp as IList = _TB_OutwardCnsTempratures
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_OutwardCnsTemprature")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardCnsTemprature(MyBase.DataContext, chld)
				_TB_OutwardCnsTempratures.Add(obj)
			Next

			_TB_OutwardCnsTempratures.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardCnsTempratures() As ShippingBiz.TB_OutwardCnsTempratureCollection
			Get 
				If _TB_OutwardCnsTempratures Is Nothing Then
					 refreshTB_OutwardCnsTempratures()
				End If
 
				Return _TB_OutwardCnsTempratures
			End Get
		End Property


			public Overridable Function AddTB_OutwardCnsTemprature(ByVal NewTB_OutwardCnsTemprature As ShippingBiz.TB_OutwardCnsTemprature) As Integer
				If _TB_OutwardCnsTempratures Is Nothing Then
					 refreshTB_OutwardCnsTempratures()
				End If
 
				NewTB_OutwardCnsTemprature.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_OutwardCnsTemprature"))
 
				 _TB_OutwardCnsTempratures.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardCnsTempratures.Add(NewTB_OutwardCnsTemprature) 
 
				 _TB_OutwardCnsTempratures.Parent = Me
 
				_TB_OutwardCnsTempratures.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardCnsTemprature() As ShippingBiz.TB_OutwardCnsTemprature
				If _TB_OutwardCnsTempratures Is Nothing Then
					 refreshTB_OutwardCnsTempratures()
				End If
 
				Dim _TB_OutwardCnsTemprature As New ShippingBiz.TB_OutwardCnsTemprature(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardCnsTemprature").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardCnsTemprature").Rows.Add(_TB_OutwardCnsTemprature.row)
 
				Me.AddTB_OutwardCnsTemprature(_TB_OutwardCnsTemprature)
 
				Return _TB_OutwardCnsTemprature
			End Function
	    Private _TB_OutwardCntrsChargess As ShippingBiz.TB_OutwardCntrsChargesCollection = Nothing
	
		Friend Sub refreshTB_OutwardCntrsChargess()
			If _TB_OutwardCntrsChargess Is Nothing Then _TB_OutwardCntrsChargess = New ShippingBiz.TB_OutwardCntrsChargesCollection()
			
			Dim tmp as IList = _TB_OutwardCntrsChargess
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("CntrIDTB_OutwardCntrsCharges")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_OutwardCntrsCharges(MyBase.DataContext, chld)
				_TB_OutwardCntrsChargess.Add(obj)
			Next

			_TB_OutwardCntrsChargess.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_OutwardCntrsChargess() As ShippingBiz.TB_OutwardCntrsChargesCollection
			Get 
				If _TB_OutwardCntrsChargess Is Nothing Then
					 refreshTB_OutwardCntrsChargess()
				End If
 
				Return _TB_OutwardCntrsChargess
			End Get
		End Property


			public Overridable Function AddTB_OutwardCntrsCharges(ByVal NewTB_OutwardCntrsCharges As ShippingBiz.TB_OutwardCntrsCharges) As Integer
				If _TB_OutwardCntrsChargess Is Nothing Then
					 refreshTB_OutwardCntrsChargess()
				End If
 
				NewTB_OutwardCntrsCharges.row.SetParentRow(row,MyBase.DataSet.Relations("CntrIDTB_OutwardCntrsCharges"))
 
				 _TB_OutwardCntrsChargess.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_OutwardCntrsChargess.Add(NewTB_OutwardCntrsCharges) 
 
				 _TB_OutwardCntrsChargess.Parent = Me
 
				_TB_OutwardCntrsChargess.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_OutwardCntrsCharges() As ShippingBiz.TB_OutwardCntrsCharges
				If _TB_OutwardCntrsChargess Is Nothing Then
					 refreshTB_OutwardCntrsChargess()
				End If
 
				Dim _TB_OutwardCntrsCharges As New ShippingBiz.TB_OutwardCntrsCharges(MyBase.DataContext,MyBase.DataSet.Tables("TB_OutwardCntrsCharges").NewRow()) 
				MyBase.DataSet.Tables("TB_OutwardCntrsCharges").Rows.Add(_TB_OutwardCntrsCharges.row)
 
				Me.AddTB_OutwardCntrsCharges(_TB_OutwardCntrsCharges)
 
				Return _TB_OutwardCntrsCharges
			End Function


	End Class

 
	Public MustInherit Class TB_OutwardCntrsChargesOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property UnitRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("UnitRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("UnitRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("UnitRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("UnitRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("UnitRate") = DBNull.Value
				Else
					row("UnitRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MEARate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MEARate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MEARate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("MEARate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MEARate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("MEARate") = DBNull.Value
				Else
					row("MEARate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property WGTrate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("WGTrate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("WGTrate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("WGTrate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("WGTrate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("WGTrate") = DBNull.Value
				Else
					row("WGTrate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FromPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FromPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FromPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FromPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FromPlace") = value
 
			End Set
		End Property

		public Overridable Property ToPlace() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ToPlace")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ToPlace"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ToPlace", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ToPlace") = value
 
			End Set
		End Property

		public Overridable Property MinRate() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MinRate") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MinRate"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("MinRate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("MinRate", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("MinRate") = DBNull.Value
				Else
					row("MinRate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Terms() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Terms")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Terms"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Terms", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Terms") = value
 
			End Set
		End Property

		public Overridable Property RealAmount() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("RealAmount") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("RealAmount"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("RealAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("RealAmount", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("RealAmount") = DBNull.Value
				Else
					row("RealAmount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardCntrs() as ShippingBiz.TB_OutwardCntrs 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_OutwardCntrsCharges")) is nothing
					return new ShippingBiz.TB_OutwardCntrs( DataContext, row.GetParentRow("CntrIDTB_OutwardCntrsCharges"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardCntrs )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_OutwardCntrsCharges") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_OutwardCntrsCharges") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_OutwardDiscountOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property dFreeDays() As System.Data.SqlTypes.SqlInt32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("dFreeDays") Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dFreeDays"),System.Int32))
					End If
				Else
					if row.IsNull(row.Table.Columns("dFreeDays"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dFreeDays", DataRowVersion.Original),System.Int32))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt32) 
				If value.IsNull Then
					row("dFreeDays") = DBNull.Value
				Else
					row("dFreeDays") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property dPercent() As System.Data.SqlTypes.SqlInt32
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("dPercent") Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dPercent"),System.Int32))
					End If
				Else
					if row.IsNull(row.Table.Columns("dPercent"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt32.Null
					Else
						return new System.Data.SqlTypes.SqlInt32(CType(row("dPercent", DataRowVersion.Original),System.Int32))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt32) 
				If value.IsNull Then
					row("dPercent") = DBNull.Value
				Else
					row("dPercent") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property dAmount() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("dAmount") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("dAmount"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("dAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("dAmount", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("dAmount") = DBNull.Value
				Else
					row("dAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property LineSetel() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("LineSetel") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LineSetel"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("LineSetel"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LineSetel", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("LineSetel") = DBNull.Value
				Else
					row("LineSetel") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IsFDaysAsDiscount() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsFDaysAsDiscount") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsFDaysAsDiscount"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsFDaysAsDiscount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsFDaysAsDiscount", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsFDaysAsDiscount") = DBNull.Value
				Else
					row("IsFDaysAsDiscount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SpecialCalculate() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("SpecialCalculate") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SpecialCalculate"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("SpecialCalculate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("SpecialCalculate", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("SpecialCalculate") = DBNull.Value
				Else
					row("SpecialCalculate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PerDay20() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PerDay20") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay20"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("PerDay20"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay20", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("PerDay20") = DBNull.Value
				Else
					row("PerDay20") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PerDay40() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PerDay40") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay40"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("PerDay40"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay40", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("PerDay40") = DBNull.Value
				Else
					row("PerDay40") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PerDay45() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PerDay45") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay45"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("PerDay45"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("PerDay45", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("PerDay45") = DBNull.Value
				Else
					row("PerDay45") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DetentionID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("DetentionID"),System.Guid)
				Else
					return CType( row("DetentionID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("DetentionID") = value
 
			End Set
		End Property

		public Overridable Property NoTax() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("NoTax")) Then
                        Return vbNullString
                    Else
                        Return CType(row("NoTax"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("NoTax"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("NoTax", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("NoTax") = value
 
			End Set
		End Property


		
		public Overridable Property TB_OutwardBLS() as ShippingBiz.TB_OutwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_OutwardDiscount")) is nothing
					return new ShippingBiz.TB_OutwardBLS( DataContext, row.GetParentRow("BLIDTB_OutwardDiscount"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_OutwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_OutwardDiscount") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_OutwardDiscount") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_PermitDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property PermitID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("PermitID"),System.Guid)
				Else
					return CType( row("PermitID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("PermitID") = value
 
			End Set
		End Property

		public Overridable Property CntrID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("CntrID"),System.Guid)
				Else
					return CType( row("CntrID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("CntrID") = value
 
			End Set
		End Property

		public Overridable Property FLE() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FLE")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FLE"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FLE"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FLE", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FLE") = value
 
			End Set
		End Property

		public Overridable Property GW() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GW") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("GW"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("GW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("GW", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("GW") = DBNull.Value
				Else
					row("GW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PackageType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PackageType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PackageType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackageType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PackageType") = value
 
			End Set
		End Property

		public Overridable Property NoOFPkgs() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NoOFPkgs") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("NoOFPkgs"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("NoOFPkgs", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("NoOFPkgs") = DBNull.Value
				Else
					row("NoOFPkgs") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property SealNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SealNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SealNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SealNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SealNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SealNo") = value
 
			End Set
		End Property

		public Overridable Property TempMin() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TempMin") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TempMin"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("TempMin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TempMin", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("TempMin") = DBNull.Value
				Else
					row("TempMin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TempMax() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TempMax") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TempMax"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("TempMax"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TempMax", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("TempMax") = DBNull.Value
				Else
					row("TempMax") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_EcsContainers() as ShippingBiz.TB_EcsContainers 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("CntrIDTB_PermitDetails")) is nothing
					return new ShippingBiz.TB_EcsContainers( DataContext, row.GetParentRow("CntrIDTB_PermitDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_EcsContainers )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("CntrIDTB_PermitDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("CntrIDTB_PermitDetails") )		
				End If
			end set
		end property
	

		
		public Overridable Property TB_Permits() as ShippingBiz.TB_Permits 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("PermitIDTB_PermitDetails")) is nothing
					return new ShippingBiz.TB_Permits( DataContext, row.GetParentRow("PermitIDTB_PermitDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Permits )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("PermitIDTB_PermitDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("PermitIDTB_PermitDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_PermitsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property PermitNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PermitNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PermitNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PermitNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PermitNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PermitNo") = value
 
			End Set
		End Property

		public Overridable Property Status() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Status")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Status"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Status", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Status") = value
 
			End Set
		End Property

		public Overridable Property Goods() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Goods")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Goods"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Goods", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Goods") = value
 
			End Set
		End Property

		public Overridable Property FPOD() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FPOD")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FPOD"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPOD", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FPOD") = value
 
			End Set
		End Property

		public Overridable Property POT() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("POT")) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("POT"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("POT", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("POT") = value
 
			End Set
		End Property

		public Overridable Property IMDGCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("IMDGCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("IMDGCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMDGCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("IMDGCode") = value
 
			End Set
		End Property

		public Overridable Property UNNumber() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UNNumber")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNumber"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UNNumber"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UNNumber", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UNNumber") = value
 
			End Set
		End Property

		public Overridable Property FlashPoint() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FlashPoint") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FlashPoint"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FlashPoint", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FlashPoint") = DBNull.Value
				Else
					row("FlashPoint") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PackingGroup() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PackingGroup")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackingGroup"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PackingGroup"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PackingGroup", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PackingGroup") = value
 
			End Set
		End Property

		public Overridable Property PageNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PageNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("PageNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("PageNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("PageNumber") = DBNull.Value
				Else
					row("PageNumber") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property EMSNumber() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("EMSNumber") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("EMSNumber"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("EMSNumber", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("EMSNumber") = DBNull.Value
				Else
					row("EMSNumber") = value.Value
				End If
 
			End Set
		End Property




	    Private _TB_PermitDetailss As ShippingBiz.TB_PermitDetailsCollection = Nothing
	
		Friend Sub refreshTB_PermitDetailss()
			If _TB_PermitDetailss Is Nothing Then _TB_PermitDetailss = New ShippingBiz.TB_PermitDetailsCollection()
			
			Dim tmp as IList = _TB_PermitDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("PermitIDTB_PermitDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_PermitDetails(MyBase.DataContext, chld)
				_TB_PermitDetailss.Add(obj)
			Next

			_TB_PermitDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_PermitDetailss() As ShippingBiz.TB_PermitDetailsCollection
			Get 
				If _TB_PermitDetailss Is Nothing Then
					 refreshTB_PermitDetailss()
				End If
 
				Return _TB_PermitDetailss
			End Get
		End Property


			public Overridable Function AddTB_PermitDetails(ByVal NewTB_PermitDetails As ShippingBiz.TB_PermitDetails) As Integer
				If _TB_PermitDetailss Is Nothing Then
					 refreshTB_PermitDetailss()
				End If
 
				NewTB_PermitDetails.row.SetParentRow(row,MyBase.DataSet.Relations("PermitIDTB_PermitDetails"))
 
				 _TB_PermitDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_PermitDetailss.Add(NewTB_PermitDetails) 
 
				 _TB_PermitDetailss.Parent = Me
 
				_TB_PermitDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_PermitDetails() As ShippingBiz.TB_PermitDetails
				If _TB_PermitDetailss Is Nothing Then
					 refreshTB_PermitDetailss()
				End If
 
				Dim _TB_PermitDetails As New ShippingBiz.TB_PermitDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_PermitDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_PermitDetails").Rows.Add(_TB_PermitDetails.row)
 
				Me.AddTB_PermitDetails(_TB_PermitDetails)
 
				Return _TB_PermitDetails
			End Function


	End Class

 
	Public MustInherit Class TB_PInvoiceOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property BLID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("BLID"),System.Guid)
				Else
					return CType( row("BLID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("BLID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InvoiceNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InvoiceNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InvoiceNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InvoiceNo") = value
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property IssueTime() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IssueTime") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueTime"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("IssueTime"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("IssueTime", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("IssueTime") = DBNull.Value
				Else
					row("IssueTime") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IssueBy() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("IssueBy"),System.Guid)
				Else
					return CType( row("IssueBy", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("IssueBy") = value
 
			End Set
		End Property


		
		public Overridable Property TB_InwardBLS() as ShippingBiz.TB_InwardBLS 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("BLIDTB_PInvoice")) is nothing
					return new ShippingBiz.TB_InwardBLS( DataContext, row.GetParentRow("BLIDTB_PInvoice"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_InwardBLS )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("BLIDTB_PInvoice") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("BLIDTB_PInvoice") )		
				End If
			end set
		end property
	



	    Private _TB_PInvoiceDetailss As ShippingBiz.TB_PInvoiceDetailsCollection = Nothing
	
		Friend Sub refreshTB_PInvoiceDetailss()
			If _TB_PInvoiceDetailss Is Nothing Then _TB_PInvoiceDetailss = New ShippingBiz.TB_PInvoiceDetailsCollection()
			
			Dim tmp as IList = _TB_PInvoiceDetailss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("InvoiceIDTB_PInvoiceDetails")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_PInvoiceDetails(MyBase.DataContext, chld)
				_TB_PInvoiceDetailss.Add(obj)
			Next

			_TB_PInvoiceDetailss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_PInvoiceDetailss() As ShippingBiz.TB_PInvoiceDetailsCollection
			Get 
				If _TB_PInvoiceDetailss Is Nothing Then
					 refreshTB_PInvoiceDetailss()
				End If
 
				Return _TB_PInvoiceDetailss
			End Get
		End Property


			public Overridable Function AddTB_PInvoiceDetails(ByVal NewTB_PInvoiceDetails As ShippingBiz.TB_PInvoiceDetails) As Integer
				If _TB_PInvoiceDetailss Is Nothing Then
					 refreshTB_PInvoiceDetailss()
				End If
 
				NewTB_PInvoiceDetails.row.SetParentRow(row,MyBase.DataSet.Relations("InvoiceIDTB_PInvoiceDetails"))
 
				 _TB_PInvoiceDetailss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_PInvoiceDetailss.Add(NewTB_PInvoiceDetails) 
 
				 _TB_PInvoiceDetailss.Parent = Me
 
				_TB_PInvoiceDetailss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_PInvoiceDetails() As ShippingBiz.TB_PInvoiceDetails
				If _TB_PInvoiceDetailss Is Nothing Then
					 refreshTB_PInvoiceDetailss()
				End If
 
				Dim _TB_PInvoiceDetails As New ShippingBiz.TB_PInvoiceDetails(MyBase.DataContext,MyBase.DataSet.Tables("TB_PInvoiceDetails").NewRow()) 
				MyBase.DataSet.Tables("TB_PInvoiceDetails").Rows.Add(_TB_PInvoiceDetails.row)
 
				Me.AddTB_PInvoiceDetails(_TB_PInvoiceDetails)
 
				Return _TB_PInvoiceDetails
			End Function


	End Class

 
	Public MustInherit Class TB_PInvoiceDetailsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("InvoiceID"),System.Guid)
				Else
					return CType( row("InvoiceID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("InvoiceID") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property Remarks() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Remarks")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Remarks"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Remarks", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Remarks") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_PInvoice() as ShippingBiz.TB_PInvoice 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("InvoiceIDTB_PInvoiceDetails")) is nothing
					return new ShippingBiz.TB_PInvoice( DataContext, row.GetParentRow("InvoiceIDTB_PInvoiceDetails"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_PInvoice )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("InvoiceIDTB_PInvoiceDetails") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("InvoiceIDTB_PInvoiceDetails") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_PortsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property PortCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PortCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PortCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PortCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PortCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PortCode") = value
 
			End Set
		End Property

		public Overridable Property PortName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PortName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PortName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PortName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PortName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PortName") = value
 
			End Set
		End Property

		public Overridable Property FPortName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FPortName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPortName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FPortName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FPortName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FPortName") = value
 
			End Set
		End Property

		public Overridable Property Country() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Country")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Country"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Country"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Country", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Country") = value
 
			End Set
		End Property

		public Overridable Property EDIIPCODE() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EDIIPCODE")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EDIIPCODE"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EDIIPCODE"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EDIIPCODE", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EDIIPCODE") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_RecivedItemsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property InvoiceID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("InvoiceID"),System.Guid)
				Else
					return CType( row("InvoiceID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("InvoiceID") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt16
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq"),System.Int16))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt16.Null
					Else
						return new System.Data.SqlTypes.SqlInt16(CType(row("Seq", DataRowVersion.Original),System.Int16))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt16) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Description() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Description")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Description"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Description", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Description") = value
 
			End Set
		End Property

		public Overridable Property PaymentType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaymentType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaymentType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaymentType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaymentType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaymentType") = value
 
			End Set
		End Property

		public Overridable Property Bank() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Bank")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Bank"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Bank"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Bank", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Bank") = value
 
			End Set
		End Property

		public Overridable Property Currency() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Currency")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Currency"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Currency", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Currency") = value
 
			End Set
		End Property

		public Overridable Property Amount() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Amount") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Amount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Amount", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Amount") = DBNull.Value
				Else
					row("Amount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IrrAmount() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IrrAmount") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("IrrAmount"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("IrrAmount"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("IrrAmount", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("IrrAmount") = DBNull.Value
				Else
					row("IrrAmount") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PaidDate() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaidDate")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidDate"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaidDate"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidDate", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaidDate") = value
 
			End Set
		End Property

		public Overridable Property PaidRef() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("PaidRef")) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("PaidRef"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("PaidRef", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("PaidRef") = value
 
			End Set
		End Property

		public Overridable Property ReceivedType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReceivedType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReceivedType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReceivedType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReceivedType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReceivedType") = value
 
			End Set
		End Property


		
		public Overridable Property TB_Invoice() as ShippingBiz.TB_Invoice 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("InvoiceIDTB_RecivedItems")) is nothing
					return new ShippingBiz.TB_Invoice( DataContext, row.GetParentRow("InvoiceIDTB_RecivedItems"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Invoice )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("InvoiceIDTB_RecivedItems") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("InvoiceIDTB_RecivedItems") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_ReferenceOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property Code() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Code")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Code"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Code"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Code", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Code") = value
 
			End Set
		End Property

		public Overridable Property Section() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Section")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Section"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Section"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Section", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Section") = value
 
			End Set
		End Property

		public Overridable Property InternalCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("InternalCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("InternalCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("InternalCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("InternalCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("InternalCode") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_ReleaseLetterSeqOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property LastSeq() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("LastSeq")) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastSeq"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("LastSeq"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("LastSeq", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("LastSeq") = value
 
			End Set
		End Property

		public Overridable Property MaxSeq() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("MaxSeq")) Then
                        Return vbNullString
                    Else
                        Return CType(row("MaxSeq"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("MaxSeq"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("MaxSeq", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("MaxSeq") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_ReportCustomFieldsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ReportName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReportName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReportName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReportName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReportName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReportName") = value
 
			End Set
		End Property

		public Overridable Property ReportFrindlyName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ReportFrindlyName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReportFrindlyName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ReportFrindlyName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ReportFrindlyName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ReportFrindlyName") = value
 
			End Set
		End Property

		public Overridable Property FieldName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FieldName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FieldName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FieldName") = value
 
			End Set
		End Property

		public Overridable Property FieldFriendlyName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("FieldFriendlyName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldFriendlyName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("FieldFriendlyName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("FieldFriendlyName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("FieldFriendlyName") = value
 
			End Set
		End Property

		public Overridable Property DataContent() As System.Data.SqlTypes.SqlBinary
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DataContent") Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("DataContent"),System.Byte()))
					End If
				Else
					if row.IsNull(row.Table.Columns("DataContent"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBinary.Null
					Else
						return new System.Data.SqlTypes.SqlBinary(CType(row("DataContent", DataRowVersion.Original),System.Byte()))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBinary) 
				If value.IsNull Then
					row("DataContent") = DBNull.Value
				Else
					row("DataContent") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_SCNIDSOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property SCNID() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SCNID")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SCNID"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SCNID"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SCNID", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SCNID") = value
 
			End Set
		End Property

		public Overridable Property Name() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Name")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Name"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Name"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Name", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Name") = value
 
			End Set
		End Property

		public Overridable Property TEL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TEL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TEL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TEL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TEL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TEL") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_SeqOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property SeqType() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SeqType")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SeqType"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SeqType"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SeqType", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SeqType") = value
 
			End Set
		End Property

		public Overridable Property Office() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Office")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Office"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Office"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Office", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Office") = value
 
			End Set
		End Property

		public Overridable Property SeqYear() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SeqYear")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SeqYear"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SeqYear"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SeqYear", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SeqYear") = value
 
			End Set
		End Property

		public Overridable Property Seq() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Seq") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Seq"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("Seq"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Seq", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("Seq") = DBNull.Value
				Else
					row("Seq") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_SOFOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property VoyageID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("VoyageID"),System.Guid)
				Else
					return CType( row("VoyageID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("VoyageID") = value
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property ArrivalAnchorage() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ArrivalAnchorage") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ArrivalAnchorage"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ArrivalAnchorage"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ArrivalAnchorage", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ArrivalAnchorage") = DBNull.Value
				Else
					row("ArrivalAnchorage") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Pilot() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Pilot") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Pilot"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Pilot"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Pilot", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Pilot") = DBNull.Value
				Else
					row("Pilot") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Arrival() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Arrival") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Arrival"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Arrival"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Arrival", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Arrival") = DBNull.Value
				Else
					row("Arrival") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Berthed() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Berthed") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Berthed"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Berthed"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Berthed", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Berthed") = DBNull.Value
				Else
					row("Berthed") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Jetty() As System.Data.SqlTypes.SqlByte
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Jetty") Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("Jetty"),System.Byte))
					End If
				Else
					if row.IsNull(row.Table.Columns("Jetty"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlByte.Null
					Else
						return new System.Data.SqlTypes.SqlByte(CType(row("Jetty", DataRowVersion.Original),System.Byte))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlByte) 
				If value.IsNull Then
					row("Jetty") = DBNull.Value
				Else
					row("Jetty") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FreePraGrnt() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FreePraGrnt") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FreePraGrnt"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("FreePraGrnt"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("FreePraGrnt", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("FreePraGrnt") = DBNull.Value
				Else
					row("FreePraGrnt") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property CustomInspect() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("CustomInspect") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CustomInspect"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("CustomInspect"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("CustomInspect", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("CustomInspect") = DBNull.Value
				Else
					row("CustomInspect") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property GangOnBoard() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GangOnBoard") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GangOnBoard"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("GangOnBoard"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("GangOnBoard", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("GangOnBoard") = DBNull.Value
				Else
					row("GangOnBoard") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DschCmnc() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DschCmnc") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DschCmnc"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("DschCmnc"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DschCmnc", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("DschCmnc") = DBNull.Value
				Else
					row("DschCmnc") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DschCmpl() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DschCmpl") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DschCmpl"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("DschCmpl"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DschCmpl", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("DschCmpl") = DBNull.Value
				Else
					row("DschCmpl") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property LoadCmnc() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("LoadCmnc") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LoadCmnc"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("LoadCmnc"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LoadCmnc", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("LoadCmnc") = DBNull.Value
				Else
					row("LoadCmnc") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property LoadCmpl() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("LoadCmpl") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LoadCmpl"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("LoadCmpl"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("LoadCmpl", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("LoadCmpl") = DBNull.Value
				Else
					row("LoadCmpl") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DocOnBoard() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DocOnBoard") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DocOnBoard"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("DocOnBoard"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("DocOnBoard", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("DocOnBoard") = DBNull.Value
				Else
					row("DocOnBoard") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property PClear() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("PClear") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("PClear"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("PClear"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("PClear", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("PClear") = DBNull.Value
				Else
					row("PClear") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Unberthed() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Unberthed") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Unberthed"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Unberthed"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Unberthed", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Unberthed") = DBNull.Value
				Else
					row("Unberthed") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Sailed() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Sailed") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Sailed"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("Sailed"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("Sailed", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("Sailed") = DBNull.Value
				Else
					row("Sailed") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property NextPort() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("NextPort")) Then
                        Return vbNullString
                    Else
                        Return CType(row("NextPort"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("NextPort"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("NextPort", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("NextPort") = value
 
			End Set
		End Property

		public Overridable Property ETANextPort() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ETANextPort") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ETANextPort"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ETANextPort"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ETANextPort", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ETANextPort") = DBNull.Value
				Else
					row("ETANextPort") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IFOArrival() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IFOArrival") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IFOArrival"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("IFOArrival"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IFOArrival", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("IFOArrival") = DBNull.Value
				Else
					row("IFOArrival") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MDOArrival() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MDOArrival") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("MDOArrival"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("MDOArrival"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("MDOArrival", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("MDOArrival") = DBNull.Value
				Else
					row("MDOArrival") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FWaterArrival() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FWaterArrival") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FWaterArrival"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FWaterArrival"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FWaterArrival", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FWaterArrival") = DBNull.Value
				Else
					row("FWaterArrival") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IFOSup() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IFOSup") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IFOSup"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("IFOSup"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IFOSup", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("IFOSup") = DBNull.Value
				Else
					row("IFOSup") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MDOSup() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MDOSup") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("MDOSup"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("MDOSup"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("MDOSup", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("MDOSup") = DBNull.Value
				Else
					row("MDOSup") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FWaterSup() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FWaterSup") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FWaterSup"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FWaterSup"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FWaterSup", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FWaterSup") = DBNull.Value
				Else
					row("FWaterSup") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IFODep() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IFODep") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IFODep"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("IFODep"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("IFODep", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("IFODep") = DBNull.Value
				Else
					row("IFODep") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property MDODep() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("MDODep") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("MDODep"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("MDODep"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("MDODep", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("MDODep") = DBNull.Value
				Else
					row("MDODep") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property FWaterDep() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("FWaterDep") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FWaterDep"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("FWaterDep"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("FWaterDep", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("FWaterDep") = DBNull.Value
				Else
					row("FWaterDep") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DrftArvlFor() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DrftArvlFor") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftArvlFor"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("DrftArvlFor"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftArvlFor", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("DrftArvlFor") = DBNull.Value
				Else
					row("DrftArvlFor") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DrftArvlAft() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DrftArvlAft") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftArvlAft"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("DrftArvlAft"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftArvlAft", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("DrftArvlAft") = DBNull.Value
				Else
					row("DrftArvlAft") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DrftDepFor() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DrftDepFor") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftDepFor"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("DrftDepFor"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftDepFor", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("DrftDepFor") = DBNull.Value
				Else
					row("DrftDepFor") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DrftDepAft() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DrftDepAft") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftDepAft"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("DrftDepAft"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DrftDepAft", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("DrftDepAft") = DBNull.Value
				Else
					row("DrftDepAft") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DjwazNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DjwazNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DjwazNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DjwazNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DjwazNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DjwazNo") = value
 
			End Set
		End Property

		public Overridable Property ETA() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ETA") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ETA"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ETA"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ETA", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ETA") = DBNull.Value
				Else
					row("ETA") = value.Value
				End If
 
			End Set
		End Property


		
		public Overridable Property TB_Voyage() as ShippingBiz.TB_Voyage 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("VoyageIDTB_SOF")) is nothing
					return new ShippingBiz.TB_Voyage( DataContext, row.GetParentRow("VoyageIDTB_SOF"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Voyage )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("VoyageIDTB_SOF") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("VoyageIDTB_SOF") )		
				End If
			end set
		end property
	





	End Class

 
	Public MustInherit Class TB_TaxBaseOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property ChargesCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("ChargesCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("ChargesCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("ChargesCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("ChargesCode") = value
 
			End Set
		End Property

		public Overridable Property ApplyDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ApplyDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ApplyDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("ApplyDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("ApplyDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("ApplyDate") = DBNull.Value
				Else
					row("ApplyDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property validity() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("validity") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("validity"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("validity"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("validity", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("validity") = DBNull.Value
				Else
					row("validity") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Port() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Port")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Port"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Port", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Port") = value
 
			End Set
		End Property

		public Overridable Property Tax() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Tax") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Tax"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("Tax"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("Tax", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("Tax") = DBNull.Value
				Else
					row("Tax") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property TOLL() As System.Data.SqlTypes.SqlDecimal
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("TOLL") Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TOLL"),System.Decimal))
					End If
				Else
					if row.IsNull(row.Table.Columns("TOLL"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDecimal.Null
					Else
						return new System.Data.SqlTypes.SqlDecimal(CType(row("TOLL", DataRowVersion.Original),System.Decimal))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDecimal) 
				If value.IsNull Then
					row("TOLL") = DBNull.Value
				Else
					row("TOLL") = value.Value
				End If
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_UsersOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property UserFirstName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UserFirstName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserFirstName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UserFirstName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserFirstName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UserFirstName") = value
 
			End Set
		End Property

		public Overridable Property UserLastName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UserLastName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserLastName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UserLastName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserLastName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UserLastName") = value
 
			End Set
		End Property

		public Overridable Property UserAccount() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UserAccount")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserAccount"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UserAccount"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserAccount", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UserAccount") = value
 
			End Set
		End Property

		public Overridable Property UserCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("UserCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("UserCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("UserCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("UserCode") = value
 
			End Set
		End Property

		public Overridable Property Password() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Password")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Password"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Password"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Password", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Password") = value
 
			End Set
		End Property

		public Overridable Property EmailOffice() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EmailOffice")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EmailOffice"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EmailOffice"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EmailOffice", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EmailOffice") = value
 
			End Set
		End Property

		public Overridable Property EmailHome() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("EmailHome")) Then
                        Return vbNullString
                    Else
                        Return CType(row("EmailHome"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("EmailHome"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("EmailHome", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("EmailHome") = value
 
			End Set
		End Property

		public Overridable Property TEL() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TEL")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TEL"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TEL"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TEL", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TEL") = value
 
			End Set
		End Property

		public Overridable Property IsSalesAdmin() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsSalesAdmin") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsSalesAdmin"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsSalesAdmin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsSalesAdmin", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsSalesAdmin") = DBNull.Value
				Else
					row("IsSalesAdmin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IsAccountAdmin() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsAccountAdmin") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsAccountAdmin"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsAccountAdmin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsAccountAdmin", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsAccountAdmin") = DBNull.Value
				Else
					row("IsAccountAdmin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IsDocAdmin() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsDocAdmin") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsDocAdmin"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsDocAdmin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsDocAdmin", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsDocAdmin") = DBNull.Value
				Else
					row("IsDocAdmin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property IsEcsAdmin() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("IsEcsAdmin") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsEcsAdmin"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("IsEcsAdmin"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("IsEcsAdmin", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("IsEcsAdmin") = DBNull.Value
				Else
					row("IsEcsAdmin") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property BookingViewer() As System.Data.SqlTypes.SqlBoolean
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("BookingViewer") Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("BookingViewer"),System.Boolean))
					End If
				Else
					if row.IsNull(row.Table.Columns("BookingViewer"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlBoolean.Null
					Else
						return new System.Data.SqlTypes.SqlBoolean(CType(row("BookingViewer", DataRowVersion.Original),System.Boolean))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlBoolean) 
				If value.IsNull Then
					row("BookingViewer") = DBNull.Value
				Else
					row("BookingViewer") = value.Value
				End If
 
			End Set
		End Property




	    Private _TB_AccessLevels As ShippingBiz.TB_AccessLevelCollection = Nothing
	
		Friend Sub refreshTB_AccessLevels()
			If _TB_AccessLevels Is Nothing Then _TB_AccessLevels = New ShippingBiz.TB_AccessLevelCollection()
			
			Dim tmp as IList = _TB_AccessLevels
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("UserIDTB_AccessLevel")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_AccessLevel(MyBase.DataContext, chld)
				_TB_AccessLevels.Add(obj)
			Next

			_TB_AccessLevels.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_AccessLevels() As ShippingBiz.TB_AccessLevelCollection
			Get 
				If _TB_AccessLevels Is Nothing Then
					 refreshTB_AccessLevels()
				End If
 
				Return _TB_AccessLevels
			End Get
		End Property


			public Overridable Function AddTB_AccessLevel(ByVal NewTB_AccessLevel As ShippingBiz.TB_AccessLevel) As Integer
				If _TB_AccessLevels Is Nothing Then
					 refreshTB_AccessLevels()
				End If
 
				NewTB_AccessLevel.row.SetParentRow(row,MyBase.DataSet.Relations("UserIDTB_AccessLevel"))
 
				 _TB_AccessLevels.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_AccessLevels.Add(NewTB_AccessLevel) 
 
				 _TB_AccessLevels.Parent = Me
 
				_TB_AccessLevels.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_AccessLevel() As ShippingBiz.TB_AccessLevel
				If _TB_AccessLevels Is Nothing Then
					 refreshTB_AccessLevels()
				End If
 
				Dim _TB_AccessLevel As New ShippingBiz.TB_AccessLevel(MyBase.DataContext,MyBase.DataSet.Tables("TB_AccessLevel").NewRow()) 
				MyBase.DataSet.Tables("TB_AccessLevel").Rows.Add(_TB_AccessLevel.row)
 
				Me.AddTB_AccessLevel(_TB_AccessLevel)
 
				Return _TB_AccessLevel
			End Function


	End Class

 
	Public MustInherit Class TB_UsersDeptOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property UserID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("UserID"),System.Guid)
				Else
					return CType( row("UserID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("UserID") = value
 
			End Set
		End Property

		public Overridable Property Department() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Department")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Department"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Department"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Department", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Department") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_UsersLineOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property UserID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("UserID"),System.Guid)
				Else
					return CType( row("UserID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("UserID") = value
 
			End Set
		End Property

		public Overridable Property Line() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Line")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Line"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Line", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Line") = value
 
			End Set
		End Property






	End Class

 
	Public MustInherit Class TB_VesselsOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property VesselCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("VesselCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("VesselCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("VesselCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("VesselCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("VesselCode") = value
 
			End Set
		End Property

		public Overridable Property VesselName() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("VesselName")) Then
                        Return vbNullString
                    Else
                        Return CType(row("VesselName"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("VesselName"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("VesselName", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("VesselName") = value
 
			End Set
		End Property

		public Overridable Property DeadWeight() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("DeadWeight") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DeadWeight"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("DeadWeight"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("DeadWeight", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("DeadWeight") = DBNull.Value
				Else
					row("DeadWeight") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Capacity() As System.Data.SqlTypes.SqlInt64
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Capacity") Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Capacity"),System.Int64))
					End If
				Else
					if row.IsNull(row.Table.Columns("Capacity"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlInt64.Null
					Else
						return new System.Data.SqlTypes.SqlInt64(CType(row("Capacity", DataRowVersion.Original),System.Int64))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlInt64) 
				If value.IsNull Then
					row("Capacity") = DBNull.Value
				Else
					row("Capacity") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property GW() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("GW") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("GW"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("GW"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("GW", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("GW") = DBNull.Value
				Else
					row("GW") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property NET() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("NET") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("NET"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("NET", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("NET") = DBNull.Value
				Else
					row("NET") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Speed() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("Speed") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Speed"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("Speed"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("Speed", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("Speed") = DBNull.Value
				Else
					row("Speed") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property OfficalNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("OfficalNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("OfficalNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("OfficalNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("OfficalNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("OfficalNo") = value
 
			End Set
		End Property

		public Overridable Property CallLetter() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("CallLetter")) Then
                        Return vbNullString
                    Else
                        Return CType(row("CallLetter"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("CallLetter"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("CallLetter", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("CallLetter") = value
 
			End Set
		End Property

		public Overridable Property BuiltDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("BuiltDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("BuiltDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("BuiltDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("BuiltDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("BuiltDate") = DBNull.Value
				Else
					row("BuiltDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property Nationality() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Nationality")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Nationality"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Nationality"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Nationality", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Nationality") = value
 
			End Set
		End Property

		public Overridable Property VesselAccount() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("VesselAccount")) Then
                        Return vbNullString
                    Else
                        Return CType(row("VesselAccount"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("VesselAccount"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("VesselAccount", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("VesselAccount") = value
 
			End Set
		End Property

        Public Overridable Property IMONo() As System.String
            Get
                If row.RowState <> DataRowState.Deleted Then
                    If (row.IsNull("IMONo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMONo"), System.String)
                    End If
                Else
                    If (row.IsNull(row.Table.Columns("IMONo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("IMONo", DataRowVersion.Original), System.String)
                    End If
                End If
                'System.String
            End Get
            Set(ByVal Value As System.String)
                row("IMONo") = Value

            End Set
        End Property


	    Private _TB_Voyages As ShippingBiz.TB_VoyageCollection = Nothing
	
		Friend Sub refreshTB_Voyages()
			If _TB_Voyages Is Nothing Then _TB_Voyages = New ShippingBiz.TB_VoyageCollection()
			
			Dim tmp as IList = _TB_Voyages
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("VesselIDTB_Voyage")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_Voyage(MyBase.DataContext, chld)
				_TB_Voyages.Add(obj)
			Next

			_TB_Voyages.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_Voyages() As ShippingBiz.TB_VoyageCollection
			Get 
				If _TB_Voyages Is Nothing Then
					 refreshTB_Voyages()
				End If
 
				Return _TB_Voyages
			End Get
		End Property


			public Overridable Function AddTB_Voyage(ByVal NewTB_Voyage As ShippingBiz.TB_Voyage) As Integer
				If _TB_Voyages Is Nothing Then
					 refreshTB_Voyages()
				End If
 
				NewTB_Voyage.row.SetParentRow(row,MyBase.DataSet.Relations("VesselIDTB_Voyage"))
 
				 _TB_Voyages.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_Voyages.Add(NewTB_Voyage) 
 
				 _TB_Voyages.Parent = Me
 
				_TB_Voyages.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_Voyage() As ShippingBiz.TB_Voyage
				If _TB_Voyages Is Nothing Then
					 refreshTB_Voyages()
				End If
 
				Dim _TB_Voyage As New ShippingBiz.TB_Voyage(MyBase.DataContext,MyBase.DataSet.Tables("TB_Voyage").NewRow()) 
				MyBase.DataSet.Tables("TB_Voyage").Rows.Add(_TB_Voyage.row)
 
				Me.AddTB_Voyage(_TB_Voyage)
 
				Return _TB_Voyage
			End Function


	End Class

 
	Public MustInherit Class TB_VoyageOrmTemplate : Inherits Business
	
		Friend  Sub New(ByVal dataContext As DataManager, ByVal dr As DataRow)
			MyBase.New(dataContext)  
			MyBase.row = dr
		End Sub
 
 
		Default Public Property Item(ByVal propertyName As String) As Object
			Get
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(propertyName)

				If (Not pi Is Nothing) And pi.CanRead Then
					Return pi.GetValue(Me, Nothing)
				End If

				Dim a As Type()
				Dim mi As System.Reflection.MethodInfo = Me.GetType().GetMethod("Get" + propertyName, a)

				If Not mi Is Nothing Then
					Return mi.Invoke(Me, Nothing)
				End If

				Return Nothing
			End Get
			Set(ByVal Value As Object)
				Dim pi As System.Reflection.PropertyInfo = Me.GetType().GetProperty(Value)

				If (Not pi Is Nothing) And pi.CanWrite Then
					pi.SetValue(Me, Value, Nothing)
					Return
				End If

				Dim mi As System.Reflection.MethodInfo = Value.GetType().GetMethod("Set" + propertyName)

				If Not mi Is Nothing Then
					mi.Invoke(Me, New Object() {Value})
				End If
			End Set
		End Property
	
			
		Public Function IsDeleted() As Boolean
			Return (row.RowState = DataRowState.Deleted)
		End Function



		public Overridable Property ID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("ID"),System.Guid)
				Else
					return CType( row("ID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("ID") = value
 
			End Set
		End Property

		public Overridable Property VesselID() As System.Guid
			Get 
				If row.RowState <> DataRowState.Deleted Then
					return CType( row("VesselID"),System.Guid)
				Else
					return CType( row("VesselID", DataRowVersion.Original), System.Guid)
				End If
				
				'System.Guid
			End Get
			Set (ByVal Value As System.Guid) 
				row("VesselID") = value
 
			End Set
		End Property

		public Overridable Property VoyageNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("VoyageNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("VoyageNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("VoyageNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("VoyageNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("VoyageNo") = value
 
			End Set
		End Property

		public Overridable Property Carrier() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Carrier")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Carrier"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Carrier"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Carrier", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Carrier") = value
 
			End Set
		End Property

		public Overridable Property Service() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Service")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Service"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Service"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Service", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Service") = value
 
			End Set
		End Property

		public Overridable Property StartDate() As System.Data.SqlTypes.SqlDateTime
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("StartDate") Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StartDate"),System.DateTime))
					End If
				Else
					if row.IsNull(row.Table.Columns("StartDate"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDateTime.Null
					Else
						return new System.Data.SqlTypes.SqlDateTime(CType(row("StartDate", DataRowVersion.Original),System.DateTime))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDateTime) 
				If value.IsNull Then
					row("StartDate") = DBNull.Value
				Else
					row("StartDate") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ExchangeFrt() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ExchangeFrt") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("ExchangeFrt"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("ExchangeFrt"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("ExchangeFrt", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("ExchangeFrt") = DBNull.Value
				Else
					row("ExchangeFrt") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property ExchangeThc() As System.Data.SqlTypes.SqlDouble
			Get 
				If row.RowState <> DataRowState.Deleted Then
					If row.IsNull("ExchangeThc") Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("ExchangeThc"),System.Double))
					End If
				Else
					if row.IsNull(row.Table.Columns("ExchangeThc"), DataRowVersion.Original) Then
						return System.Data.SqlTypes.SqlDouble.Null
					Else
						return new System.Data.SqlTypes.SqlDouble(CType(row("ExchangeThc", DataRowVersion.Original),System.Double))
					End If
				End If
			End Get
			Set (ByVal Value As System.Data.SqlTypes.SqlDouble) 
				If value.IsNull Then
					row("ExchangeThc") = DBNull.Value
				Else
					row("ExchangeThc") = value.Value
				End If
 
			End Set
		End Property

		public Overridable Property DjwazNo() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("DjwazNo")) Then
                        Return vbNullString
                    Else
                        Return CType(row("DjwazNo"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("DjwazNo"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("DjwazNo", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("DjwazNo") = value
 
			End Set
		End Property

		public Overridable Property Master() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("Master")) Then
                        Return vbNullString
                    Else
                        Return CType(row("Master"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("Master"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("Master", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("Master") = value
 
			End Set
		End Property

		public Overridable Property SLOT() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("SLOT")) Then
                        Return vbNullString
                    Else
                        Return CType(row("SLOT"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("SLOT"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("SLOT", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("SLOT") = value
 
			End Set
		End Property

		public Overridable Property VoyageAccount() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("VoyageAccount")) Then
                        Return vbNullString
                    Else
                        Return CType(row("VoyageAccount"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("VoyageAccount"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("VoyageAccount", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("VoyageAccount") = value
 
			End Set
		End Property

		public Overridable Property TFCCode() As System.String
			Get 
				If row.RowState <> DataRowState.Deleted Then
				    If (row.IsNull("TFCCode")) Then
                        Return vbNullString
                    Else
                        Return CType(row("TFCCode"), System.String)
                    End If
				Else
                    If (row.IsNull(row.Table.Columns("TFCCode"), DataRowVersion.Original)) Then
                        Return vbNullString
                    Else
                        Return CType(row("TFCCode", DataRowVersion.Original), System.String)
                    End If				
				End If
				'System.String
			End Get
			Set (ByVal Value As System.String) 
				row("TFCCode") = value
 
			End Set
		End Property


		
		public Overridable Property TB_Vessels() as ShippingBiz.TB_Vessels 
			get
				If not row.GetParentRow(MyBase.DataSet.Relations("VesselIDTB_Voyage")) is nothing
					return new ShippingBiz.TB_Vessels( DataContext, row.GetParentRow("VesselIDTB_Voyage"))
				Else
					return Nothing
				End If
			end get
			set ( ByVal Value as ShippingBiz.TB_Vessels )
				If Value is Nothing Then
					row.SetParentRow(Nothing, MyBase.DataSet.Relations("VesselIDTB_Voyage") )
				Else
					row.SetParentRow( Value.row, MyBase.DataSet.Relations("VesselIDTB_Voyage") )		
				End If
			end set
		end property
	



	    Private _TB_EcsContainerss As ShippingBiz.TB_EcsContainersCollection = Nothing
	
		Friend Sub refreshTB_EcsContainerss()
			If _TB_EcsContainerss Is Nothing Then _TB_EcsContainerss = New ShippingBiz.TB_EcsContainersCollection()
			
			Dim tmp as IList = _TB_EcsContainerss
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("InVoyageIDTB_EcsContainers")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_EcsContainers(MyBase.DataContext, chld)
				_TB_EcsContainerss.Add(obj)
			Next

			_TB_EcsContainerss.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_EcsContainerss() As ShippingBiz.TB_EcsContainersCollection
			Get 
				If _TB_EcsContainerss Is Nothing Then
					 refreshTB_EcsContainerss()
				End If
 
				Return _TB_EcsContainerss
			End Get
		End Property


			public Overridable Function AddTB_EcsContainers(ByVal NewTB_EcsContainers As ShippingBiz.TB_EcsContainers) As Integer
				If _TB_EcsContainerss Is Nothing Then
					 refreshTB_EcsContainerss()
				End If
 
				NewTB_EcsContainers.row.SetParentRow(row,MyBase.DataSet.Relations("InVoyageIDTB_EcsContainers"))
 
				 _TB_EcsContainerss.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_EcsContainerss.Add(NewTB_EcsContainers) 
 
				 _TB_EcsContainerss.Parent = Me
 
				_TB_EcsContainerss.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_EcsContainers() As ShippingBiz.TB_EcsContainers
				If _TB_EcsContainerss Is Nothing Then
					 refreshTB_EcsContainerss()
				End If
 
				Dim _TB_EcsContainers As New ShippingBiz.TB_EcsContainers(MyBase.DataContext,MyBase.DataSet.Tables("TB_EcsContainers").NewRow()) 
				MyBase.DataSet.Tables("TB_EcsContainers").Rows.Add(_TB_EcsContainers.row)
 
				Me.AddTB_EcsContainers(_TB_EcsContainers)
 
				Return _TB_EcsContainers
			End Function
	    Private _TB_InwardBLSs As ShippingBiz.TB_InwardBLSCollection = Nothing
	
		Friend Sub refreshTB_InwardBLSs()
			If _TB_InwardBLSs Is Nothing Then _TB_InwardBLSs = New ShippingBiz.TB_InwardBLSCollection()
			
			Dim tmp as IList = _TB_InwardBLSs
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("VoyageIDTB_InwardBLS")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_InwardBLS(MyBase.DataContext, chld)
				_TB_InwardBLSs.Add(obj)
			Next

			_TB_InwardBLSs.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_InwardBLSs() As ShippingBiz.TB_InwardBLSCollection
			Get 
				If _TB_InwardBLSs Is Nothing Then
					 refreshTB_InwardBLSs()
				End If
 
				Return _TB_InwardBLSs
			End Get
		End Property


			public Overridable Function AddTB_InwardBLS(ByVal NewTB_InwardBLS As ShippingBiz.TB_InwardBLS) As Integer
				If _TB_InwardBLSs Is Nothing Then
					 refreshTB_InwardBLSs()
				End If
 
				NewTB_InwardBLS.row.SetParentRow(row,MyBase.DataSet.Relations("VoyageIDTB_InwardBLS"))
 
				 _TB_InwardBLSs.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_InwardBLSs.Add(NewTB_InwardBLS) 
 
				 _TB_InwardBLSs.Parent = Me
 
				_TB_InwardBLSs.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_InwardBLS() As ShippingBiz.TB_InwardBLS
				If _TB_InwardBLSs Is Nothing Then
					 refreshTB_InwardBLSs()
				End If
 
				Dim _TB_InwardBLS As New ShippingBiz.TB_InwardBLS(MyBase.DataContext,MyBase.DataSet.Tables("TB_InwardBLS").NewRow()) 
				MyBase.DataSet.Tables("TB_InwardBLS").Rows.Add(_TB_InwardBLS.row)
 
				Me.AddTB_InwardBLS(_TB_InwardBLS)
 
				Return _TB_InwardBLS
			End Function
	    Private _TB_SOFs As ShippingBiz.TB_SOFCollection = Nothing
	
		Friend Sub refreshTB_SOFs()
			If _TB_SOFs Is Nothing Then _TB_SOFs = New ShippingBiz.TB_SOFCollection()
			
			Dim tmp as IList = _TB_SOFs
			tmp.Clear()

			Dim cr() As DataRow = row.GetChildRows("VoyageIDTB_SOF")
			Dim chld As DataRow
			For Each chld In cr
				Dim obj As New ShippingBiz.TB_SOF(MyBase.DataContext, chld)
				_TB_SOFs.Add(obj)
			Next

			_TB_SOFs.Parent = Me
		End Sub
		public Overridable ReadOnly Property TB_SOFs() As ShippingBiz.TB_SOFCollection
			Get 
				If _TB_SOFs Is Nothing Then
					 refreshTB_SOFs()
				End If
 
				Return _TB_SOFs
			End Get
		End Property


			public Overridable Function AddTB_SOF(ByVal NewTB_SOF As ShippingBiz.TB_SOF) As Integer
				If _TB_SOFs Is Nothing Then
					 refreshTB_SOFs()
				End If
 
				NewTB_SOF.row.SetParentRow(row,MyBase.DataSet.Relations("VoyageIDTB_SOF"))
 
				 _TB_SOFs.Parent = Nothing
 
				' add to collection
				Dim index As Integer =  _TB_SOFs.Add(NewTB_SOF) 
 
				 _TB_SOFs.Parent = Me
 
				_TB_SOFs.OnListChanged(New ListChangedEventArgs(ListChangedType.ItemAdded,index))
 
				Return index
 
			End Function

			public Overridable Function NewTB_SOF() As ShippingBiz.TB_SOF
				If _TB_SOFs Is Nothing Then
					 refreshTB_SOFs()
				End If
 
				Dim _TB_SOF As New ShippingBiz.TB_SOF(MyBase.DataContext,MyBase.DataSet.Tables("TB_SOF").NewRow()) 
				MyBase.DataSet.Tables("TB_SOF").Rows.Add(_TB_SOF.row)
 
				Me.AddTB_SOF(_TB_SOF)
 
				Return _TB_SOF
			End Function


	End Class


	
End Namespace
